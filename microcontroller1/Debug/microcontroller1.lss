
microcontroller1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  000037b2  00003846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080013e  0080013e  00003924  2**0
                  ALLOC
  3 .stab         00003330  00000000  00000000  00003924  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001478  00000000  00000000  00006c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000080cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000837c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bc60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c04d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c81b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__vector_3>
      10:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__vector_6>
      1c:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__vector_7>
      20:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__vector_8>
      24:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 35       	cpi	r26, 0x50	; 80
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e2       	ldi	r26, 0x2B	; 43
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e2       	ldi	r24, 0x2B	; 43
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "timer.h"
#include "uart.h"
#include <avr/io.h> /*to use SREG REGISTER*/
#include <util/delay.h>

int main (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);       /* Enable I-Bit for Interrupts */
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	LCD_init();
     b68:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_init>

	UART_init(9600,&uart_config); /*baud rate = 9600*/
     b6c:	23 e3       	ldi	r18, 0x33	; 51
     b6e:	31 e0       	ldi	r19, 0x01	; 1
     b70:	60 e8       	ldi	r22, 0x80	; 128
     b72:	75 e2       	ldi	r23, 0x25	; 37
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a9 01       	movw	r20, r18
     b7a:	0e 94 1e 1a 	call	0x343c	; 0x343c <UART_init>

	LCD_clearScreen();
     b7e:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>

	LCD_displayStringRowColumn(0,1,"DOOR LOCKER");
     b82:	20 e6       	ldi	r18, 0x60	; 96
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	a9 01       	movw	r20, r18
     b8c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	aa e7       	ldi	r26, 0x7A	; 122
     b96:	b4 e4       	ldi	r27, 0x44	; 68
     b98:	8b 87       	std	Y+11, r24	; 0x0b
     b9a:	9c 87       	std	Y+12, r25	; 0x0c
     b9c:	ad 87       	std	Y+13, r26	; 0x0d
     b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	4a e7       	ldi	r20, 0x7A	; 122
     bae:	53 e4       	ldi	r21, 0x43	; 67
     bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	8f 83       	std	Y+7, r24	; 0x07
     bba:	98 87       	std	Y+8, r25	; 0x08
     bbc:	a9 87       	std	Y+9, r26	; 0x09
     bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc0:	6f 81       	ldd	r22, Y+7	; 0x07
     bc2:	78 85       	ldd	r23, Y+8	; 0x08
     bc4:	89 85       	ldd	r24, Y+9	; 0x09
     bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e8       	ldi	r20, 0x80	; 128
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	2c f4       	brge	.+10     	; 0xbe2 <main+0x9c>
		__ticks = 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9e 83       	std	Y+6, r25	; 0x06
     bde:	8d 83       	std	Y+5, r24	; 0x05
     be0:	3f c0       	rjmp	.+126    	; 0xc60 <main+0x11a>
	else if (__tmp > 65535)
     be2:	6f 81       	ldd	r22, Y+7	; 0x07
     be4:	78 85       	ldd	r23, Y+8	; 0x08
     be6:	89 85       	ldd	r24, Y+9	; 0x09
     be8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	3f ef       	ldi	r19, 0xFF	; 255
     bee:	4f e7       	ldi	r20, 0x7F	; 127
     bf0:	57 e4       	ldi	r21, 0x47	; 71
     bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf6:	18 16       	cp	r1, r24
     bf8:	4c f5       	brge	.+82     	; 0xc4c <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e2       	ldi	r20, 0x20	; 32
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <main+0xfc>
     c24:	89 e1       	ldi	r24, 0x19	; 25
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <main+0xea>
     c34:	9c 83       	std	Y+4, r25	; 0x04
     c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	69 f7       	brne	.-38     	; 0xc24 <main+0xde>
     c4a:	14 c0       	rjmp	.+40     	; 0xc74 <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4c:	6f 81       	ldd	r22, Y+7	; 0x07
     c4e:	78 85       	ldd	r23, Y+8	; 0x08
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	9e 83       	std	Y+6, r25	; 0x06
     c5e:	8d 83       	std	Y+5, r24	; 0x05
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <main+0x126>
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);

    ifPassSaved(); /*check if there is a saved password*/
     c74:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <ifPassSaved>

	while(1){
		if (g_state ==0){
     c78:	80 91 3f 01 	lds	r24, 0x013F
     c7c:	88 23       	and	r24, r24
     c7e:	19 f4       	brne	.+6      	; 0xc86 <main+0x140>
			new_password();
     c80:	0e 94 6e 06 	call	0xcdc	; 0xcdc <new_password>
     c84:	f9 cf       	rjmp	.-14     	; 0xc78 <main+0x132>
		}
		else if (g_state ==1 && g_flag==5){
     c86:	80 91 3f 01 	lds	r24, 0x013F
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	69 f4       	brne	.+26     	; 0xca8 <main+0x162>
     c8e:	80 91 3e 01 	lds	r24, 0x013E
     c92:	85 30       	cpi	r24, 0x05	; 5
     c94:	49 f4       	brne	.+18     	; 0xca8 <main+0x162>
					g_wrong++;
     c96:	80 91 40 01 	lds	r24, 0x0140
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	80 93 40 01 	sts	0x0140, r24
					g_flag=3;
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	80 93 3e 01 	sts	0x013E, r24
     ca6:	e8 cf       	rjmp	.-48     	; 0xc78 <main+0x132>
					//g_state=1;
					//main_menu();
				}
		else if (g_wrong==MAX_WRONG_ATTEMPT){
     ca8:	80 91 40 01 	lds	r24, 0x0140
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	19 f4       	brne	.+6      	; 0xcb6 <main+0x170>
					ALERTscreen();
     cb0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <ALERTscreen>
     cb4:	e1 cf       	rjmp	.-62     	; 0xc78 <main+0x132>
				}
		else if (g_state==1){
     cb6:	80 91 3f 01 	lds	r24, 0x013F
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	19 f4       	brne	.+6      	; 0xcc4 <main+0x17e>
			main_menu();
     cbe:	0e 94 d7 07 	call	0xfae	; 0xfae <main_menu>
     cc2:	da cf       	rjmp	.-76     	; 0xc78 <main+0x132>
		}
		else if(g_state==2){
     cc4:	80 91 3f 01 	lds	r24, 0x013F
     cc8:	82 30       	cpi	r24, 0x02	; 2
     cca:	b1 f6       	brne	.-84     	; 0xc78 <main+0x132>
		   LCD_clearScreen();
     ccc:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>

		   sendCommand(OPEN_DOOR);
     cd0:	80 e6       	ldi	r24, 0x60	; 96
     cd2:	0e 94 41 0b 	call	0x1682	; 0x1682 <sendCommand>

		   doorIsOpeningCloseingScreen();
     cd6:	0e 94 03 0c 	call	0x1806	; 0x1806 <doorIsOpeningCloseingScreen>
     cda:	ce cf       	rjmp	.-100    	; 0xc78 <main+0x132>

00000cdc <new_password>:
 *
 *  Arguments  : None
 *
 * Returns     : Void*/

void new_password(void){
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	6e 97       	sbiw	r28, 0x1e	; 30
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
	/* first entry :
	 * save the password in array then send it through UART
	 * */
	if(g_flag==0){
     cf0:	80 91 3e 01 	lds	r24, 0x013E
     cf4:	88 23       	and	r24, r24
     cf6:	e1 f4       	brne	.+56     	; 0xd30 <new_password+0x54>
	LCD_clearScreen();
     cf8:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,1,"please enter pass");
     cfc:	2c e6       	ldi	r18, 0x6C	; 108
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	a9 01       	movw	r20, r18
     d06:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
	LCD_moveCursor(3,1);
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_moveCursor>
	fillInPassword(g_password);
     d12:	8a e4       	ldi	r24, 0x4A	; 74
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fillInPassword>
	sendCommand(SEND_PASSWORD);
     d1a:	8a ea       	ldi	r24, 0xAA	; 170
     d1c:	0e 94 41 0b 	call	0x1682	; 0x1682 <sendCommand>
	SendPassword(g_password);
     d20:	8a e4       	ldi	r24, 0x4A	; 74
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	0e 94 15 0b 	call	0x162a	; 0x162a <SendPassword>
	g_flag=1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 3e 01 	sts	0x013E, r24
     d2e:	36 c1       	rjmp	.+620    	; 0xf9c <new_password+0x2c0>
	}
	/*second entry
	 *save the password in array then send it through UART again
	 **/

	else if(g_flag==1){
     d30:	80 91 3e 01 	lds	r24, 0x013E
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	e1 f4       	brne	.+56     	; 0xd70 <new_password+0x94>
	LCD_clearScreen();
     d38:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,1,"please re-enter pass :");
     d3c:	2e e7       	ldi	r18, 0x7E	; 126
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	a9 01       	movw	r20, r18
     d46:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
	LCD_moveCursor(3,1);
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_moveCursor>
	fillInPassword(g_password);
     d52:	8a e4       	ldi	r24, 0x4A	; 74
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fillInPassword>
	sendCommand(PASSWORD_CONFIRMATION);
     d5a:	8b eb       	ldi	r24, 0xBB	; 187
     d5c:	0e 94 41 0b 	call	0x1682	; 0x1682 <sendCommand>
	SendPassword(g_password);
     d60:	8a e4       	ldi	r24, 0x4A	; 74
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	0e 94 15 0b 	call	0x162a	; 0x162a <SendPassword>
	g_flag=2;
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	80 93 3e 01 	sts	0x013E, r24
     d6e:	16 c1       	rjmp	.+556    	; 0xf9c <new_password+0x2c0>
		}
	/* when the other micro-controller compare the 2 entries it send a command
	 * MATCH : go to main menu
	 * MISMATCH : returns to new password screen
	 */
	else if(g_flag==2){
     d70:	80 91 3e 01 	lds	r24, 0x013E
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	09 f0       	breq	.+2      	; 0xd7a <new_password+0x9e>
     d78:	11 c1       	rjmp	.+546    	; 0xf9c <new_password+0x2c0>

		switch(recieveCommand())
     d7a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <recieveCommand>
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	3e 8f       	std	Y+30, r19	; 0x1e
     d84:	2d 8f       	std	Y+29, r18	; 0x1d
     d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d88:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d8a:	80 31       	cpi	r24, 0x10	; 16
     d8c:	91 05       	cpc	r25, r1
     d8e:	39 f0       	breq	.+14     	; 0xd9e <new_password+0xc2>
     d90:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d92:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d94:	20 32       	cpi	r18, 0x20	; 32
     d96:	31 05       	cpc	r19, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <new_password+0xc0>
     d9a:	83 c0       	rjmp	.+262    	; 0xea2 <new_password+0x1c6>
     d9c:	ff c0       	rjmp	.+510    	; 0xf9c <new_password+0x2c0>
		{
		case MATCH:
			LCD_clearScreen();
     d9e:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,1,"password match");
     da2:	25 e9       	ldi	r18, 0x95	; 149
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	a9 01       	movw	r20, r18
     dac:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	aa ef       	ldi	r26, 0xFA	; 250
     db6:	b4 e4       	ldi	r27, 0x44	; 68
     db8:	89 8f       	std	Y+25, r24	; 0x19
     dba:	9a 8f       	std	Y+26, r25	; 0x1a
     dbc:	ab 8f       	std	Y+27, r26	; 0x1b
     dbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc0:	69 8d       	ldd	r22, Y+25	; 0x19
     dc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	4a e7       	ldi	r20, 0x7A	; 122
     dce:	53 e4       	ldi	r21, 0x43	; 67
     dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	8d 8b       	std	Y+21, r24	; 0x15
     dda:	9e 8b       	std	Y+22, r25	; 0x16
     ddc:	af 8b       	std	Y+23, r26	; 0x17
     dde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     de0:	6d 89       	ldd	r22, Y+21	; 0x15
     de2:	7e 89       	ldd	r23, Y+22	; 0x16
     de4:	8f 89       	ldd	r24, Y+23	; 0x17
     de6:	98 8d       	ldd	r25, Y+24	; 0x18
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e8       	ldi	r20, 0x80	; 128
     dee:	5f e3       	ldi	r21, 0x3F	; 63
     df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df4:	88 23       	and	r24, r24
     df6:	2c f4       	brge	.+10     	; 0xe02 <new_password+0x126>
		__ticks = 1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	9c 8b       	std	Y+20, r25	; 0x14
     dfe:	8b 8b       	std	Y+19, r24	; 0x13
     e00:	3f c0       	rjmp	.+126    	; 0xe80 <new_password+0x1a4>
	else if (__tmp > 65535)
     e02:	6d 89       	ldd	r22, Y+21	; 0x15
     e04:	7e 89       	ldd	r23, Y+22	; 0x16
     e06:	8f 89       	ldd	r24, Y+23	; 0x17
     e08:	98 8d       	ldd	r25, Y+24	; 0x18
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	3f ef       	ldi	r19, 0xFF	; 255
     e0e:	4f e7       	ldi	r20, 0x7F	; 127
     e10:	57 e4       	ldi	r21, 0x47	; 71
     e12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e16:	18 16       	cp	r1, r24
     e18:	4c f5       	brge	.+82     	; 0xe6c <new_password+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1a:	69 8d       	ldd	r22, Y+25	; 0x19
     e1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e20:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e2       	ldi	r20, 0x20	; 32
     e28:	51 e4       	ldi	r21, 0x41	; 65
     e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	9c 8b       	std	Y+20, r25	; 0x14
     e40:	8b 8b       	std	Y+19, r24	; 0x13
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <new_password+0x186>
     e44:	89 e1       	ldi	r24, 0x19	; 25
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9a 8b       	std	Y+18, r25	; 0x12
     e4a:	89 8b       	std	Y+17, r24	; 0x11
     e4c:	89 89       	ldd	r24, Y+17	; 0x11
     e4e:	9a 89       	ldd	r25, Y+18	; 0x12
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <new_password+0x174>
     e54:	9a 8b       	std	Y+18, r25	; 0x12
     e56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e58:	8b 89       	ldd	r24, Y+19	; 0x13
     e5a:	9c 89       	ldd	r25, Y+20	; 0x14
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	9c 8b       	std	Y+20, r25	; 0x14
     e60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	8b 89       	ldd	r24, Y+19	; 0x13
     e64:	9c 89       	ldd	r25, Y+20	; 0x14
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	69 f7       	brne	.-38     	; 0xe44 <new_password+0x168>
     e6a:	14 c0       	rjmp	.+40     	; 0xe94 <new_password+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6c:	6d 89       	ldd	r22, Y+21	; 0x15
     e6e:	7e 89       	ldd	r23, Y+22	; 0x16
     e70:	8f 89       	ldd	r24, Y+23	; 0x17
     e72:	98 8d       	ldd	r25, Y+24	; 0x18
     e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9c 8b       	std	Y+20, r25	; 0x14
     e7e:	8b 8b       	std	Y+19, r24	; 0x13
     e80:	8b 89       	ldd	r24, Y+19	; 0x13
     e82:	9c 89       	ldd	r25, Y+20	; 0x14
     e84:	98 8b       	std	Y+16, r25	; 0x10
     e86:	8f 87       	std	Y+15, r24	; 0x0f
     e88:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8a:	98 89       	ldd	r25, Y+16	; 0x10
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <new_password+0x1b0>
     e90:	98 8b       	std	Y+16, r25	; 0x10
     e92:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			g_flag=3;
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	80 93 3e 01 	sts	0x013E, r24
			g_state=1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 3f 01 	sts	0x013F, r24
     ea0:	7d c0       	rjmp	.+250    	; 0xf9c <new_password+0x2c0>
			break;

		case MISMATCH:
			LCD_clearScreen();
     ea2:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,1,"password did not match");
     ea6:	24 ea       	ldi	r18, 0xA4	; 164
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	a9 01       	movw	r20, r18
     eb0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
			g_flag=0;
     eb4:	10 92 3e 01 	sts	0x013E, r1
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	aa e7       	ldi	r26, 0x7A	; 122
     ebe:	b4 e4       	ldi	r27, 0x44	; 68
     ec0:	8b 87       	std	Y+11, r24	; 0x0b
     ec2:	9c 87       	std	Y+12, r25	; 0x0c
     ec4:	ad 87       	std	Y+13, r26	; 0x0d
     ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4a e7       	ldi	r20, 0x7A	; 122
     ed6:	53 e4       	ldi	r21, 0x43	; 67
     ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	8f 83       	std	Y+7, r24	; 0x07
     ee2:	98 87       	std	Y+8, r25	; 0x08
     ee4:	a9 87       	std	Y+9, r26	; 0x09
     ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee8:	6f 81       	ldd	r22, Y+7	; 0x07
     eea:	78 85       	ldd	r23, Y+8	; 0x08
     eec:	89 85       	ldd	r24, Y+9	; 0x09
     eee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	5f e3       	ldi	r21, 0x3F	; 63
     ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     efc:	88 23       	and	r24, r24
     efe:	2c f4       	brge	.+10     	; 0xf0a <new_password+0x22e>
		__ticks = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	3f c0       	rjmp	.+126    	; 0xf88 <new_password+0x2ac>
	else if (__tmp > 65535)
     f0a:	6f 81       	ldd	r22, Y+7	; 0x07
     f0c:	78 85       	ldd	r23, Y+8	; 0x08
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f1e:	18 16       	cp	r1, r24
     f20:	4c f5       	brge	.+82     	; 0xf74 <new_password+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f22:	6b 85       	ldd	r22, Y+11	; 0x0b
     f24:	7c 85       	ldd	r23, Y+12	; 0x0c
     f26:	8d 85       	ldd	r24, Y+13	; 0x0d
     f28:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9e 83       	std	Y+6, r25	; 0x06
     f48:	8d 83       	std	Y+5, r24	; 0x05
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <new_password+0x28e>
     f4c:	89 e1       	ldi	r24, 0x19	; 25
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <new_password+0x27c>
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	69 f7       	brne	.-38     	; 0xf4c <new_password+0x270>
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <new_password+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f74:	6f 81       	ldd	r22, Y+7	; 0x07
     f76:	78 85       	ldd	r23, Y+8	; 0x08
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <new_password+0x2b8>
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	/*else
		g_state =1 ;*/

}
     f9c:	6e 96       	adiw	r28, 0x1e	; 30
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <main_menu>:
 *
 * Arguments  : None
 *
 * Returns     : Void*/

void main_menu(void){
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	e8 97       	sbiw	r28, 0x38	; 56
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
	/* + : take the password and send it to the other micro-controller
	 * to check if its a match open the door
	 * - : take the password and send it to other micro-controller to check if its a match
	 * to change to new password
	 * */
	LCD_clearScreen();
     fc2:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,1,"+ : open the door");
     fc6:	2b eb       	ldi	r18, 0xBB	; 187
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	a9 01       	movw	r20, r18
     fd0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(3,1,"- : change pass");
     fd4:	2d ec       	ldi	r18, 0xCD	; 205
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	a9 01       	movw	r20, r18
     fde:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>

	 if (KEYPAD_getPressedKey()=='+'){
     fe2:	0e 94 ef 10 	call	0x21de	; 0x21de <KEYPAD_getPressedKey>
     fe6:	8b 32       	cpi	r24, 0x2B	; 43
     fe8:	09 f0       	breq	.+2      	; 0xfec <main_menu+0x3e>
     fea:	a5 c1       	rjmp	.+842    	; 0x1336 <main_menu+0x388>
		LCD_clearScreen();
     fec:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"please enter pass :");
     ff0:	2d ed       	ldi	r18, 0xDD	; 221
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	a9 01       	movw	r20, r18
     ffa:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
		LCD_moveCursor(3,1);
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_moveCursor>
		fillInPassword(g_password);
    1006:	8a e4       	ldi	r24, 0x4A	; 74
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fillInPassword>
		 LCD_clearScreen();
    100e:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
		 LCD_displayStringRowColumn(0,1,"checking..");
    1012:	21 ef       	ldi	r18, 0xF1	; 241
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	a9 01       	movw	r20, r18
    101c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	aa e7       	ldi	r26, 0x7A	; 122
    1026:	b4 e4       	ldi	r27, 0x44	; 68
    1028:	8d ab       	std	Y+53, r24	; 0x35
    102a:	9e ab       	std	Y+54, r25	; 0x36
    102c:	af ab       	std	Y+55, r26	; 0x37
    102e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1030:	6d a9       	ldd	r22, Y+53	; 0x35
    1032:	7e a9       	ldd	r23, Y+54	; 0x36
    1034:	8f a9       	ldd	r24, Y+55	; 0x37
    1036:	98 ad       	ldd	r25, Y+56	; 0x38
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4a e7       	ldi	r20, 0x7A	; 122
    103e:	53 e4       	ldi	r21, 0x43	; 67
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	89 ab       	std	Y+49, r24	; 0x31
    104a:	9a ab       	std	Y+50, r25	; 0x32
    104c:	ab ab       	std	Y+51, r26	; 0x33
    104e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1050:	69 a9       	ldd	r22, Y+49	; 0x31
    1052:	7a a9       	ldd	r23, Y+50	; 0x32
    1054:	8b a9       	ldd	r24, Y+51	; 0x33
    1056:	9c a9       	ldd	r25, Y+52	; 0x34
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1064:	88 23       	and	r24, r24
    1066:	2c f4       	brge	.+10     	; 0x1072 <main_menu+0xc4>
		__ticks = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	98 ab       	std	Y+48, r25	; 0x30
    106e:	8f a7       	std	Y+47, r24	; 0x2f
    1070:	3f c0       	rjmp	.+126    	; 0x10f0 <main_menu+0x142>
	else if (__tmp > 65535)
    1072:	69 a9       	ldd	r22, Y+49	; 0x31
    1074:	7a a9       	ldd	r23, Y+50	; 0x32
    1076:	8b a9       	ldd	r24, Y+51	; 0x33
    1078:	9c a9       	ldd	r25, Y+52	; 0x34
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	3f ef       	ldi	r19, 0xFF	; 255
    107e:	4f e7       	ldi	r20, 0x7F	; 127
    1080:	57 e4       	ldi	r21, 0x47	; 71
    1082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1086:	18 16       	cp	r1, r24
    1088:	4c f5       	brge	.+82     	; 0x10dc <main_menu+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108a:	6d a9       	ldd	r22, Y+53	; 0x35
    108c:	7e a9       	ldd	r23, Y+54	; 0x36
    108e:	8f a9       	ldd	r24, Y+55	; 0x37
    1090:	98 ad       	ldd	r25, Y+56	; 0x38
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e2       	ldi	r20, 0x20	; 32
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	98 ab       	std	Y+48, r25	; 0x30
    10b0:	8f a7       	std	Y+47, r24	; 0x2f
    10b2:	0f c0       	rjmp	.+30     	; 0x10d2 <main_menu+0x124>
    10b4:	89 e1       	ldi	r24, 0x19	; 25
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9e a7       	std	Y+46, r25	; 0x2e
    10ba:	8d a7       	std	Y+45, r24	; 0x2d
    10bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    10be:	9e a5       	ldd	r25, Y+46	; 0x2e
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <main_menu+0x112>
    10c4:	9e a7       	std	Y+46, r25	; 0x2e
    10c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ca:	98 a9       	ldd	r25, Y+48	; 0x30
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	98 ab       	std	Y+48, r25	; 0x30
    10d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d4:	98 a9       	ldd	r25, Y+48	; 0x30
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	69 f7       	brne	.-38     	; 0x10b4 <main_menu+0x106>
    10da:	14 c0       	rjmp	.+40     	; 0x1104 <main_menu+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10dc:	69 a9       	ldd	r22, Y+49	; 0x31
    10de:	7a a9       	ldd	r23, Y+50	; 0x32
    10e0:	8b a9       	ldd	r24, Y+51	; 0x33
    10e2:	9c a9       	ldd	r25, Y+52	; 0x34
    10e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	98 ab       	std	Y+48, r25	; 0x30
    10ee:	8f a7       	std	Y+47, r24	; 0x2f
    10f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10f2:	98 a9       	ldd	r25, Y+48	; 0x30
    10f4:	9c a7       	std	Y+44, r25	; 0x2c
    10f6:	8b a7       	std	Y+43, r24	; 0x2b
    10f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <main_menu+0x14e>
    1100:	9c a7       	std	Y+44, r25	; 0x2c
    1102:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);


		sendCommand(CHECK_PASSWORD);
    1104:	80 e5       	ldi	r24, 0x50	; 80
    1106:	0e 94 41 0b 	call	0x1682	; 0x1682 <sendCommand>
		SendPassword(g_password);
    110a:	8a e4       	ldi	r24, 0x4A	; 74
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	0e 94 15 0b 	call	0x162a	; 0x162a <SendPassword>
		g_cmd = recieveCommand();
    1112:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <recieveCommand>
    1116:	80 93 49 01 	sts	0x0149, r24
		 if (g_cmd==MATCH)
    111a:	80 91 49 01 	lds	r24, 0x0149
    111e:	80 31       	cpi	r24, 0x10	; 16
    1120:	09 f0       	breq	.+2      	; 0x1124 <main_menu+0x176>
    1122:	82 c0       	rjmp	.+260    	; 0x1228 <main_menu+0x27a>
				{

			 LCD_clearScreen();
    1124:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
			 LCD_displayStringRowColumn(0,1,"password match");
    1128:	25 e9       	ldi	r18, 0x95	; 149
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	a9 01       	movw	r20, r18
    1132:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
					g_flag=4;
    1136:	84 e0       	ldi	r24, 0x04	; 4
    1138:	80 93 3e 01 	sts	0x013E, r24
					g_state=2;
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	80 93 3f 01 	sts	0x013F, r24
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	aa e7       	ldi	r26, 0x7A	; 122
    1148:	b4 e4       	ldi	r27, 0x44	; 68
    114a:	8f a3       	std	Y+39, r24	; 0x27
    114c:	98 a7       	std	Y+40, r25	; 0x28
    114e:	a9 a7       	std	Y+41, r26	; 0x29
    1150:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1152:	6f a1       	ldd	r22, Y+39	; 0x27
    1154:	78 a5       	ldd	r23, Y+40	; 0x28
    1156:	89 a5       	ldd	r24, Y+41	; 0x29
    1158:	9a a5       	ldd	r25, Y+42	; 0x2a
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	4a e7       	ldi	r20, 0x7A	; 122
    1160:	53 e4       	ldi	r21, 0x43	; 67
    1162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	8b a3       	std	Y+35, r24	; 0x23
    116c:	9c a3       	std	Y+36, r25	; 0x24
    116e:	ad a3       	std	Y+37, r26	; 0x25
    1170:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1172:	6b a1       	ldd	r22, Y+35	; 0x23
    1174:	7c a1       	ldd	r23, Y+36	; 0x24
    1176:	8d a1       	ldd	r24, Y+37	; 0x25
    1178:	9e a1       	ldd	r25, Y+38	; 0x26
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1186:	88 23       	and	r24, r24
    1188:	2c f4       	brge	.+10     	; 0x1194 <main_menu+0x1e6>
		__ticks = 1;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	9a a3       	std	Y+34, r25	; 0x22
    1190:	89 a3       	std	Y+33, r24	; 0x21
    1192:	3f c0       	rjmp	.+126    	; 0x1212 <main_menu+0x264>
	else if (__tmp > 65535)
    1194:	6b a1       	ldd	r22, Y+35	; 0x23
    1196:	7c a1       	ldd	r23, Y+36	; 0x24
    1198:	8d a1       	ldd	r24, Y+37	; 0x25
    119a:	9e a1       	ldd	r25, Y+38	; 0x26
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	3f ef       	ldi	r19, 0xFF	; 255
    11a0:	4f e7       	ldi	r20, 0x7F	; 127
    11a2:	57 e4       	ldi	r21, 0x47	; 71
    11a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a8:	18 16       	cp	r1, r24
    11aa:	4c f5       	brge	.+82     	; 0x11fe <main_menu+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ac:	6f a1       	ldd	r22, Y+39	; 0x27
    11ae:	78 a5       	ldd	r23, Y+40	; 0x28
    11b0:	89 a5       	ldd	r24, Y+41	; 0x29
    11b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	9a a3       	std	Y+34, r25	; 0x22
    11d2:	89 a3       	std	Y+33, r24	; 0x21
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <main_menu+0x246>
    11d6:	89 e1       	ldi	r24, 0x19	; 25
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	98 a3       	std	Y+32, r25	; 0x20
    11dc:	8f 8f       	std	Y+31, r24	; 0x1f
    11de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11e0:	98 a1       	ldd	r25, Y+32	; 0x20
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <main_menu+0x234>
    11e6:	98 a3       	std	Y+32, r25	; 0x20
    11e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ea:	89 a1       	ldd	r24, Y+33	; 0x21
    11ec:	9a a1       	ldd	r25, Y+34	; 0x22
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	9a a3       	std	Y+34, r25	; 0x22
    11f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f4:	89 a1       	ldd	r24, Y+33	; 0x21
    11f6:	9a a1       	ldd	r25, Y+34	; 0x22
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	69 f7       	brne	.-38     	; 0x11d6 <main_menu+0x228>
    11fc:	4b c1       	rjmp	.+662    	; 0x1494 <main_menu+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1200:	7c a1       	ldd	r23, Y+36	; 0x24
    1202:	8d a1       	ldd	r24, Y+37	; 0x25
    1204:	9e a1       	ldd	r25, Y+38	; 0x26
    1206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	9a a3       	std	Y+34, r25	; 0x22
    1210:	89 a3       	std	Y+33, r24	; 0x21
    1212:	89 a1       	ldd	r24, Y+33	; 0x21
    1214:	9a a1       	ldd	r25, Y+34	; 0x22
    1216:	9e 8f       	std	Y+30, r25	; 0x1e
    1218:	8d 8f       	std	Y+29, r24	; 0x1d
    121a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <main_menu+0x270>
    1222:	9e 8f       	std	Y+30, r25	; 0x1e
    1224:	8d 8f       	std	Y+29, r24	; 0x1d
    1226:	36 c1       	rjmp	.+620    	; 0x1494 <main_menu+0x4e6>
					_delay_ms(1000);
				}
		 else if( g_cmd==MISMATCH){
    1228:	80 91 49 01 	lds	r24, 0x0149
    122c:	80 32       	cpi	r24, 0x20	; 32
    122e:	09 f0       	breq	.+2      	; 0x1232 <main_menu+0x284>
    1230:	31 c1       	rjmp	.+610    	; 0x1494 <main_menu+0x4e6>
					LCD_clearScreen();
    1232:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,1,"password did not match");
    1236:	24 ea       	ldi	r18, 0xA4	; 164
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	a9 01       	movw	r20, r18
    1240:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
					sendCommand(WRONG_PASSWORD);
    1244:	8d ed       	ldi	r24, 0xDD	; 221
    1246:	0e 94 41 0b 	call	0x1682	; 0x1682 <sendCommand>
					g_flag=5;
    124a:	85 e0       	ldi	r24, 0x05	; 5
    124c:	80 93 3e 01 	sts	0x013E, r24
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	aa e7       	ldi	r26, 0x7A	; 122
    1256:	b4 e4       	ldi	r27, 0x44	; 68
    1258:	89 8f       	std	Y+25, r24	; 0x19
    125a:	9a 8f       	std	Y+26, r25	; 0x1a
    125c:	ab 8f       	std	Y+27, r26	; 0x1b
    125e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1260:	69 8d       	ldd	r22, Y+25	; 0x19
    1262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a e7       	ldi	r20, 0x7A	; 122
    126e:	53 e4       	ldi	r21, 0x43	; 67
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	8d 8b       	std	Y+21, r24	; 0x15
    127a:	9e 8b       	std	Y+22, r25	; 0x16
    127c:	af 8b       	std	Y+23, r26	; 0x17
    127e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1280:	6d 89       	ldd	r22, Y+21	; 0x15
    1282:	7e 89       	ldd	r23, Y+22	; 0x16
    1284:	8f 89       	ldd	r24, Y+23	; 0x17
    1286:	98 8d       	ldd	r25, Y+24	; 0x18
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e8       	ldi	r20, 0x80	; 128
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1294:	88 23       	and	r24, r24
    1296:	2c f4       	brge	.+10     	; 0x12a2 <main_menu+0x2f4>
		__ticks = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 8b       	std	Y+20, r25	; 0x14
    129e:	8b 8b       	std	Y+19, r24	; 0x13
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <main_menu+0x372>
	else if (__tmp > 65535)
    12a2:	6d 89       	ldd	r22, Y+21	; 0x15
    12a4:	7e 89       	ldd	r23, Y+22	; 0x16
    12a6:	8f 89       	ldd	r24, Y+23	; 0x17
    12a8:	98 8d       	ldd	r25, Y+24	; 0x18
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	57 e4       	ldi	r21, 0x47	; 71
    12b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	4c f5       	brge	.+82     	; 0x130c <main_menu+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	69 8d       	ldd	r22, Y+25	; 0x19
    12bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9c 8b       	std	Y+20, r25	; 0x14
    12e0:	8b 8b       	std	Y+19, r24	; 0x13
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <main_menu+0x354>
    12e4:	89 e1       	ldi	r24, 0x19	; 25
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9a 8b       	std	Y+18, r25	; 0x12
    12ea:	89 8b       	std	Y+17, r24	; 0x11
    12ec:	89 89       	ldd	r24, Y+17	; 0x11
    12ee:	9a 89       	ldd	r25, Y+18	; 0x12
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <main_menu+0x342>
    12f4:	9a 8b       	std	Y+18, r25	; 0x12
    12f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	8b 89       	ldd	r24, Y+19	; 0x13
    12fa:	9c 89       	ldd	r25, Y+20	; 0x14
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	9c 8b       	std	Y+20, r25	; 0x14
    1300:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	8b 89       	ldd	r24, Y+19	; 0x13
    1304:	9c 89       	ldd	r25, Y+20	; 0x14
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	69 f7       	brne	.-38     	; 0x12e4 <main_menu+0x336>
    130a:	c4 c0       	rjmp	.+392    	; 0x1494 <main_menu+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130c:	6d 89       	ldd	r22, Y+21	; 0x15
    130e:	7e 89       	ldd	r23, Y+22	; 0x16
    1310:	8f 89       	ldd	r24, Y+23	; 0x17
    1312:	98 8d       	ldd	r25, Y+24	; 0x18
    1314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9c 8b       	std	Y+20, r25	; 0x14
    131e:	8b 8b       	std	Y+19, r24	; 0x13
    1320:	8b 89       	ldd	r24, Y+19	; 0x13
    1322:	9c 89       	ldd	r25, Y+20	; 0x14
    1324:	98 8b       	std	Y+16, r25	; 0x10
    1326:	8f 87       	std	Y+15, r24	; 0x0f
    1328:	8f 85       	ldd	r24, Y+15	; 0x0f
    132a:	98 89       	ldd	r25, Y+16	; 0x10
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <main_menu+0x37e>
    1330:	98 8b       	std	Y+16, r25	; 0x10
    1332:	8f 87       	std	Y+15, r24	; 0x0f
    1334:	af c0       	rjmp	.+350    	; 0x1494 <main_menu+0x4e6>
					_delay_ms(1000);
		         }
	}
	else if (KEYPAD_getPressedKey()=='-'){
    1336:	0e 94 ef 10 	call	0x21de	; 0x21de <KEYPAD_getPressedKey>
    133a:	8d 32       	cpi	r24, 0x2D	; 45
    133c:	09 f0       	breq	.+2      	; 0x1340 <main_menu+0x392>
    133e:	aa c0       	rjmp	.+340    	; 0x1494 <main_menu+0x4e6>
		LCD_clearScreen();
    1340:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"please enter pass :");
    1344:	2d ed       	ldi	r18, 0xDD	; 221
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	a9 01       	movw	r20, r18
    134e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
		LCD_moveCursor(3,1);
    1352:	83 e0       	ldi	r24, 0x03	; 3
    1354:	61 e0       	ldi	r22, 0x01	; 1
    1356:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_moveCursor>
				fillInPassword(g_password);
    135a:	8a e4       	ldi	r24, 0x4A	; 74
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fillInPassword>
				sendCommand(CHECK_PASSWORD);
    1362:	80 e5       	ldi	r24, 0x50	; 80
    1364:	0e 94 41 0b 	call	0x1682	; 0x1682 <sendCommand>
				SendPassword(g_password);
    1368:	8a e4       	ldi	r24, 0x4A	; 74
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	0e 94 15 0b 	call	0x162a	; 0x162a <SendPassword>
				if (recieveCommand()==MATCH)
    1370:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <recieveCommand>
    1374:	80 31       	cpi	r24, 0x10	; 16
    1376:	29 f4       	brne	.+10     	; 0x1382 <main_menu+0x3d4>
				 {


				     g_state=0;
    1378:	10 92 3f 01 	sts	0x013F, r1
				     g_flag=0;
    137c:	10 92 3e 01 	sts	0x013E, r1
    1380:	89 c0       	rjmp	.+274    	; 0x1494 <main_menu+0x4e6>
				  }
				else if( recieveCommand()==MISMATCH ){
    1382:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <recieveCommand>
    1386:	80 32       	cpi	r24, 0x20	; 32
    1388:	09 f0       	breq	.+2      	; 0x138c <main_menu+0x3de>
    138a:	84 c0       	rjmp	.+264    	; 0x1494 <main_menu+0x4e6>
			    	  LCD_clearScreen();
    138c:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
			       	  LCD_displayStringRowColumn(0,1,"password did not match");
    1390:	24 ea       	ldi	r18, 0xA4	; 164
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	a9 01       	movw	r20, r18
    139a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
					  sendCommand(WRONG_PASSWORD);
    139e:	8d ed       	ldi	r24, 0xDD	; 221
    13a0:	0e 94 41 0b 	call	0x1682	; 0x1682 <sendCommand>
			    	  g_flag=5;
    13a4:	85 e0       	ldi	r24, 0x05	; 5
    13a6:	80 93 3e 01 	sts	0x013E, r24
					  g_state=1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	80 93 3f 01 	sts	0x013F, r24
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	aa e7       	ldi	r26, 0x7A	; 122
    13b6:	b4 e4       	ldi	r27, 0x44	; 68
    13b8:	8b 87       	std	Y+11, r24	; 0x0b
    13ba:	9c 87       	std	Y+12, r25	; 0x0c
    13bc:	ad 87       	std	Y+13, r26	; 0x0d
    13be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	4a e7       	ldi	r20, 0x7A	; 122
    13ce:	53 e4       	ldi	r21, 0x43	; 67
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	8f 83       	std	Y+7, r24	; 0x07
    13da:	98 87       	std	Y+8, r25	; 0x08
    13dc:	a9 87       	std	Y+9, r26	; 0x09
    13de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e0:	6f 81       	ldd	r22, Y+7	; 0x07
    13e2:	78 85       	ldd	r23, Y+8	; 0x08
    13e4:	89 85       	ldd	r24, Y+9	; 0x09
    13e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	5f e3       	ldi	r21, 0x3F	; 63
    13f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	2c f4       	brge	.+10     	; 0x1402 <main_menu+0x454>
		__ticks = 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	3f c0       	rjmp	.+126    	; 0x1480 <main_menu+0x4d2>
	else if (__tmp > 65535)
    1402:	6f 81       	ldd	r22, Y+7	; 0x07
    1404:	78 85       	ldd	r23, Y+8	; 0x08
    1406:	89 85       	ldd	r24, Y+9	; 0x09
    1408:	9a 85       	ldd	r25, Y+10	; 0x0a
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	3f ef       	ldi	r19, 0xFF	; 255
    140e:	4f e7       	ldi	r20, 0x7F	; 127
    1410:	57 e4       	ldi	r21, 0x47	; 71
    1412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1416:	18 16       	cp	r1, r24
    1418:	4c f5       	brge	.+82     	; 0x146c <main_menu+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141a:	6b 85       	ldd	r22, Y+11	; 0x0b
    141c:	7c 85       	ldd	r23, Y+12	; 0x0c
    141e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1420:	9e 85       	ldd	r25, Y+14	; 0x0e
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e2       	ldi	r20, 0x20	; 32
    1428:	51 e4       	ldi	r21, 0x41	; 65
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	0f c0       	rjmp	.+30     	; 0x1462 <main_menu+0x4b4>
    1444:	89 e1       	ldi	r24, 0x19	; 25
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	8b 83       	std	Y+3, r24	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <main_menu+0x4a2>
    1454:	9c 83       	std	Y+4, r25	; 0x04
    1456:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	69 f7       	brne	.-38     	; 0x1444 <main_menu+0x496>
    146a:	14 c0       	rjmp	.+40     	; 0x1494 <main_menu+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146c:	6f 81       	ldd	r22, Y+7	; 0x07
    146e:	78 85       	ldd	r23, Y+8	; 0x08
    1470:	89 85       	ldd	r24, Y+9	; 0x09
    1472:	9a 85       	ldd	r25, Y+10	; 0x0a
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9e 83       	std	Y+6, r25	; 0x06
    147e:	8d 83       	std	Y+5, r24	; 0x05
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <main_menu+0x4de>
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
			    	  	  }

	}


}
    1494:	e8 96       	adiw	r28, 0x38	; 56
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <fillInPassword>:
 * returns    : Void
 * */


void fillInPassword(uint8 a_arr[])
{
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	61 97       	sbiw	r28, 0x11	; 17
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	99 8b       	std	Y+17, r25	; 0x11
    14c0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter=0;
    14c2:	1f 86       	std	Y+15, r1	; 0x0f


	do {
		g_key=KEYPAD_getPressedKey();
    14c4:	0e 94 ef 10 	call	0x21de	; 0x21de <KEYPAD_getPressedKey>
    14c8:	80 93 4f 01 	sts	0x014F, r24
		if( ( g_key != '+' && g_key != '-' && g_key != '*' && g_key != '%' && g_key != '=') || (g_key>= 0 && g_key<= 9) )
    14cc:	80 91 4f 01 	lds	r24, 0x014F
    14d0:	8b 32       	cpi	r24, 0x2B	; 43
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <fillInPassword+0x4e>
    14d4:	80 91 4f 01 	lds	r24, 0x014F
    14d8:	8d 32       	cpi	r24, 0x2D	; 45
    14da:	61 f0       	breq	.+24     	; 0x14f4 <fillInPassword+0x4e>
    14dc:	80 91 4f 01 	lds	r24, 0x014F
    14e0:	8a 32       	cpi	r24, 0x2A	; 42
    14e2:	41 f0       	breq	.+16     	; 0x14f4 <fillInPassword+0x4e>
    14e4:	80 91 4f 01 	lds	r24, 0x014F
    14e8:	85 32       	cpi	r24, 0x25	; 37
    14ea:	21 f0       	breq	.+8      	; 0x14f4 <fillInPassword+0x4e>
    14ec:	80 91 4f 01 	lds	r24, 0x014F
    14f0:	8d 33       	cpi	r24, 0x3D	; 61
    14f2:	21 f4       	brne	.+8      	; 0x14fc <fillInPassword+0x56>
    14f4:	80 91 4f 01 	lds	r24, 0x014F
    14f8:	8a 30       	cpi	r24, 0x0A	; 10
    14fa:	a8 f4       	brcc	.+42     	; 0x1526 <fillInPassword+0x80>
		{
			if(counter < PASSWORD_ARRAY_SIZE)
    14fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fe:	85 30       	cpi	r24, 0x05	; 5
    1500:	90 f4       	brcc	.+36     	; 0x1526 <fillInPassword+0x80>
			{
				a_arr[counter]=KEYPAD_getPressedKey();
    1502:	8f 85       	ldd	r24, Y+15	; 0x0f
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	88 89       	ldd	r24, Y+16	; 0x10
    150a:	99 89       	ldd	r25, Y+17	; 0x11
    150c:	8c 01       	movw	r16, r24
    150e:	02 0f       	add	r16, r18
    1510:	13 1f       	adc	r17, r19
    1512:	0e 94 ef 10 	call	0x21de	; 0x21de <KEYPAD_getPressedKey>
    1516:	f8 01       	movw	r30, r16
    1518:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    151a:	8a e2       	ldi	r24, 0x2A	; 42
    151c:	0e 94 05 14 	call	0x280a	; 0x280a <LCD_displayCharacter>
				counter++;
    1520:	8f 85       	ldd	r24, Y+15	; 0x0f
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	8f 87       	std	Y+15, r24	; 0x0f
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e8       	ldi	r25, 0x80	; 128
    152a:	ab eb       	ldi	r26, 0xBB	; 187
    152c:	b4 e4       	ldi	r27, 0x44	; 68
    152e:	8b 87       	std	Y+11, r24	; 0x0b
    1530:	9c 87       	std	Y+12, r25	; 0x0c
    1532:	ad 87       	std	Y+13, r26	; 0x0d
    1534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	6b 85       	ldd	r22, Y+11	; 0x0b
    1538:	7c 85       	ldd	r23, Y+12	; 0x0c
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4a e7       	ldi	r20, 0x7A	; 122
    1544:	53 e4       	ldi	r21, 0x43	; 67
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	8f 83       	std	Y+7, r24	; 0x07
    1550:	98 87       	std	Y+8, r25	; 0x08
    1552:	a9 87       	std	Y+9, r26	; 0x09
    1554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1556:	6f 81       	ldd	r22, Y+7	; 0x07
    1558:	78 85       	ldd	r23, Y+8	; 0x08
    155a:	89 85       	ldd	r24, Y+9	; 0x09
    155c:	9a 85       	ldd	r25, Y+10	; 0x0a
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	5f e3       	ldi	r21, 0x3F	; 63
    1566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156a:	88 23       	and	r24, r24
    156c:	2c f4       	brge	.+10     	; 0x1578 <fillInPassword+0xd2>
		__ticks = 1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
    1576:	3f c0       	rjmp	.+126    	; 0x15f6 <fillInPassword+0x150>
	else if (__tmp > 65535)
    1578:	6f 81       	ldd	r22, Y+7	; 0x07
    157a:	78 85       	ldd	r23, Y+8	; 0x08
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	57 e4       	ldi	r21, 0x47	; 71
    1588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158c:	18 16       	cp	r1, r24
    158e:	4c f5       	brge	.+82     	; 0x15e2 <fillInPassword+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	6b 85       	ldd	r22, Y+11	; 0x0b
    1592:	7c 85       	ldd	r23, Y+12	; 0x0c
    1594:	8d 85       	ldd	r24, Y+13	; 0x0d
    1596:	9e 85       	ldd	r25, Y+14	; 0x0e
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <fillInPassword+0x132>
    15ba:	89 e1       	ldi	r24, 0x19	; 25
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <fillInPassword+0x120>
    15ca:	9c 83       	std	Y+4, r25	; 0x04
    15cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f7       	brne	.-38     	; 0x15ba <fillInPassword+0x114>
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <fillInPassword+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	6f 81       	ldd	r22, Y+7	; 0x07
    15e4:	78 85       	ldd	r23, Y+8	; 0x08
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	8d 83       	std	Y+5, r24	; 0x05
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <fillInPassword+0x15c>
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01

			}
		}
		_delay_ms(1500);
	} while((g_key != '=') ); /*15 is ASCII FOR '='*/
    160a:	80 91 4f 01 	lds	r24, 0x014F
    160e:	8d 33       	cpi	r24, 0x3D	; 61
    1610:	09 f0       	breq	.+2      	; 0x1614 <fillInPassword+0x16e>
    1612:	58 cf       	rjmp	.-336    	; 0x14c4 <fillInPassword+0x1e>

}
    1614:	61 96       	adiw	r28, 0x11	; 17
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <SendPassword>:
 * Arguments   : Array of password to send
 *
 * Returns     : Void */

void SendPassword(uint8 a_arr[])
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <SendPassword+0x6>
    1630:	0f 92       	push	r0
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	9b 83       	std	Y+3, r25	; 0x03
    1638:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(MICRO_IS_READY);
    163a:	8f ef       	ldi	r24, 0xFF	; 255
    163c:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
	while(UART_recieveByte() != MICRO_IS_READY){};
    1640:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    1644:	8f 3f       	cpi	r24, 0xFF	; 255
    1646:	e1 f7       	brne	.-8      	; 0x1640 <SendPassword+0x16>

	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++)
    1648:	19 82       	std	Y+1, r1	; 0x01
    164a:	0e c0       	rjmp	.+28     	; 0x1668 <SendPassword+0x3e>
	{
		UART_sendByte(a_arr[i]);
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	9b 81       	ldd	r25, Y+3	; 0x03
    1656:	fc 01       	movw	r30, r24
    1658:	e2 0f       	add	r30, r18
    165a:	f3 1f       	adc	r31, r19
    165c:	80 81       	ld	r24, Z
    165e:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
void SendPassword(uint8 a_arr[])
{
	UART_sendByte(MICRO_IS_READY);
	while(UART_recieveByte() != MICRO_IS_READY){};

	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	8f 5f       	subi	r24, 0xFF	; 255
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	85 30       	cpi	r24, 0x05	; 5
    166c:	78 f3       	brcs	.-34     	; 0x164c <SendPassword+0x22>
	{
		UART_sendByte(a_arr[i]);
	}
	while(UART_recieveByte() != MICRO_IS_DONE){};
    166e:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    1672:	82 30       	cpi	r24, 0x02	; 2
    1674:	e1 f7       	brne	.-8      	; 0x166e <SendPassword+0x44>
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <sendCommand>:
 * Arguments  : the command to be sent
 *
 * Returns    : Void*/

void sendCommand(uint8 command)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	0f 92       	push	r0
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01


	UART_sendByte(MICRO_IS_READY);
    168e:	8f ef       	ldi	r24, 0xFF	; 255
    1690:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
	while(UART_recieveByte() != MICRO_IS_READY){};
    1694:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    1698:	8f 3f       	cpi	r24, 0xFF	; 255
    169a:	e1 f7       	brne	.-8      	; 0x1694 <sendCommand+0x12>
	UART_sendByte(command);
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
	while(UART_recieveByte() != MICRO_IS_DONE){};
    16a2:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	e1 f7       	brne	.-8      	; 0x16a2 <sendCommand+0x20>

}
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <recieveCommand>:
 * Arguments  : the command to be sent
 *
 * Returns    : Void*/

uint8 recieveCommand(void)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != MICRO_IS_READY){};
    16ba:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    16be:	8f 3f       	cpi	r24, 0xFF	; 255
    16c0:	e1 f7       	brne	.-8      	; 0x16ba <recieveCommand+0x8>
	UART_sendByte(MICRO_IS_READY);
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
	command=UART_recieveByte();
    16c8:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    16cc:	80 93 42 01 	sts	0x0142, r24
	UART_sendByte(MICRO_IS_DONE);
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
	return command;
    16d6:	80 91 42 01 	lds	r24, 0x0142
}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <ALERTscreen>:
 * Arguments  : None
 *
 * Returns    : Void */

void ALERTscreen(void)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	2e 97       	sbiw	r28, 0x0e	; 14
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    16f4:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
    LCD_displayStringRowColumn(0,1,"ALERT!!!");
    16f8:	2c ef       	ldi	r18, 0xFC	; 252
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	a9 01       	movw	r20, r18
    1702:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e6       	ldi	r25, 0x60	; 96
    170a:	aa e6       	ldi	r26, 0x6A	; 106
    170c:	b7 e4       	ldi	r27, 0x47	; 71
    170e:	8b 87       	std	Y+11, r24	; 0x0b
    1710:	9c 87       	std	Y+12, r25	; 0x0c
    1712:	ad 87       	std	Y+13, r26	; 0x0d
    1714:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1716:	6b 85       	ldd	r22, Y+11	; 0x0b
    1718:	7c 85       	ldd	r23, Y+12	; 0x0c
    171a:	8d 85       	ldd	r24, Y+13	; 0x0d
    171c:	9e 85       	ldd	r25, Y+14	; 0x0e
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	4a e7       	ldi	r20, 0x7A	; 122
    1724:	53 e4       	ldi	r21, 0x43	; 67
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	8f 83       	std	Y+7, r24	; 0x07
    1730:	98 87       	std	Y+8, r25	; 0x08
    1732:	a9 87       	std	Y+9, r26	; 0x09
    1734:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1736:	6f 81       	ldd	r22, Y+7	; 0x07
    1738:	78 85       	ldd	r23, Y+8	; 0x08
    173a:	89 85       	ldd	r24, Y+9	; 0x09
    173c:	9a 85       	ldd	r25, Y+10	; 0x0a
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	2c f4       	brge	.+10     	; 0x1758 <ALERTscreen+0x78>
		__ticks = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
    1756:	3f c0       	rjmp	.+126    	; 0x17d6 <ALERTscreen+0xf6>
	else if (__tmp > 65535)
    1758:	6f 81       	ldd	r22, Y+7	; 0x07
    175a:	78 85       	ldd	r23, Y+8	; 0x08
    175c:	89 85       	ldd	r24, Y+9	; 0x09
    175e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	3f ef       	ldi	r19, 0xFF	; 255
    1764:	4f e7       	ldi	r20, 0x7F	; 127
    1766:	57 e4       	ldi	r21, 0x47	; 71
    1768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    176c:	18 16       	cp	r1, r24
    176e:	4c f5       	brge	.+82     	; 0x17c2 <ALERTscreen+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1770:	6b 85       	ldd	r22, Y+11	; 0x0b
    1772:	7c 85       	ldd	r23, Y+12	; 0x0c
    1774:	8d 85       	ldd	r24, Y+13	; 0x0d
    1776:	9e 85       	ldd	r25, Y+14	; 0x0e
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e2       	ldi	r20, 0x20	; 32
    177e:	51 e4       	ldi	r21, 0x41	; 65
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9e 83       	std	Y+6, r25	; 0x06
    1796:	8d 83       	std	Y+5, r24	; 0x05
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <ALERTscreen+0xd8>
    179a:	89 e1       	ldi	r24, 0x19	; 25
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <ALERTscreen+0xc6>
    17aa:	9c 83       	std	Y+4, r25	; 0x04
    17ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	69 f7       	brne	.-38     	; 0x179a <ALERTscreen+0xba>
    17c0:	14 c0       	rjmp	.+40     	; 0x17ea <ALERTscreen+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c2:	6f 81       	ldd	r22, Y+7	; 0x07
    17c4:	78 85       	ldd	r23, Y+8	; 0x08
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <ALERTscreen+0x102>
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(60000);
		g_wrong=0;
    17ea:	10 92 40 01 	sts	0x0140, r1
		g_state=1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 93 3f 01 	sts	0x013F, r24

}
    17f4:	2e 96       	adiw	r28, 0x0e	; 14
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <doorIsOpeningCloseingScreen>:
 * Arguments  : None
 *
 * Returns    : Void */

void doorIsOpeningCloseingScreen(void)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	aa 97       	sbiw	r28, 0x2a	; 42
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    181a:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>


	LCD_displayStringRowColumn(0,1,"DOOR IS UNLOCKING..");
    181e:	25 e0       	ldi	r18, 0x05	; 5
    1820:	31 e0       	ldi	r19, 0x01	; 1
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	a9 01       	movw	r20, r18
    1828:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e6       	ldi	r25, 0x60	; 96
    1830:	aa e6       	ldi	r26, 0x6A	; 106
    1832:	b6 e4       	ldi	r27, 0x46	; 70
    1834:	8f a3       	std	Y+39, r24	; 0x27
    1836:	98 a7       	std	Y+40, r25	; 0x28
    1838:	a9 a7       	std	Y+41, r26	; 0x29
    183a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183c:	6f a1       	ldd	r22, Y+39	; 0x27
    183e:	78 a5       	ldd	r23, Y+40	; 0x28
    1840:	89 a5       	ldd	r24, Y+41	; 0x29
    1842:	9a a5       	ldd	r25, Y+42	; 0x2a
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a e7       	ldi	r20, 0x7A	; 122
    184a:	53 e4       	ldi	r21, 0x43	; 67
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8b a3       	std	Y+35, r24	; 0x23
    1856:	9c a3       	std	Y+36, r25	; 0x24
    1858:	ad a3       	std	Y+37, r26	; 0x25
    185a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    185c:	6b a1       	ldd	r22, Y+35	; 0x23
    185e:	7c a1       	ldd	r23, Y+36	; 0x24
    1860:	8d a1       	ldd	r24, Y+37	; 0x25
    1862:	9e a1       	ldd	r25, Y+38	; 0x26
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <doorIsOpeningCloseingScreen+0x78>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9a a3       	std	Y+34, r25	; 0x22
    187a:	89 a3       	std	Y+33, r24	; 0x21
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <doorIsOpeningCloseingScreen+0xf6>
	else if (__tmp > 65535)
    187e:	6b a1       	ldd	r22, Y+35	; 0x23
    1880:	7c a1       	ldd	r23, Y+36	; 0x24
    1882:	8d a1       	ldd	r24, Y+37	; 0x25
    1884:	9e a1       	ldd	r25, Y+38	; 0x26
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	4c f5       	brge	.+82     	; 0x18e8 <doorIsOpeningCloseingScreen+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	6f a1       	ldd	r22, Y+39	; 0x27
    1898:	78 a5       	ldd	r23, Y+40	; 0x28
    189a:	89 a5       	ldd	r24, Y+41	; 0x29
    189c:	9a a5       	ldd	r25, Y+42	; 0x2a
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e2       	ldi	r20, 0x20	; 32
    18a4:	51 e4       	ldi	r21, 0x41	; 65
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9a a3       	std	Y+34, r25	; 0x22
    18bc:	89 a3       	std	Y+33, r24	; 0x21
    18be:	0f c0       	rjmp	.+30     	; 0x18de <doorIsOpeningCloseingScreen+0xd8>
    18c0:	89 e1       	ldi	r24, 0x19	; 25
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	98 a3       	std	Y+32, r25	; 0x20
    18c6:	8f 8f       	std	Y+31, r24	; 0x1f
    18c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ca:	98 a1       	ldd	r25, Y+32	; 0x20
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <doorIsOpeningCloseingScreen+0xc6>
    18d0:	98 a3       	std	Y+32, r25	; 0x20
    18d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	9a a3       	std	Y+34, r25	; 0x22
    18dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	89 a1       	ldd	r24, Y+33	; 0x21
    18e0:	9a a1       	ldd	r25, Y+34	; 0x22
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	69 f7       	brne	.-38     	; 0x18c0 <doorIsOpeningCloseingScreen+0xba>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <doorIsOpeningCloseingScreen+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ea:	7c a1       	ldd	r23, Y+36	; 0x24
    18ec:	8d a1       	ldd	r24, Y+37	; 0x25
    18ee:	9e a1       	ldd	r25, Y+38	; 0x26
    18f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9a a3       	std	Y+34, r25	; 0x22
    18fa:	89 a3       	std	Y+33, r24	; 0x21
    18fc:	89 a1       	ldd	r24, Y+33	; 0x21
    18fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1900:	9e 8f       	std	Y+30, r25	; 0x1e
    1902:	8d 8f       	std	Y+29, r24	; 0x1d
    1904:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1906:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <doorIsOpeningCloseingScreen+0x102>
    190c:	9e 8f       	std	Y+30, r25	; 0x1e
    190e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(15000);

		LCD_clearScreen();
    1910:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_clearScreen>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	aa ef       	ldi	r26, 0xFA	; 250
    191a:	b4 e4       	ldi	r27, 0x44	; 68
    191c:	89 8f       	std	Y+25, r24	; 0x19
    191e:	9a 8f       	std	Y+26, r25	; 0x1a
    1920:	ab 8f       	std	Y+27, r26	; 0x1b
    1922:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1924:	69 8d       	ldd	r22, Y+25	; 0x19
    1926:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1928:	8b 8d       	ldd	r24, Y+27	; 0x1b
    192a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a e7       	ldi	r20, 0x7A	; 122
    1932:	53 e4       	ldi	r21, 0x43	; 67
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	8d 8b       	std	Y+21, r24	; 0x15
    193e:	9e 8b       	std	Y+22, r25	; 0x16
    1940:	af 8b       	std	Y+23, r26	; 0x17
    1942:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1944:	6d 89       	ldd	r22, Y+21	; 0x15
    1946:	7e 89       	ldd	r23, Y+22	; 0x16
    1948:	8f 89       	ldd	r24, Y+23	; 0x17
    194a:	98 8d       	ldd	r25, Y+24	; 0x18
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1958:	88 23       	and	r24, r24
    195a:	2c f4       	brge	.+10     	; 0x1966 <doorIsOpeningCloseingScreen+0x160>
		__ticks = 1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9c 8b       	std	Y+20, r25	; 0x14
    1962:	8b 8b       	std	Y+19, r24	; 0x13
    1964:	3f c0       	rjmp	.+126    	; 0x19e4 <doorIsOpeningCloseingScreen+0x1de>
	else if (__tmp > 65535)
    1966:	6d 89       	ldd	r22, Y+21	; 0x15
    1968:	7e 89       	ldd	r23, Y+22	; 0x16
    196a:	8f 89       	ldd	r24, Y+23	; 0x17
    196c:	98 8d       	ldd	r25, Y+24	; 0x18
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	3f ef       	ldi	r19, 0xFF	; 255
    1972:	4f e7       	ldi	r20, 0x7F	; 127
    1974:	57 e4       	ldi	r21, 0x47	; 71
    1976:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    197a:	18 16       	cp	r1, r24
    197c:	4c f5       	brge	.+82     	; 0x19d0 <doorIsOpeningCloseingScreen+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197e:	69 8d       	ldd	r22, Y+25	; 0x19
    1980:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e2       	ldi	r20, 0x20	; 32
    198c:	51 e4       	ldi	r21, 0x41	; 65
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9c 8b       	std	Y+20, r25	; 0x14
    19a4:	8b 8b       	std	Y+19, r24	; 0x13
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <doorIsOpeningCloseingScreen+0x1c0>
    19a8:	89 e1       	ldi	r24, 0x19	; 25
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9a 8b       	std	Y+18, r25	; 0x12
    19ae:	89 8b       	std	Y+17, r24	; 0x11
    19b0:	89 89       	ldd	r24, Y+17	; 0x11
    19b2:	9a 89       	ldd	r25, Y+18	; 0x12
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <doorIsOpeningCloseingScreen+0x1ae>
    19b8:	9a 8b       	std	Y+18, r25	; 0x12
    19ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19bc:	8b 89       	ldd	r24, Y+19	; 0x13
    19be:	9c 89       	ldd	r25, Y+20	; 0x14
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c6:	8b 89       	ldd	r24, Y+19	; 0x13
    19c8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	69 f7       	brne	.-38     	; 0x19a8 <doorIsOpeningCloseingScreen+0x1a2>
    19ce:	14 c0       	rjmp	.+40     	; 0x19f8 <doorIsOpeningCloseingScreen+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d0:	6d 89       	ldd	r22, Y+21	; 0x15
    19d2:	7e 89       	ldd	r23, Y+22	; 0x16
    19d4:	8f 89       	ldd	r24, Y+23	; 0x17
    19d6:	98 8d       	ldd	r25, Y+24	; 0x18
    19d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9c 8b       	std	Y+20, r25	; 0x14
    19e2:	8b 8b       	std	Y+19, r24	; 0x13
    19e4:	8b 89       	ldd	r24, Y+19	; 0x13
    19e6:	9c 89       	ldd	r25, Y+20	; 0x14
    19e8:	98 8b       	std	Y+16, r25	; 0x10
    19ea:	8f 87       	std	Y+15, r24	; 0x0f
    19ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ee:	98 89       	ldd	r25, Y+16	; 0x10
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <doorIsOpeningCloseingScreen+0x1ea>
    19f4:	98 8b       	std	Y+16, r25	; 0x10
    19f6:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(2000);

		LCD_displayStringRowColumn(0,1,"DOOR IS LOCKING..");
    19f8:	29 e1       	ldi	r18, 0x19	; 25
    19fa:	31 e0       	ldi	r19, 0x01	; 1
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	a9 01       	movw	r20, r18
    1a02:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_displayStringRowColumn>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e6       	ldi	r25, 0x60	; 96
    1a0a:	aa e6       	ldi	r26, 0x6A	; 106
    1a0c:	b6 e4       	ldi	r27, 0x46	; 70
    1a0e:	8b 87       	std	Y+11, r24	; 0x0b
    1a10:	9c 87       	std	Y+12, r25	; 0x0c
    1a12:	ad 87       	std	Y+13, r26	; 0x0d
    1a14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	4a e7       	ldi	r20, 0x7A	; 122
    1a24:	53 e4       	ldi	r21, 0x43	; 67
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	8f 83       	std	Y+7, r24	; 0x07
    1a30:	98 87       	std	Y+8, r25	; 0x08
    1a32:	a9 87       	std	Y+9, r26	; 0x09
    1a34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	5f e3       	ldi	r21, 0x3F	; 63
    1a46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4a:	88 23       	and	r24, r24
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <doorIsOpeningCloseingScreen+0x252>
		__ticks = 1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	3f c0       	rjmp	.+126    	; 0x1ad6 <doorIsOpeningCloseingScreen+0x2d0>
	else if (__tmp > 65535)
    1a58:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5a:	78 85       	ldd	r23, Y+8	; 0x08
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	3f ef       	ldi	r19, 0xFF	; 255
    1a64:	4f e7       	ldi	r20, 0x7F	; 127
    1a66:	57 e4       	ldi	r21, 0x47	; 71
    1a68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6c:	18 16       	cp	r1, r24
    1a6e:	4c f5       	brge	.+82     	; 0x1ac2 <doorIsOpeningCloseingScreen+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e2       	ldi	r20, 0x20	; 32
    1a7e:	51 e4       	ldi	r21, 0x41	; 65
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	bc 01       	movw	r22, r24
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <doorIsOpeningCloseingScreen+0x2b2>
    1a9a:	89 e1       	ldi	r24, 0x19	; 25
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <doorIsOpeningCloseingScreen+0x2a0>
    1aaa:	9c 83       	std	Y+4, r25	; 0x04
    1aac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	69 f7       	brne	.-38     	; 0x1a9a <doorIsOpeningCloseingScreen+0x294>
    1ac0:	14 c0       	rjmp	.+40     	; 0x1aea <doorIsOpeningCloseingScreen+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9e 83       	std	Y+6, r25	; 0x06
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <doorIsOpeningCloseingScreen+0x2dc>
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15000);
		g_state=1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	80 93 3f 01 	sts	0x013F, r24

}
    1af0:	aa 96       	adiw	r28, 0x2a	; 42
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <g_tickCounterMotor>:
 * Arguments  : None
 *
 * Returns    : Void */

void g_tickCounterMotor(void)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1b0a:	80 91 41 01 	lds	r24, 0x0141
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	80 93 41 01 	sts	0x0141, r24

	if(g_tick==TIMER_TICKS_30SEC)
    1b14:	80 91 41 01 	lds	r24, 0x0141
    1b18:	88 37       	cpi	r24, 0x78	; 120
    1b1a:	11 f4       	brne	.+4      	; 0x1b20 <g_tickCounterMotor+0x1e>
	{

		g_tick=0;
    1b1c:	10 92 41 01 	sts	0x0141, r1
	}
}
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <g_tickCounterAlarm>:
 * Arguments  : None
 *
 * Returns    : Void */

void g_tickCounterAlarm(void)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1b2e:	80 91 41 01 	lds	r24, 0x0141
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	80 93 41 01 	sts	0x0141, r24
	if(g_tick == TIMER_TICKS_1MINUTE_STOP)
    1b38:	80 91 41 01 	lds	r24, 0x0141
    1b3c:	81 3f       	cpi	r24, 0xF1	; 241
    1b3e:	11 f4       	brne	.+4      	; 0x1b44 <g_tickCounterAlarm+0x1e>
	{

		g_tick=0;
    1b40:	10 92 41 01 	sts	0x0141, r1

	}
}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <ifPassSaved>:

void ifPassSaved(void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	 * IF YES_SAVED COMMAD:
	 *                    GO TO STATE 1 FOR THE MAIN FUNCTION
	 * IF NO_SAVED_PASSWORD:
	 *                     GO TO STATE 0 TO ENTER A NEW PASSWORD
	 */
	sendCommand(CHECK_IF_SAVED);
    1b52:	80 e7       	ldi	r24, 0x70	; 112
    1b54:	0e 94 41 0b 	call	0x1682	; 0x1682 <sendCommand>
	switch (recieveCommand())
    1b58:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <recieveCommand>
		g_state=0;
	}



}
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <GPIO_setupPinDirection+0x6>
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <GPIO_setupPinDirection+0x8>
    1b6a:	0f 92       	push	r0
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	6a 83       	std	Y+2, r22	; 0x02
    1b74:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	88 30       	cpi	r24, 0x08	; 8
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <GPIO_setupPinDirection+0x1c>
    1b7c:	d5 c0       	rjmp	.+426    	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <GPIO_setupPinDirection+0x24>
    1b84:	d1 c0       	rjmp	.+418    	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	3d 83       	std	Y+5, r19	; 0x05
    1b8e:	2c 83       	std	Y+4, r18	; 0x04
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	9d 81       	ldd	r25, Y+5	; 0x05
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <GPIO_setupPinDirection+0x3a>
    1b9a:	43 c0       	rjmp	.+134    	; 0x1c22 <GPIO_setupPinDirection+0xc0>
    1b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <GPIO_setupPinDirection+0x4e>
    1ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	71 f0       	breq	.+28     	; 0x1bca <GPIO_setupPinDirection+0x68>
    1bae:	bc c0       	rjmp	.+376    	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
    1bb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <GPIO_setupPinDirection+0x5a>
    1bba:	5f c0       	rjmp	.+190    	; 0x1c7a <GPIO_setupPinDirection+0x118>
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc0:	83 30       	cpi	r24, 0x03	; 3
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <GPIO_setupPinDirection+0x66>
    1bc6:	85 c0       	rjmp	.+266    	; 0x1cd2 <GPIO_setupPinDirection+0x170>
    1bc8:	af c0       	rjmp	.+350    	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	a1 f4       	brne	.+40     	; 0x1bf8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1bd0:	aa e3       	ldi	r26, 0x3A	; 58
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ea e3       	ldi	r30, 0x3A	; 58
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <GPIO_setupPinDirection+0x8c>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <GPIO_setupPinDirection+0x88>
    1bf2:	84 2b       	or	r24, r20
    1bf4:	8c 93       	st	X, r24
    1bf6:	98 c0       	rjmp	.+304    	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1bf8:	aa e3       	ldi	r26, 0x3A	; 58
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	ea e3       	ldi	r30, 0x3A	; 58
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	48 2f       	mov	r20, r24
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	02 2e       	mov	r0, r18
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <GPIO_setupPinDirection+0xb4>
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	0a 94       	dec	r0
    1c18:	e2 f7       	brpl	.-8      	; 0x1c12 <GPIO_setupPinDirection+0xb0>
    1c1a:	80 95       	com	r24
    1c1c:	84 23       	and	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	83 c0       	rjmp	.+262    	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	a1 f4       	brne	.+40     	; 0x1c50 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c28:	a7 e3       	ldi	r26, 0x37	; 55
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e7 e3       	ldi	r30, 0x37	; 55
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 2e       	mov	r0, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <GPIO_setupPinDirection+0xe4>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	0a 94       	dec	r0
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <GPIO_setupPinDirection+0xe0>
    1c4a:	84 2b       	or	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	6c c0       	rjmp	.+216    	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c50:	a7 e3       	ldi	r26, 0x37	; 55
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e7 e3       	ldi	r30, 0x37	; 55
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <GPIO_setupPinDirection+0x10c>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <GPIO_setupPinDirection+0x108>
    1c72:	80 95       	com	r24
    1c74:	84 23       	and	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	57 c0       	rjmp	.+174    	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	a1 f4       	brne	.+40     	; 0x1ca8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c80:	a4 e3       	ldi	r26, 0x34	; 52
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e4 e3       	ldi	r30, 0x34	; 52
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 2e       	mov	r0, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <GPIO_setupPinDirection+0x13c>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <GPIO_setupPinDirection+0x138>
    1ca2:	84 2b       	or	r24, r20
    1ca4:	8c 93       	st	X, r24
    1ca6:	40 c0       	rjmp	.+128    	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ca8:	a4 e3       	ldi	r26, 0x34	; 52
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e4 e3       	ldi	r30, 0x34	; 52
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <GPIO_setupPinDirection+0x164>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <GPIO_setupPinDirection+0x160>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	2b c0       	rjmp	.+86     	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	a1 f4       	brne	.+40     	; 0x1d00 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1cd8:	a1 e3       	ldi	r26, 0x31	; 49
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e1 e3       	ldi	r30, 0x31	; 49
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_setupPinDirection+0x194>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_setupPinDirection+0x190>
    1cfa:	84 2b       	or	r24, r20
    1cfc:	8c 93       	st	X, r24
    1cfe:	14 c0       	rjmp	.+40     	; 0x1d28 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d00:	a1 e3       	ldi	r26, 0x31	; 49
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e1 e3       	ldi	r30, 0x31	; 49
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <GPIO_setupPinDirection+0x1bc>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <GPIO_setupPinDirection+0x1b8>
    1d22:	80 95       	com	r24
    1d24:	84 23       	and	r24, r20
    1d26:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <GPIO_writePin+0x6>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <GPIO_writePin+0x8>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	6a 83       	std	Y+2, r22	; 0x02
    1d4a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	88 30       	cpi	r24, 0x08	; 8
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <GPIO_writePin+0x1c>
    1d52:	d5 c0       	rjmp	.+426    	; 0x1efe <GPIO_writePin+0x1c6>
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <GPIO_writePin+0x24>
    1d5a:	d1 c0       	rjmp	.+418    	; 0x1efe <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	3d 83       	std	Y+5, r19	; 0x05
    1d64:	2c 83       	std	Y+4, r18	; 0x04
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <GPIO_writePin+0x3a>
    1d70:	43 c0       	rjmp	.+134    	; 0x1df8 <GPIO_writePin+0xc0>
    1d72:	2c 81       	ldd	r18, Y+4	; 0x04
    1d74:	3d 81       	ldd	r19, Y+5	; 0x05
    1d76:	22 30       	cpi	r18, 0x02	; 2
    1d78:	31 05       	cpc	r19, r1
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <GPIO_writePin+0x4e>
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	71 f0       	breq	.+28     	; 0x1da0 <GPIO_writePin+0x68>
    1d84:	bc c0       	rjmp	.+376    	; 0x1efe <GPIO_writePin+0x1c6>
    1d86:	2c 81       	ldd	r18, Y+4	; 0x04
    1d88:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8a:	22 30       	cpi	r18, 0x02	; 2
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <GPIO_writePin+0x5a>
    1d90:	5f c0       	rjmp	.+190    	; 0x1e50 <GPIO_writePin+0x118>
    1d92:	8c 81       	ldd	r24, Y+4	; 0x04
    1d94:	9d 81       	ldd	r25, Y+5	; 0x05
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	91 05       	cpc	r25, r1
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <GPIO_writePin+0x66>
    1d9c:	85 c0       	rjmp	.+266    	; 0x1ea8 <GPIO_writePin+0x170>
    1d9e:	af c0       	rjmp	.+350    	; 0x1efe <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	a1 f4       	brne	.+40     	; 0x1dce <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1da6:	ab e3       	ldi	r26, 0x3B	; 59
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	eb e3       	ldi	r30, 0x3B	; 59
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <GPIO_writePin+0x8c>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <GPIO_writePin+0x88>
    1dc8:	84 2b       	or	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	98 c0       	rjmp	.+304    	; 0x1efe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1dce:	ab e3       	ldi	r26, 0x3B	; 59
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	eb e3       	ldi	r30, 0x3B	; 59
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	48 2f       	mov	r20, r24
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	02 2e       	mov	r0, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <GPIO_writePin+0xb4>
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	0a 94       	dec	r0
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <GPIO_writePin+0xb0>
    1df0:	80 95       	com	r24
    1df2:	84 23       	and	r24, r20
    1df4:	8c 93       	st	X, r24
    1df6:	83 c0       	rjmp	.+262    	; 0x1efe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	a1 f4       	brne	.+40     	; 0x1e26 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1dfe:	a8 e3       	ldi	r26, 0x38	; 56
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e8 e3       	ldi	r30, 0x38	; 56
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <GPIO_writePin+0xe4>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <GPIO_writePin+0xe0>
    1e20:	84 2b       	or	r24, r20
    1e22:	8c 93       	st	X, r24
    1e24:	6c c0       	rjmp	.+216    	; 0x1efe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e26:	a8 e3       	ldi	r26, 0x38	; 56
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e8 e3       	ldi	r30, 0x38	; 56
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <GPIO_writePin+0x10c>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <GPIO_writePin+0x108>
    1e48:	80 95       	com	r24
    1e4a:	84 23       	and	r24, r20
    1e4c:	8c 93       	st	X, r24
    1e4e:	57 c0       	rjmp	.+174    	; 0x1efe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	a1 f4       	brne	.+40     	; 0x1e7e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e56:	a5 e3       	ldi	r26, 0x35	; 53
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e5 e3       	ldi	r30, 0x35	; 53
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 2e       	mov	r0, r18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <GPIO_writePin+0x13c>
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0a 94       	dec	r0
    1e76:	e2 f7       	brpl	.-8      	; 0x1e70 <GPIO_writePin+0x138>
    1e78:	84 2b       	or	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	40 c0       	rjmp	.+128    	; 0x1efe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e7e:	a5 e3       	ldi	r26, 0x35	; 53
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e5 e3       	ldi	r30, 0x35	; 53
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	48 2f       	mov	r20, r24
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <GPIO_writePin+0x164>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <GPIO_writePin+0x160>
    1ea0:	80 95       	com	r24
    1ea2:	84 23       	and	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	2b c0       	rjmp	.+86     	; 0x1efe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	a1 f4       	brne	.+40     	; 0x1ed6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1eae:	a2 e3       	ldi	r26, 0x32	; 50
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e2 e3       	ldi	r30, 0x32	; 50
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 2e       	mov	r0, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <GPIO_writePin+0x194>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <GPIO_writePin+0x190>
    1ed0:	84 2b       	or	r24, r20
    1ed2:	8c 93       	st	X, r24
    1ed4:	14 c0       	rjmp	.+40     	; 0x1efe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ed6:	a2 e3       	ldi	r26, 0x32	; 50
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e2 e3       	ldi	r30, 0x32	; 50
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <GPIO_writePin+0x1bc>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <GPIO_writePin+0x1b8>
    1ef8:	80 95       	com	r24
    1efa:	84 23       	and	r24, r20
    1efc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <GPIO_readPin+0x6>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <GPIO_readPin+0x8>
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	8a 83       	std	Y+2, r24	; 0x02
    1f1e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f20:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	88 30       	cpi	r24, 0x08	; 8
    1f26:	08 f0       	brcs	.+2      	; 0x1f2a <GPIO_readPin+0x1c>
    1f28:	84 c0       	rjmp	.+264    	; 0x2032 <GPIO_readPin+0x124>
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	84 30       	cpi	r24, 0x04	; 4
    1f2e:	08 f0       	brcs	.+2      	; 0x1f32 <GPIO_readPin+0x24>
    1f30:	80 c0       	rjmp	.+256    	; 0x2032 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	3d 83       	std	Y+5, r19	; 0x05
    1f3a:	2c 83       	std	Y+4, r18	; 0x04
    1f3c:	4c 81       	ldd	r20, Y+4	; 0x04
    1f3e:	5d 81       	ldd	r21, Y+5	; 0x05
    1f40:	41 30       	cpi	r20, 0x01	; 1
    1f42:	51 05       	cpc	r21, r1
    1f44:	79 f1       	breq	.+94     	; 0x1fa4 <GPIO_readPin+0x96>
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	34 f4       	brge	.+12     	; 0x1f5c <GPIO_readPin+0x4e>
    1f50:	2c 81       	ldd	r18, Y+4	; 0x04
    1f52:	3d 81       	ldd	r19, Y+5	; 0x05
    1f54:	21 15       	cp	r18, r1
    1f56:	31 05       	cpc	r19, r1
    1f58:	69 f0       	breq	.+26     	; 0x1f74 <GPIO_readPin+0x66>
    1f5a:	6b c0       	rjmp	.+214    	; 0x2032 <GPIO_readPin+0x124>
    1f5c:	4c 81       	ldd	r20, Y+4	; 0x04
    1f5e:	5d 81       	ldd	r21, Y+5	; 0x05
    1f60:	42 30       	cpi	r20, 0x02	; 2
    1f62:	51 05       	cpc	r21, r1
    1f64:	b9 f1       	breq	.+110    	; 0x1fd4 <GPIO_readPin+0xc6>
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6a:	83 30       	cpi	r24, 0x03	; 3
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <GPIO_readPin+0x64>
    1f70:	49 c0       	rjmp	.+146    	; 0x2004 <GPIO_readPin+0xf6>
    1f72:	5f c0       	rjmp	.+190    	; 0x2032 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1f74:	e9 e3       	ldi	r30, 0x39	; 57
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a9 01       	movw	r20, r18
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <GPIO_readPin+0x7e>
    1f88:	55 95       	asr	r21
    1f8a:	47 95       	ror	r20
    1f8c:	8a 95       	dec	r24
    1f8e:	e2 f7       	brpl	.-8      	; 0x1f88 <GPIO_readPin+0x7a>
    1f90:	ca 01       	movw	r24, r20
    1f92:	81 70       	andi	r24, 0x01	; 1
    1f94:	90 70       	andi	r25, 0x00	; 0
    1f96:	88 23       	and	r24, r24
    1f98:	19 f0       	breq	.+6      	; 0x1fa0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	49 c0       	rjmp	.+146    	; 0x2032 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fa0:	19 82       	std	Y+1, r1	; 0x01
    1fa2:	47 c0       	rjmp	.+142    	; 0x2032 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1fa4:	e6 e3       	ldi	r30, 0x36	; 54
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a9 01       	movw	r20, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <GPIO_readPin+0xae>
    1fb8:	55 95       	asr	r21
    1fba:	47 95       	ror	r20
    1fbc:	8a 95       	dec	r24
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <GPIO_readPin+0xaa>
    1fc0:	ca 01       	movw	r24, r20
    1fc2:	81 70       	andi	r24, 0x01	; 1
    1fc4:	90 70       	andi	r25, 0x00	; 0
    1fc6:	88 23       	and	r24, r24
    1fc8:	19 f0       	breq	.+6      	; 0x1fd0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	31 c0       	rjmp	.+98     	; 0x2032 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fd0:	19 82       	std	Y+1, r1	; 0x01
    1fd2:	2f c0       	rjmp	.+94     	; 0x2032 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1fd4:	e3 e3       	ldi	r30, 0x33	; 51
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a9 01       	movw	r20, r18
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <GPIO_readPin+0xde>
    1fe8:	55 95       	asr	r21
    1fea:	47 95       	ror	r20
    1fec:	8a 95       	dec	r24
    1fee:	e2 f7       	brpl	.-8      	; 0x1fe8 <GPIO_readPin+0xda>
    1ff0:	ca 01       	movw	r24, r20
    1ff2:	81 70       	andi	r24, 0x01	; 1
    1ff4:	90 70       	andi	r25, 0x00	; 0
    1ff6:	88 23       	and	r24, r24
    1ff8:	19 f0       	breq	.+6      	; 0x2000 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	19 c0       	rjmp	.+50     	; 0x2032 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2000:	19 82       	std	Y+1, r1	; 0x01
    2002:	17 c0       	rjmp	.+46     	; 0x2032 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2004:	e0 e3       	ldi	r30, 0x30	; 48
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	88 2f       	mov	r24, r24
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a9 01       	movw	r20, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <GPIO_readPin+0x10e>
    2018:	55 95       	asr	r21
    201a:	47 95       	ror	r20
    201c:	8a 95       	dec	r24
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <GPIO_readPin+0x10a>
    2020:	ca 01       	movw	r24, r20
    2022:	81 70       	andi	r24, 0x01	; 1
    2024:	90 70       	andi	r25, 0x00	; 0
    2026:	88 23       	and	r24, r24
    2028:	19 f0       	breq	.+6      	; 0x2030 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2030:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2032:	89 81       	ldd	r24, Y+1	; 0x01
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	00 d0       	rcall	.+0      	; 0x204a <GPIO_setupPortDirection+0x6>
    204a:	00 d0       	rcall	.+0      	; 0x204c <GPIO_setupPortDirection+0x8>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	84 30       	cpi	r24, 0x04	; 4
    2058:	90 f5       	brcc	.+100    	; 0x20be <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	3c 83       	std	Y+4, r19	; 0x04
    2062:	2b 83       	std	Y+3, r18	; 0x03
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	91 05       	cpc	r25, r1
    206c:	d1 f0       	breq	.+52     	; 0x20a2 <GPIO_setupPortDirection+0x5e>
    206e:	2b 81       	ldd	r18, Y+3	; 0x03
    2070:	3c 81       	ldd	r19, Y+4	; 0x04
    2072:	22 30       	cpi	r18, 0x02	; 2
    2074:	31 05       	cpc	r19, r1
    2076:	2c f4       	brge	.+10     	; 0x2082 <GPIO_setupPortDirection+0x3e>
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	61 f0       	breq	.+24     	; 0x2098 <GPIO_setupPortDirection+0x54>
    2080:	1e c0       	rjmp	.+60     	; 0x20be <GPIO_setupPortDirection+0x7a>
    2082:	2b 81       	ldd	r18, Y+3	; 0x03
    2084:	3c 81       	ldd	r19, Y+4	; 0x04
    2086:	22 30       	cpi	r18, 0x02	; 2
    2088:	31 05       	cpc	r19, r1
    208a:	81 f0       	breq	.+32     	; 0x20ac <GPIO_setupPortDirection+0x68>
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	83 30       	cpi	r24, 0x03	; 3
    2092:	91 05       	cpc	r25, r1
    2094:	81 f0       	breq	.+32     	; 0x20b6 <GPIO_setupPortDirection+0x72>
    2096:	13 c0       	rjmp	.+38     	; 0x20be <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2098:	ea e3       	ldi	r30, 0x3A	; 58
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	80 83       	st	Z, r24
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    20a2:	e7 e3       	ldi	r30, 0x37	; 55
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	80 83       	st	Z, r24
    20aa:	09 c0       	rjmp	.+18     	; 0x20be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    20ac:	e4 e3       	ldi	r30, 0x34	; 52
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	80 83       	st	Z, r24
    20b4:	04 c0       	rjmp	.+8      	; 0x20be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    20b6:	e1 e3       	ldi	r30, 0x31	; 49
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <GPIO_writePort+0x6>
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <GPIO_writePort+0x8>
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	84 30       	cpi	r24, 0x04	; 4
    20e0:	90 f5       	brcc	.+100    	; 0x2146 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	3c 83       	std	Y+4, r19	; 0x04
    20ea:	2b 83       	std	Y+3, r18	; 0x03
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	91 05       	cpc	r25, r1
    20f4:	d1 f0       	breq	.+52     	; 0x212a <GPIO_writePort+0x5e>
    20f6:	2b 81       	ldd	r18, Y+3	; 0x03
    20f8:	3c 81       	ldd	r19, Y+4	; 0x04
    20fa:	22 30       	cpi	r18, 0x02	; 2
    20fc:	31 05       	cpc	r19, r1
    20fe:	2c f4       	brge	.+10     	; 0x210a <GPIO_writePort+0x3e>
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	61 f0       	breq	.+24     	; 0x2120 <GPIO_writePort+0x54>
    2108:	1e c0       	rjmp	.+60     	; 0x2146 <GPIO_writePort+0x7a>
    210a:	2b 81       	ldd	r18, Y+3	; 0x03
    210c:	3c 81       	ldd	r19, Y+4	; 0x04
    210e:	22 30       	cpi	r18, 0x02	; 2
    2110:	31 05       	cpc	r19, r1
    2112:	81 f0       	breq	.+32     	; 0x2134 <GPIO_writePort+0x68>
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	91 05       	cpc	r25, r1
    211c:	81 f0       	breq	.+32     	; 0x213e <GPIO_writePort+0x72>
    211e:	13 c0       	rjmp	.+38     	; 0x2146 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2120:	eb e3       	ldi	r30, 0x3B	; 59
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	80 83       	st	Z, r24
    2128:	0e c0       	rjmp	.+28     	; 0x2146 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    212a:	e8 e3       	ldi	r30, 0x38	; 56
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	80 83       	st	Z, r24
    2132:	09 c0       	rjmp	.+18     	; 0x2146 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2134:	e5 e3       	ldi	r30, 0x35	; 53
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	80 83       	st	Z, r24
    213c:	04 c0       	rjmp	.+8      	; 0x2146 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    213e:	e2 e3       	ldi	r30, 0x32	; 50
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	80 83       	st	Z, r24
			break;
		}
	}
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <GPIO_readPort+0x6>
    215a:	00 d0       	rcall	.+0      	; 0x215c <GPIO_readPort+0x8>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2162:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	84 30       	cpi	r24, 0x04	; 4
    2168:	90 f5       	brcc	.+100    	; 0x21ce <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	3c 83       	std	Y+4, r19	; 0x04
    2172:	2b 83       	std	Y+3, r18	; 0x03
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	91 05       	cpc	r25, r1
    217c:	d1 f0       	breq	.+52     	; 0x21b2 <GPIO_readPort+0x5e>
    217e:	2b 81       	ldd	r18, Y+3	; 0x03
    2180:	3c 81       	ldd	r19, Y+4	; 0x04
    2182:	22 30       	cpi	r18, 0x02	; 2
    2184:	31 05       	cpc	r19, r1
    2186:	2c f4       	brge	.+10     	; 0x2192 <GPIO_readPort+0x3e>
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	61 f0       	breq	.+24     	; 0x21a8 <GPIO_readPort+0x54>
    2190:	1e c0       	rjmp	.+60     	; 0x21ce <GPIO_readPort+0x7a>
    2192:	2b 81       	ldd	r18, Y+3	; 0x03
    2194:	3c 81       	ldd	r19, Y+4	; 0x04
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	81 f0       	breq	.+32     	; 0x21bc <GPIO_readPort+0x68>
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	9c 81       	ldd	r25, Y+4	; 0x04
    21a0:	83 30       	cpi	r24, 0x03	; 3
    21a2:	91 05       	cpc	r25, r1
    21a4:	81 f0       	breq	.+32     	; 0x21c6 <GPIO_readPort+0x72>
    21a6:	13 c0       	rjmp	.+38     	; 0x21ce <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    21a8:	e9 e3       	ldi	r30, 0x39	; 57
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	0e c0       	rjmp	.+28     	; 0x21ce <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    21b2:	e6 e3       	ldi	r30, 0x36	; 54
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	09 c0       	rjmp	.+18     	; 0x21ce <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    21bc:	e3 e3       	ldi	r30, 0x33	; 51
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	04 c0       	rjmp	.+8      	; 0x21ce <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    21c6:	e0 e3       	ldi	r30, 0x30	; 48
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <KEYPAD_getPressedKey+0x6>
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;

	while(1)
	{

		for(col=0;col<N_col;col++) /* loop for columns */
    21e8:	1a 82       	std	Y+2, r1	; 0x02
    21ea:	4c c0       	rjmp	.+152    	; 0x2284 <KEYPAD_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins (pin 4,5,6,7) will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
    21ec:	ea e3       	ldi	r30, 0x3A	; 58
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	80 e1       	ldi	r24, 0x10	; 16
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <KEYPAD_getPressedKey+0x22>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	2a 95       	dec	r18
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <KEYPAD_getPressedKey+0x1e>
    2204:	80 83       	st	Z, r24
			
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    2206:	eb e3       	ldi	r30, 0x3B	; 59
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	80 e1       	ldi	r24, 0x10	; 16
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	02 2e       	mov	r0, r18
    2216:	02 c0       	rjmp	.+4      	; 0x221c <KEYPAD_getPressedKey+0x3e>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	0a 94       	dec	r0
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <KEYPAD_getPressedKey+0x3a>
    2220:	80 95       	com	r24
    2222:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    2224:	19 82       	std	Y+1, r1	; 0x01
    2226:	28 c0       	rjmp	.+80     	; 0x2278 <KEYPAD_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
    2228:	e9 e3       	ldi	r30, 0x39	; 57
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a9 01       	movw	r20, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <KEYPAD_getPressedKey+0x62>
    223c:	55 95       	asr	r21
    223e:	47 95       	ror	r20
    2240:	8a 95       	dec	r24
    2242:	e2 f7       	brpl	.-8      	; 0x223c <KEYPAD_getPressedKey+0x5e>
    2244:	ca 01       	movw	r24, r20
    2246:	81 70       	andi	r24, 0x01	; 1
    2248:	90 70       	andi	r25, 0x00	; 0
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	91 f4       	brne	.+36     	; 0x2272 <KEYPAD_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*N_col)+col+1);
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	98 2f       	mov	r25, r24
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	89 0f       	add	r24, r25
    2262:	8f 5f       	subi	r24, 0xFF	; 255
    2264:	0e 94 47 11 	call	0x228e	; 0x228e <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	84 30       	cpi	r24, 0x04	; 4
    227c:	a8 f2       	brcs	.-86     	; 0x2228 <KEYPAD_getPressedKey+0x4a>
	uint8 col,row;

	while(1)
	{

		for(col=0;col<N_col;col++) /* loop for columns */
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	8f 5f       	subi	r24, 0xFF	; 255
    2282:	8a 83       	std	Y+2, r24	; 0x02
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	84 30       	cpi	r24, 0x04	; 4
    2288:	08 f4       	brcc	.+2      	; 0x228c <KEYPAD_getPressedKey+0xae>
    228a:	b0 cf       	rjmp	.-160    	; 0x21ec <KEYPAD_getPressedKey+0xe>
    228c:	ad cf       	rjmp	.-166    	; 0x21e8 <KEYPAD_getPressedKey+0xa>

0000228e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	00 d0       	rcall	.+0      	; 0x2294 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2294:	00 d0       	rcall	.+0      	; 0x2296 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    229c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	3c 83       	std	Y+4, r19	; 0x04
    22a6:	2b 83       	std	Y+3, r18	; 0x03
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	9c 81       	ldd	r25, Y+4	; 0x04
    22ac:	88 30       	cpi	r24, 0x08	; 8
    22ae:	91 05       	cpc	r25, r1
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    22b2:	70 c0       	rjmp	.+224    	; 0x2394 <KEYPAD_4x4_adjustKeyNumber+0x106>
    22b4:	2b 81       	ldd	r18, Y+3	; 0x03
    22b6:	3c 81       	ldd	r19, Y+4	; 0x04
    22b8:	29 30       	cpi	r18, 0x09	; 9
    22ba:	31 05       	cpc	r19, r1
    22bc:	5c f5       	brge	.+86     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x86>
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	84 30       	cpi	r24, 0x04	; 4
    22c4:	91 05       	cpc	r25, r1
    22c6:	09 f4       	brne	.+2      	; 0x22ca <KEYPAD_4x4_adjustKeyNumber+0x3c>
    22c8:	59 c0       	rjmp	.+178    	; 0x237c <KEYPAD_4x4_adjustKeyNumber+0xee>
    22ca:	2b 81       	ldd	r18, Y+3	; 0x03
    22cc:	3c 81       	ldd	r19, Y+4	; 0x04
    22ce:	25 30       	cpi	r18, 0x05	; 5
    22d0:	31 05       	cpc	r19, r1
    22d2:	9c f4       	brge	.+38     	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0x6c>
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	82 30       	cpi	r24, 0x02	; 2
    22da:	91 05       	cpc	r25, r1
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    22de:	48 c0       	rjmp	.+144    	; 0x2370 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    22e0:	2b 81       	ldd	r18, Y+3	; 0x03
    22e2:	3c 81       	ldd	r19, Y+4	; 0x04
    22e4:	23 30       	cpi	r18, 0x03	; 3
    22e6:	31 05       	cpc	r19, r1
    22e8:	0c f0       	brlt	.+2      	; 0x22ec <KEYPAD_4x4_adjustKeyNumber+0x5e>
    22ea:	45 c0       	rjmp	.+138    	; 0x2376 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	91 05       	cpc	r25, r1
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    22f6:	39 c0       	rjmp	.+114    	; 0x236a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    22f8:	67 c0       	rjmp	.+206    	; 0x23c8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    22fa:	2b 81       	ldd	r18, Y+3	; 0x03
    22fc:	3c 81       	ldd	r19, Y+4	; 0x04
    22fe:	26 30       	cpi	r18, 0x06	; 6
    2300:	31 05       	cpc	r19, r1
    2302:	09 f4       	brne	.+2      	; 0x2306 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2304:	41 c0       	rjmp	.+130    	; 0x2388 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	87 30       	cpi	r24, 0x07	; 7
    230c:	91 05       	cpc	r25, r1
    230e:	0c f0       	brlt	.+2      	; 0x2312 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2310:	3e c0       	rjmp	.+124    	; 0x238e <KEYPAD_4x4_adjustKeyNumber+0x100>
    2312:	37 c0       	rjmp	.+110    	; 0x2382 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2314:	2b 81       	ldd	r18, Y+3	; 0x03
    2316:	3c 81       	ldd	r19, Y+4	; 0x04
    2318:	2c 30       	cpi	r18, 0x0C	; 12
    231a:	31 05       	cpc	r19, r1
    231c:	09 f4       	brne	.+2      	; 0x2320 <KEYPAD_4x4_adjustKeyNumber+0x92>
    231e:	46 c0       	rjmp	.+140    	; 0x23ac <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	8d 30       	cpi	r24, 0x0D	; 13
    2326:	91 05       	cpc	r25, r1
    2328:	5c f4       	brge	.+22     	; 0x2340 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    232a:	2b 81       	ldd	r18, Y+3	; 0x03
    232c:	3c 81       	ldd	r19, Y+4	; 0x04
    232e:	2a 30       	cpi	r18, 0x0A	; 10
    2330:	31 05       	cpc	r19, r1
    2332:	b1 f1       	breq	.+108    	; 0x23a0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	8b 30       	cpi	r24, 0x0B	; 11
    233a:	91 05       	cpc	r25, r1
    233c:	a4 f5       	brge	.+104    	; 0x23a6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    233e:	2d c0       	rjmp	.+90     	; 0x239a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2340:	2b 81       	ldd	r18, Y+3	; 0x03
    2342:	3c 81       	ldd	r19, Y+4	; 0x04
    2344:	2e 30       	cpi	r18, 0x0E	; 14
    2346:	31 05       	cpc	r19, r1
    2348:	b9 f1       	breq	.+110    	; 0x23b8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	8e 30       	cpi	r24, 0x0E	; 14
    2350:	91 05       	cpc	r25, r1
    2352:	7c f1       	brlt	.+94     	; 0x23b2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2354:	2b 81       	ldd	r18, Y+3	; 0x03
    2356:	3c 81       	ldd	r19, Y+4	; 0x04
    2358:	2f 30       	cpi	r18, 0x0F	; 15
    235a:	31 05       	cpc	r19, r1
    235c:	79 f1       	breq	.+94     	; 0x23bc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	80 31       	cpi	r24, 0x10	; 16
    2364:	91 05       	cpc	r25, r1
    2366:	69 f1       	breq	.+90     	; 0x23c2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2368:	2f c0       	rjmp	.+94     	; 0x23c8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    236a:	87 e0       	ldi	r24, 0x07	; 7
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	2e c0       	rjmp	.+92     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2370:	88 e0       	ldi	r24, 0x08	; 8
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	2b c0       	rjmp	.+86     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2376:	89 e0       	ldi	r24, 0x09	; 9
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	28 c0       	rjmp	.+80     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    237c:	85 e2       	ldi	r24, 0x25	; 37
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	25 c0       	rjmp	.+74     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2382:	84 e0       	ldi	r24, 0x04	; 4
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	22 c0       	rjmp	.+68     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2388:	85 e0       	ldi	r24, 0x05	; 5
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	1f c0       	rjmp	.+62     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    238e:	86 e0       	ldi	r24, 0x06	; 6
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	1c c0       	rjmp	.+56     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2394:	8a e2       	ldi	r24, 0x2A	; 42
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	19 c0       	rjmp	.+50     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	16 c0       	rjmp	.+44     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	13 c0       	rjmp	.+38     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    23a6:	83 e0       	ldi	r24, 0x03	; 3
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	10 c0       	rjmp	.+32     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    23ac:	8d e2       	ldi	r24, 0x2D	; 45
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    23b2:	8d e0       	ldi	r24, 0x0D	; 13
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	0a c0       	rjmp	.+20     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    23b8:	19 82       	std	Y+1, r1	; 0x01
    23ba:	08 c0       	rjmp	.+16     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    23bc:	8d e3       	ldi	r24, 0x3D	; 61
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	05 c0       	rjmp	.+10     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    23c2:	8b e2       	ldi	r24, 0x2B	; 43
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
} 
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	61 e0       	ldi	r22, 0x01	; 1
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	62 e0       	ldi	r22, 0x02	; 2
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2402:	82 e0       	ldi	r24, 0x02	; 2
    2404:	6f ef       	ldi	r22, 0xFF	; 255
    2406:	0e 94 22 10 	call	0x2044	; 0x2044 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    240a:	88 e3       	ldi	r24, 0x38	; 56
    240c:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2410:	8c e0       	ldi	r24, 0x0C	; 12
    2412:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_sendCommand>
}
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	e9 97       	sbiw	r28, 0x39	; 57
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_writePin>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e8       	ldi	r26, 0x80	; 128
    2452:	bf e3       	ldi	r27, 0x3F	; 63
    2454:	8d ab       	std	Y+53, r24	; 0x35
    2456:	9e ab       	std	Y+54, r25	; 0x36
    2458:	af ab       	std	Y+55, r26	; 0x37
    245a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245c:	6d a9       	ldd	r22, Y+53	; 0x35
    245e:	7e a9       	ldd	r23, Y+54	; 0x36
    2460:	8f a9       	ldd	r24, Y+55	; 0x37
    2462:	98 ad       	ldd	r25, Y+56	; 0x38
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a e7       	ldi	r20, 0x7A	; 122
    246a:	53 e4       	ldi	r21, 0x43	; 67
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	89 ab       	std	Y+49, r24	; 0x31
    2476:	9a ab       	std	Y+50, r25	; 0x32
    2478:	ab ab       	std	Y+51, r26	; 0x33
    247a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    247c:	69 a9       	ldd	r22, Y+49	; 0x31
    247e:	7a a9       	ldd	r23, Y+50	; 0x32
    2480:	8b a9       	ldd	r24, Y+51	; 0x33
    2482:	9c a9       	ldd	r25, Y+52	; 0x34
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	2c f4       	brge	.+10     	; 0x249e <LCD_sendCommand+0x7c>
		__ticks = 1;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	98 ab       	std	Y+48, r25	; 0x30
    249a:	8f a7       	std	Y+47, r24	; 0x2f
    249c:	3f c0       	rjmp	.+126    	; 0x251c <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    249e:	69 a9       	ldd	r22, Y+49	; 0x31
    24a0:	7a a9       	ldd	r23, Y+50	; 0x32
    24a2:	8b a9       	ldd	r24, Y+51	; 0x33
    24a4:	9c a9       	ldd	r25, Y+52	; 0x34
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	4c f5       	brge	.+82     	; 0x2508 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b6:	6d a9       	ldd	r22, Y+53	; 0x35
    24b8:	7e a9       	ldd	r23, Y+54	; 0x36
    24ba:	8f a9       	ldd	r24, Y+55	; 0x37
    24bc:	98 ad       	ldd	r25, Y+56	; 0x38
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	98 ab       	std	Y+48, r25	; 0x30
    24dc:	8f a7       	std	Y+47, r24	; 0x2f
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <LCD_sendCommand+0xdc>
    24e0:	89 e1       	ldi	r24, 0x19	; 25
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9e a7       	std	Y+46, r25	; 0x2e
    24e6:	8d a7       	std	Y+45, r24	; 0x2d
    24e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    24ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <LCD_sendCommand+0xca>
    24f0:	9e a7       	std	Y+46, r25	; 0x2e
    24f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f6:	98 a9       	ldd	r25, Y+48	; 0x30
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	98 ab       	std	Y+48, r25	; 0x30
    24fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2500:	98 a9       	ldd	r25, Y+48	; 0x30
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	69 f7       	brne	.-38     	; 0x24e0 <LCD_sendCommand+0xbe>
    2506:	14 c0       	rjmp	.+40     	; 0x2530 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2508:	69 a9       	ldd	r22, Y+49	; 0x31
    250a:	7a a9       	ldd	r23, Y+50	; 0x32
    250c:	8b a9       	ldd	r24, Y+51	; 0x33
    250e:	9c a9       	ldd	r25, Y+52	; 0x34
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	98 ab       	std	Y+48, r25	; 0x30
    251a:	8f a7       	std	Y+47, r24	; 0x2f
    251c:	8f a5       	ldd	r24, Y+47	; 0x2f
    251e:	98 a9       	ldd	r25, Y+48	; 0x30
    2520:	9c a7       	std	Y+44, r25	; 0x2c
    2522:	8b a7       	std	Y+43, r24	; 0x2b
    2524:	8b a5       	ldd	r24, Y+43	; 0x2b
    2526:	9c a5       	ldd	r25, Y+44	; 0x2c
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <LCD_sendCommand+0x106>
    252c:	9c a7       	std	Y+44, r25	; 0x2c
    252e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	62 e0       	ldi	r22, 0x02	; 2
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_writePin>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a0 e8       	ldi	r26, 0x80	; 128
    2540:	bf e3       	ldi	r27, 0x3F	; 63
    2542:	8f a3       	std	Y+39, r24	; 0x27
    2544:	98 a7       	std	Y+40, r25	; 0x28
    2546:	a9 a7       	std	Y+41, r26	; 0x29
    2548:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254a:	6f a1       	ldd	r22, Y+39	; 0x27
    254c:	78 a5       	ldd	r23, Y+40	; 0x28
    254e:	89 a5       	ldd	r24, Y+41	; 0x29
    2550:	9a a5       	ldd	r25, Y+42	; 0x2a
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a e7       	ldi	r20, 0x7A	; 122
    2558:	53 e4       	ldi	r21, 0x43	; 67
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	8b a3       	std	Y+35, r24	; 0x23
    2564:	9c a3       	std	Y+36, r25	; 0x24
    2566:	ad a3       	std	Y+37, r26	; 0x25
    2568:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    256a:	6b a1       	ldd	r22, Y+35	; 0x23
    256c:	7c a1       	ldd	r23, Y+36	; 0x24
    256e:	8d a1       	ldd	r24, Y+37	; 0x25
    2570:	9e a1       	ldd	r25, Y+38	; 0x26
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	2c f4       	brge	.+10     	; 0x258c <LCD_sendCommand+0x16a>
		__ticks = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	9a a3       	std	Y+34, r25	; 0x22
    2588:	89 a3       	std	Y+33, r24	; 0x21
    258a:	3f c0       	rjmp	.+126    	; 0x260a <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    258c:	6b a1       	ldd	r22, Y+35	; 0x23
    258e:	7c a1       	ldd	r23, Y+36	; 0x24
    2590:	8d a1       	ldd	r24, Y+37	; 0x25
    2592:	9e a1       	ldd	r25, Y+38	; 0x26
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	4c f5       	brge	.+82     	; 0x25f6 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	6f a1       	ldd	r22, Y+39	; 0x27
    25a6:	78 a5       	ldd	r23, Y+40	; 0x28
    25a8:	89 a5       	ldd	r24, Y+41	; 0x29
    25aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <LCD_sendCommand+0x1ca>
    25ce:	89 e1       	ldi	r24, 0x19	; 25
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	98 a3       	std	Y+32, r25	; 0x20
    25d4:	8f 8f       	std	Y+31, r24	; 0x1f
    25d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d8:	98 a1       	ldd	r25, Y+32	; 0x20
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <LCD_sendCommand+0x1b8>
    25de:	98 a3       	std	Y+32, r25	; 0x20
    25e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	89 a1       	ldd	r24, Y+33	; 0x21
    25e4:	9a a1       	ldd	r25, Y+34	; 0x22
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	9a a3       	std	Y+34, r25	; 0x22
    25ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ec:	89 a1       	ldd	r24, Y+33	; 0x21
    25ee:	9a a1       	ldd	r25, Y+34	; 0x22
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	69 f7       	brne	.-38     	; 0x25ce <LCD_sendCommand+0x1ac>
    25f4:	14 c0       	rjmp	.+40     	; 0x261e <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	6b a1       	ldd	r22, Y+35	; 0x23
    25f8:	7c a1       	ldd	r23, Y+36	; 0x24
    25fa:	8d a1       	ldd	r24, Y+37	; 0x25
    25fc:	9e a1       	ldd	r25, Y+38	; 0x26
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9a a3       	std	Y+34, r25	; 0x22
    2608:	89 a3       	std	Y+33, r24	; 0x21
    260a:	89 a1       	ldd	r24, Y+33	; 0x21
    260c:	9a a1       	ldd	r25, Y+34	; 0x22
    260e:	9e 8f       	std	Y+30, r25	; 0x1e
    2610:	8d 8f       	std	Y+29, r24	; 0x1d
    2612:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2614:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_sendCommand+0x1f4>
    261a:	9e 8f       	std	Y+30, r25	; 0x1e
    261c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    261e:	82 e0       	ldi	r24, 0x02	; 2
    2620:	69 ad       	ldd	r22, Y+57	; 0x39
    2622:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePort>
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e8       	ldi	r26, 0x80	; 128
    262c:	bf e3       	ldi	r27, 0x3F	; 63
    262e:	89 8f       	std	Y+25, r24	; 0x19
    2630:	9a 8f       	std	Y+26, r25	; 0x1a
    2632:	ab 8f       	std	Y+27, r26	; 0x1b
    2634:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2636:	69 8d       	ldd	r22, Y+25	; 0x19
    2638:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    263c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	4a e7       	ldi	r20, 0x7A	; 122
    2644:	53 e4       	ldi	r21, 0x43	; 67
    2646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	8d 8b       	std	Y+21, r24	; 0x15
    2650:	9e 8b       	std	Y+22, r25	; 0x16
    2652:	af 8b       	std	Y+23, r26	; 0x17
    2654:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2656:	6d 89       	ldd	r22, Y+21	; 0x15
    2658:	7e 89       	ldd	r23, Y+22	; 0x16
    265a:	8f 89       	ldd	r24, Y+23	; 0x17
    265c:	98 8d       	ldd	r25, Y+24	; 0x18
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e8       	ldi	r20, 0x80	; 128
    2664:	5f e3       	ldi	r21, 0x3F	; 63
    2666:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    266a:	88 23       	and	r24, r24
    266c:	2c f4       	brge	.+10     	; 0x2678 <LCD_sendCommand+0x256>
		__ticks = 1;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	9c 8b       	std	Y+20, r25	; 0x14
    2674:	8b 8b       	std	Y+19, r24	; 0x13
    2676:	3f c0       	rjmp	.+126    	; 0x26f6 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2678:	6d 89       	ldd	r22, Y+21	; 0x15
    267a:	7e 89       	ldd	r23, Y+22	; 0x16
    267c:	8f 89       	ldd	r24, Y+23	; 0x17
    267e:	98 8d       	ldd	r25, Y+24	; 0x18
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	3f ef       	ldi	r19, 0xFF	; 255
    2684:	4f e7       	ldi	r20, 0x7F	; 127
    2686:	57 e4       	ldi	r21, 0x47	; 71
    2688:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268c:	18 16       	cp	r1, r24
    268e:	4c f5       	brge	.+82     	; 0x26e2 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2690:	69 8d       	ldd	r22, Y+25	; 0x19
    2692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e2       	ldi	r20, 0x20	; 32
    269e:	51 e4       	ldi	r21, 0x41	; 65
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	bc 01       	movw	r22, r24
    26aa:	cd 01       	movw	r24, r26
    26ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	9c 8b       	std	Y+20, r25	; 0x14
    26b6:	8b 8b       	std	Y+19, r24	; 0x13
    26b8:	0f c0       	rjmp	.+30     	; 0x26d8 <LCD_sendCommand+0x2b6>
    26ba:	89 e1       	ldi	r24, 0x19	; 25
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	9a 8b       	std	Y+18, r25	; 0x12
    26c0:	89 8b       	std	Y+17, r24	; 0x11
    26c2:	89 89       	ldd	r24, Y+17	; 0x11
    26c4:	9a 89       	ldd	r25, Y+18	; 0x12
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <LCD_sendCommand+0x2a4>
    26ca:	9a 8b       	std	Y+18, r25	; 0x12
    26cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ce:	8b 89       	ldd	r24, Y+19	; 0x13
    26d0:	9c 89       	ldd	r25, Y+20	; 0x14
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	9c 8b       	std	Y+20, r25	; 0x14
    26d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d8:	8b 89       	ldd	r24, Y+19	; 0x13
    26da:	9c 89       	ldd	r25, Y+20	; 0x14
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	69 f7       	brne	.-38     	; 0x26ba <LCD_sendCommand+0x298>
    26e0:	14 c0       	rjmp	.+40     	; 0x270a <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e2:	6d 89       	ldd	r22, Y+21	; 0x15
    26e4:	7e 89       	ldd	r23, Y+22	; 0x16
    26e6:	8f 89       	ldd	r24, Y+23	; 0x17
    26e8:	98 8d       	ldd	r25, Y+24	; 0x18
    26ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9c 8b       	std	Y+20, r25	; 0x14
    26f4:	8b 8b       	std	Y+19, r24	; 0x13
    26f6:	8b 89       	ldd	r24, Y+19	; 0x13
    26f8:	9c 89       	ldd	r25, Y+20	; 0x14
    26fa:	98 8b       	std	Y+16, r25	; 0x10
    26fc:	8f 87       	std	Y+15, r24	; 0x0f
    26fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2700:	98 89       	ldd	r25, Y+16	; 0x10
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <LCD_sendCommand+0x2e0>
    2706:	98 8b       	std	Y+16, r25	; 0x10
    2708:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	62 e0       	ldi	r22, 0x02	; 2
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_writePin>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	a0 e8       	ldi	r26, 0x80	; 128
    271a:	bf e3       	ldi	r27, 0x3F	; 63
    271c:	8b 87       	std	Y+11, r24	; 0x0b
    271e:	9c 87       	std	Y+12, r25	; 0x0c
    2720:	ad 87       	std	Y+13, r26	; 0x0d
    2722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2724:	6b 85       	ldd	r22, Y+11	; 0x0b
    2726:	7c 85       	ldd	r23, Y+12	; 0x0c
    2728:	8d 85       	ldd	r24, Y+13	; 0x0d
    272a:	9e 85       	ldd	r25, Y+14	; 0x0e
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	4a e7       	ldi	r20, 0x7A	; 122
    2732:	53 e4       	ldi	r21, 0x43	; 67
    2734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	8f 83       	std	Y+7, r24	; 0x07
    273e:	98 87       	std	Y+8, r25	; 0x08
    2740:	a9 87       	std	Y+9, r26	; 0x09
    2742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2744:	6f 81       	ldd	r22, Y+7	; 0x07
    2746:	78 85       	ldd	r23, Y+8	; 0x08
    2748:	89 85       	ldd	r24, Y+9	; 0x09
    274a:	9a 85       	ldd	r25, Y+10	; 0x0a
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e8       	ldi	r20, 0x80	; 128
    2752:	5f e3       	ldi	r21, 0x3F	; 63
    2754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2758:	88 23       	and	r24, r24
    275a:	2c f4       	brge	.+10     	; 0x2766 <LCD_sendCommand+0x344>
		__ticks = 1;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	3f c0       	rjmp	.+126    	; 0x27e4 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2766:	6f 81       	ldd	r22, Y+7	; 0x07
    2768:	78 85       	ldd	r23, Y+8	; 0x08
    276a:	89 85       	ldd	r24, Y+9	; 0x09
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	3f ef       	ldi	r19, 0xFF	; 255
    2772:	4f e7       	ldi	r20, 0x7F	; 127
    2774:	57 e4       	ldi	r21, 0x47	; 71
    2776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277a:	18 16       	cp	r1, r24
    277c:	4c f5       	brge	.+82     	; 0x27d0 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2780:	7c 85       	ldd	r23, Y+12	; 0x0c
    2782:	8d 85       	ldd	r24, Y+13	; 0x0d
    2784:	9e 85       	ldd	r25, Y+14	; 0x0e
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e2       	ldi	r20, 0x20	; 32
    278c:	51 e4       	ldi	r21, 0x41	; 65
    278e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	0f c0       	rjmp	.+30     	; 0x27c6 <LCD_sendCommand+0x3a4>
    27a8:	89 e1       	ldi	r24, 0x19	; 25
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9c 83       	std	Y+4, r25	; 0x04
    27ae:	8b 83       	std	Y+3, r24	; 0x03
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <LCD_sendCommand+0x392>
    27b8:	9c 83       	std	Y+4, r25	; 0x04
    27ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	9e 81       	ldd	r25, Y+6	; 0x06
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	69 f7       	brne	.-38     	; 0x27a8 <LCD_sendCommand+0x386>
    27ce:	14 c0       	rjmp	.+40     	; 0x27f8 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d0:	6f 81       	ldd	r22, Y+7	; 0x07
    27d2:	78 85       	ldd	r23, Y+8	; 0x08
    27d4:	89 85       	ldd	r24, Y+9	; 0x09
    27d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	8d 81       	ldd	r24, Y+5	; 0x05
    27e6:	9e 81       	ldd	r25, Y+6	; 0x06
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <LCD_sendCommand+0x3ce>
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    27f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    27f8:	e9 96       	adiw	r28, 0x39	; 57
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	e9 97       	sbiw	r28, 0x39	; 57
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	60 e0       	ldi	r22, 0x00	; 0
    2824:	41 e0       	ldi	r20, 0x01	; 1
    2826:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_writePin>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e8       	ldi	r26, 0x80	; 128
    283a:	bf e3       	ldi	r27, 0x3F	; 63
    283c:	8d ab       	std	Y+53, r24	; 0x35
    283e:	9e ab       	std	Y+54, r25	; 0x36
    2840:	af ab       	std	Y+55, r26	; 0x37
    2842:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	6d a9       	ldd	r22, Y+53	; 0x35
    2846:	7e a9       	ldd	r23, Y+54	; 0x36
    2848:	8f a9       	ldd	r24, Y+55	; 0x37
    284a:	98 ad       	ldd	r25, Y+56	; 0x38
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a e7       	ldi	r20, 0x7A	; 122
    2852:	53 e4       	ldi	r21, 0x43	; 67
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	89 ab       	std	Y+49, r24	; 0x31
    285e:	9a ab       	std	Y+50, r25	; 0x32
    2860:	ab ab       	std	Y+51, r26	; 0x33
    2862:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2864:	69 a9       	ldd	r22, Y+49	; 0x31
    2866:	7a a9       	ldd	r23, Y+50	; 0x32
    2868:	8b a9       	ldd	r24, Y+51	; 0x33
    286a:	9c a9       	ldd	r25, Y+52	; 0x34
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	98 ab       	std	Y+48, r25	; 0x30
    2882:	8f a7       	std	Y+47, r24	; 0x2f
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2886:	69 a9       	ldd	r22, Y+49	; 0x31
    2888:	7a a9       	ldd	r23, Y+50	; 0x32
    288a:	8b a9       	ldd	r24, Y+51	; 0x33
    288c:	9c a9       	ldd	r25, Y+52	; 0x34
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	6d a9       	ldd	r22, Y+53	; 0x35
    28a0:	7e a9       	ldd	r23, Y+54	; 0x36
    28a2:	8f a9       	ldd	r24, Y+55	; 0x37
    28a4:	98 ad       	ldd	r25, Y+56	; 0x38
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	98 ab       	std	Y+48, r25	; 0x30
    28c4:	8f a7       	std	Y+47, r24	; 0x2f
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <LCD_displayCharacter+0xdc>
    28c8:	89 e1       	ldi	r24, 0x19	; 25
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9e a7       	std	Y+46, r25	; 0x2e
    28ce:	8d a7       	std	Y+45, r24	; 0x2d
    28d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_displayCharacter+0xca>
    28d8:	9e a7       	std	Y+46, r25	; 0x2e
    28da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28de:	98 a9       	ldd	r25, Y+48	; 0x30
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	98 ab       	std	Y+48, r25	; 0x30
    28e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <LCD_displayCharacter+0xbe>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	69 a9       	ldd	r22, Y+49	; 0x31
    28f2:	7a a9       	ldd	r23, Y+50	; 0x32
    28f4:	8b a9       	ldd	r24, Y+51	; 0x33
    28f6:	9c a9       	ldd	r25, Y+52	; 0x34
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	98 ab       	std	Y+48, r25	; 0x30
    2902:	8f a7       	std	Y+47, r24	; 0x2f
    2904:	8f a5       	ldd	r24, Y+47	; 0x2f
    2906:	98 a9       	ldd	r25, Y+48	; 0x30
    2908:	9c a7       	std	Y+44, r25	; 0x2c
    290a:	8b a7       	std	Y+43, r24	; 0x2b
    290c:	8b a5       	ldd	r24, Y+43	; 0x2b
    290e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_displayCharacter+0x106>
    2914:	9c a7       	std	Y+44, r25	; 0x2c
    2916:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	62 e0       	ldi	r22, 0x02	; 2
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_writePin>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a0 e8       	ldi	r26, 0x80	; 128
    2928:	bf e3       	ldi	r27, 0x3F	; 63
    292a:	8f a3       	std	Y+39, r24	; 0x27
    292c:	98 a7       	std	Y+40, r25	; 0x28
    292e:	a9 a7       	std	Y+41, r26	; 0x29
    2930:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2932:	6f a1       	ldd	r22, Y+39	; 0x27
    2934:	78 a5       	ldd	r23, Y+40	; 0x28
    2936:	89 a5       	ldd	r24, Y+41	; 0x29
    2938:	9a a5       	ldd	r25, Y+42	; 0x2a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4a e7       	ldi	r20, 0x7A	; 122
    2940:	53 e4       	ldi	r21, 0x43	; 67
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	8b a3       	std	Y+35, r24	; 0x23
    294c:	9c a3       	std	Y+36, r25	; 0x24
    294e:	ad a3       	std	Y+37, r26	; 0x25
    2950:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2952:	6b a1       	ldd	r22, Y+35	; 0x23
    2954:	7c a1       	ldd	r23, Y+36	; 0x24
    2956:	8d a1       	ldd	r24, Y+37	; 0x25
    2958:	9e a1       	ldd	r25, Y+38	; 0x26
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5f e3       	ldi	r21, 0x3F	; 63
    2962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2966:	88 23       	and	r24, r24
    2968:	2c f4       	brge	.+10     	; 0x2974 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	9a a3       	std	Y+34, r25	; 0x22
    2970:	89 a3       	std	Y+33, r24	; 0x21
    2972:	3f c0       	rjmp	.+126    	; 0x29f2 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2974:	6b a1       	ldd	r22, Y+35	; 0x23
    2976:	7c a1       	ldd	r23, Y+36	; 0x24
    2978:	8d a1       	ldd	r24, Y+37	; 0x25
    297a:	9e a1       	ldd	r25, Y+38	; 0x26
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	4f e7       	ldi	r20, 0x7F	; 127
    2982:	57 e4       	ldi	r21, 0x47	; 71
    2984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2988:	18 16       	cp	r1, r24
    298a:	4c f5       	brge	.+82     	; 0x29de <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298c:	6f a1       	ldd	r22, Y+39	; 0x27
    298e:	78 a5       	ldd	r23, Y+40	; 0x28
    2990:	89 a5       	ldd	r24, Y+41	; 0x29
    2992:	9a a5       	ldd	r25, Y+42	; 0x2a
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e2       	ldi	r20, 0x20	; 32
    299a:	51 e4       	ldi	r21, 0x41	; 65
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	9a a3       	std	Y+34, r25	; 0x22
    29b2:	89 a3       	std	Y+33, r24	; 0x21
    29b4:	0f c0       	rjmp	.+30     	; 0x29d4 <LCD_displayCharacter+0x1ca>
    29b6:	89 e1       	ldi	r24, 0x19	; 25
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	98 a3       	std	Y+32, r25	; 0x20
    29bc:	8f 8f       	std	Y+31, r24	; 0x1f
    29be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c0:	98 a1       	ldd	r25, Y+32	; 0x20
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <LCD_displayCharacter+0x1b8>
    29c6:	98 a3       	std	Y+32, r25	; 0x20
    29c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ca:	89 a1       	ldd	r24, Y+33	; 0x21
    29cc:	9a a1       	ldd	r25, Y+34	; 0x22
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	9a a3       	std	Y+34, r25	; 0x22
    29d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d4:	89 a1       	ldd	r24, Y+33	; 0x21
    29d6:	9a a1       	ldd	r25, Y+34	; 0x22
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	69 f7       	brne	.-38     	; 0x29b6 <LCD_displayCharacter+0x1ac>
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29de:	6b a1       	ldd	r22, Y+35	; 0x23
    29e0:	7c a1       	ldd	r23, Y+36	; 0x24
    29e2:	8d a1       	ldd	r24, Y+37	; 0x25
    29e4:	9e a1       	ldd	r25, Y+38	; 0x26
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9a a3       	std	Y+34, r25	; 0x22
    29f0:	89 a3       	std	Y+33, r24	; 0x21
    29f2:	89 a1       	ldd	r24, Y+33	; 0x21
    29f4:	9a a1       	ldd	r25, Y+34	; 0x22
    29f6:	9e 8f       	std	Y+30, r25	; 0x1e
    29f8:	8d 8f       	std	Y+29, r24	; 0x1d
    29fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <LCD_displayCharacter+0x1f4>
    2a02:	9e 8f       	std	Y+30, r25	; 0x1e
    2a04:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	69 ad       	ldd	r22, Y+57	; 0x39
    2a0a:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePort>
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a0 e8       	ldi	r26, 0x80	; 128
    2a14:	bf e3       	ldi	r27, 0x3F	; 63
    2a16:	89 8f       	std	Y+25, r24	; 0x19
    2a18:	9a 8f       	std	Y+26, r25	; 0x1a
    2a1a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	4a e7       	ldi	r20, 0x7A	; 122
    2a2c:	53 e4       	ldi	r21, 0x43	; 67
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	8d 8b       	std	Y+21, r24	; 0x15
    2a38:	9e 8b       	std	Y+22, r25	; 0x16
    2a3a:	af 8b       	std	Y+23, r26	; 0x17
    2a3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a40:	7e 89       	ldd	r23, Y+22	; 0x16
    2a42:	8f 89       	ldd	r24, Y+23	; 0x17
    2a44:	98 8d       	ldd	r25, Y+24	; 0x18
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e8       	ldi	r20, 0x80	; 128
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a52:	88 23       	and	r24, r24
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9c 8b       	std	Y+20, r25	; 0x14
    2a5c:	8b 8b       	std	Y+19, r24	; 0x13
    2a5e:	3f c0       	rjmp	.+126    	; 0x2ade <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2a60:	6d 89       	ldd	r22, Y+21	; 0x15
    2a62:	7e 89       	ldd	r23, Y+22	; 0x16
    2a64:	8f 89       	ldd	r24, Y+23	; 0x17
    2a66:	98 8d       	ldd	r25, Y+24	; 0x18
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	3f ef       	ldi	r19, 0xFF	; 255
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	57 e4       	ldi	r21, 0x47	; 71
    2a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	4c f5       	brge	.+82     	; 0x2aca <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a78:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e2       	ldi	r20, 0x20	; 32
    2a86:	51 e4       	ldi	r21, 0x41	; 65
    2a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	9c 8b       	std	Y+20, r25	; 0x14
    2a9e:	8b 8b       	std	Y+19, r24	; 0x13
    2aa0:	0f c0       	rjmp	.+30     	; 0x2ac0 <LCD_displayCharacter+0x2b6>
    2aa2:	89 e1       	ldi	r24, 0x19	; 25
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9a 8b       	std	Y+18, r25	; 0x12
    2aa8:	89 8b       	std	Y+17, r24	; 0x11
    2aaa:	89 89       	ldd	r24, Y+17	; 0x11
    2aac:	9a 89       	ldd	r25, Y+18	; 0x12
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <LCD_displayCharacter+0x2a4>
    2ab2:	9a 8b       	std	Y+18, r25	; 0x12
    2ab4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	9c 8b       	std	Y+20, r25	; 0x14
    2abe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	69 f7       	brne	.-38     	; 0x2aa2 <LCD_displayCharacter+0x298>
    2ac8:	14 c0       	rjmp	.+40     	; 0x2af2 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aca:	6d 89       	ldd	r22, Y+21	; 0x15
    2acc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ace:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9c 8b       	std	Y+20, r25	; 0x14
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
    2ade:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae2:	98 8b       	std	Y+16, r25	; 0x10
    2ae4:	8f 87       	std	Y+15, r24	; 0x0f
    2ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ae8:	98 89       	ldd	r25, Y+16	; 0x10
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_displayCharacter+0x2e0>
    2aee:	98 8b       	std	Y+16, r25	; 0x10
    2af0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	62 e0       	ldi	r22, 0x02	; 2
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_writePin>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	a0 e8       	ldi	r26, 0x80	; 128
    2b02:	bf e3       	ldi	r27, 0x3F	; 63
    2b04:	8b 87       	std	Y+11, r24	; 0x0b
    2b06:	9c 87       	std	Y+12, r25	; 0x0c
    2b08:	ad 87       	std	Y+13, r26	; 0x0d
    2b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4a e7       	ldi	r20, 0x7A	; 122
    2b1a:	53 e4       	ldi	r21, 0x43	; 67
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8f 83       	std	Y+7, r24	; 0x07
    2b26:	98 87       	std	Y+8, r25	; 0x08
    2b28:	a9 87       	std	Y+9, r26	; 0x09
    2b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2e:	78 85       	ldd	r23, Y+8	; 0x08
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <LCD_displayCharacter+0x344>
		__ticks = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9e 83       	std	Y+6, r25	; 0x06
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b50:	78 85       	ldd	r23, Y+8	; 0x08
    2b52:	89 85       	ldd	r24, Y+9	; 0x09
    2b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	4c f5       	brge	.+82     	; 0x2bb8 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <LCD_displayCharacter+0x3a4>
    2b90:	89 e1       	ldi	r24, 0x19	; 25
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <LCD_displayCharacter+0x392>
    2ba0:	9c 83       	std	Y+4, r25	; 0x04
    2ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <LCD_displayCharacter+0x386>
    2bb6:	14 c0       	rjmp	.+40     	; 0x2be0 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bba:	78 85       	ldd	r23, Y+8	; 0x08
    2bbc:	89 85       	ldd	r24, Y+9	; 0x09
    2bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9e 83       	std	Y+6, r25	; 0x06
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bce:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <LCD_displayCharacter+0x3ce>
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2be0:	e9 96       	adiw	r28, 0x39	; 57
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	de bf       	out	0x3e, r29	; 62
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	cd bf       	out	0x3d, r28	; 61
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <LCD_displayString+0x6>
    2bf8:	0f 92       	push	r0
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	9b 83       	std	Y+3, r25	; 0x03
    2c00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c02:	19 82       	std	Y+1, r1	; 0x01
    2c04:	0e c0       	rjmp	.+28     	; 0x2c22 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c10:	fc 01       	movw	r30, r24
    2c12:	e2 0f       	add	r30, r18
    2c14:	f3 1f       	adc	r31, r19
    2c16:	80 81       	ld	r24, Z
    2c18:	0e 94 05 14 	call	0x280a	; 0x280a <LCD_displayCharacter>
		i++;
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	8f 5f       	subi	r24, 0xFF	; 255
    2c20:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	28 2f       	mov	r18, r24
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	e2 0f       	add	r30, r18
    2c30:	f3 1f       	adc	r31, r19
    2c32:	80 81       	ld	r24, Z
    2c34:	88 23       	and	r24, r24
    2c36:	39 f7       	brne	.-50     	; 0x2c06 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	cf 91       	pop	r28
    2c40:	df 91       	pop	r29
    2c42:	08 95       	ret

00002c44 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <LCD_moveCursor+0x6>
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <LCD_moveCursor+0x8>
    2c4c:	0f 92       	push	r0
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	8a 83       	std	Y+2, r24	; 0x02
    2c54:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	3d 83       	std	Y+5, r19	; 0x05
    2c5e:	2c 83       	std	Y+4, r18	; 0x04
    2c60:	8c 81       	ldd	r24, Y+4	; 0x04
    2c62:	9d 81       	ldd	r25, Y+5	; 0x05
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	91 05       	cpc	r25, r1
    2c68:	c1 f0       	breq	.+48     	; 0x2c9a <LCD_moveCursor+0x56>
    2c6a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c6c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c6e:	22 30       	cpi	r18, 0x02	; 2
    2c70:	31 05       	cpc	r19, r1
    2c72:	2c f4       	brge	.+10     	; 0x2c7e <LCD_moveCursor+0x3a>
    2c74:	8c 81       	ldd	r24, Y+4	; 0x04
    2c76:	9d 81       	ldd	r25, Y+5	; 0x05
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	61 f0       	breq	.+24     	; 0x2c94 <LCD_moveCursor+0x50>
    2c7c:	19 c0       	rjmp	.+50     	; 0x2cb0 <LCD_moveCursor+0x6c>
    2c7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c80:	3d 81       	ldd	r19, Y+5	; 0x05
    2c82:	22 30       	cpi	r18, 0x02	; 2
    2c84:	31 05       	cpc	r19, r1
    2c86:	69 f0       	breq	.+26     	; 0x2ca2 <LCD_moveCursor+0x5e>
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	83 30       	cpi	r24, 0x03	; 3
    2c8e:	91 05       	cpc	r25, r1
    2c90:	61 f0       	breq	.+24     	; 0x2caa <LCD_moveCursor+0x66>
    2c92:	0e c0       	rjmp	.+28     	; 0x2cb0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	0b c0       	rjmp	.+22     	; 0x2cb0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	80 5c       	subi	r24, 0xC0	; 192
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    2ca0:	07 c0       	rjmp	.+14     	; 0x2cb0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	80 5f       	subi	r24, 0xF0	; 240
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	03 c0       	rjmp	.+6      	; 0x2cb0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	80 5b       	subi	r24, 0xB0	; 176
    2cae:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	80 68       	ori	r24, 0x80	; 128
    2cb4:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_sendCommand>
}
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <LCD_displayStringRowColumn+0x6>
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <LCD_displayStringRowColumn+0x8>
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	6a 83       	std	Y+2, r22	; 0x02
    2cd8:	5c 83       	std	Y+4, r21	; 0x04
    2cda:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	6a 81       	ldd	r22, Y+2	; 0x02
    2ce0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce8:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <LCD_displayString>
}
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	c2 54       	subi	r28, 0x42	; 66
    2d04:	d0 40       	sbci	r29, 0x00	; 0
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	fe 01       	movw	r30, r28
    2d12:	ef 5b       	subi	r30, 0xBF	; 191
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
   char buff[64]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	ef 5b       	subi	r30, 0xBF	; 191
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	80 81       	ld	r24, Z
    2d22:	91 81       	ldd	r25, Z+1	; 0x01
    2d24:	9e 01       	movw	r18, r28
    2d26:	2f 5f       	subi	r18, 0xFF	; 255
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	b9 01       	movw	r22, r18
    2d2c:	4a e0       	ldi	r20, 0x0A	; 10
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	0e 94 92 1b 	call	0x3724	; 0x3724 <itoa>
   LCD_displayString(buff); /* Display the string */
    2d34:	ce 01       	movw	r24, r28
    2d36:	01 96       	adiw	r24, 0x01	; 1
    2d38:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <LCD_displayString>
}
    2d3c:	ce 5b       	subi	r28, 0xBE	; 190
    2d3e:	df 4f       	sbci	r29, 0xFF	; 255
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_sendCommand>
}
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2d64:	1f 92       	push	r1
    2d66:	0f 92       	push	r0
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	0f 92       	push	r0
    2d6c:	11 24       	eor	r1, r1
    2d6e:	2f 93       	push	r18
    2d70:	3f 93       	push	r19
    2d72:	4f 93       	push	r20
    2d74:	5f 93       	push	r21
    2d76:	6f 93       	push	r22
    2d78:	7f 93       	push	r23
    2d7a:	8f 93       	push	r24
    2d7c:	9f 93       	push	r25
    2d7e:	af 93       	push	r26
    2d80:	bf 93       	push	r27
    2d82:	ef 93       	push	r30
    2d84:	ff 93       	push	r31
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    2d8e:	80 91 43 01 	lds	r24, 0x0143
    2d92:	90 91 44 01 	lds	r25, 0x0144
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	29 f0       	breq	.+10     	; 0x2da4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    2d9a:	e0 91 43 01 	lds	r30, 0x0143
    2d9e:	f0 91 44 01 	lds	r31, 0x0144
    2da2:	09 95       	icall
	}
}
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	ff 91       	pop	r31
    2daa:	ef 91       	pop	r30
    2dac:	bf 91       	pop	r27
    2dae:	af 91       	pop	r26
    2db0:	9f 91       	pop	r25
    2db2:	8f 91       	pop	r24
    2db4:	7f 91       	pop	r23
    2db6:	6f 91       	pop	r22
    2db8:	5f 91       	pop	r21
    2dba:	4f 91       	pop	r20
    2dbc:	3f 91       	pop	r19
    2dbe:	2f 91       	pop	r18
    2dc0:	0f 90       	pop	r0
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	0f 90       	pop	r0
    2dc6:	1f 90       	pop	r1
    2dc8:	18 95       	reti

00002dca <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2dca:	1f 92       	push	r1
    2dcc:	0f 92       	push	r0
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	0f 92       	push	r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	2f 93       	push	r18
    2dd6:	3f 93       	push	r19
    2dd8:	4f 93       	push	r20
    2dda:	5f 93       	push	r21
    2ddc:	6f 93       	push	r22
    2dde:	7f 93       	push	r23
    2de0:	8f 93       	push	r24
    2de2:	9f 93       	push	r25
    2de4:	af 93       	push	r26
    2de6:	bf 93       	push	r27
    2de8:	ef 93       	push	r30
    2dea:	ff 93       	push	r31
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    2df4:	80 91 43 01 	lds	r24, 0x0143
    2df8:	90 91 44 01 	lds	r25, 0x0144
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	29 f0       	breq	.+10     	; 0x2e0a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    2e00:	e0 91 43 01 	lds	r30, 0x0143
    2e04:	f0 91 44 01 	lds	r31, 0x0144
    2e08:	09 95       	icall
	}
}
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	ff 91       	pop	r31
    2e10:	ef 91       	pop	r30
    2e12:	bf 91       	pop	r27
    2e14:	af 91       	pop	r26
    2e16:	9f 91       	pop	r25
    2e18:	8f 91       	pop	r24
    2e1a:	7f 91       	pop	r23
    2e1c:	6f 91       	pop	r22
    2e1e:	5f 91       	pop	r21
    2e20:	4f 91       	pop	r20
    2e22:	3f 91       	pop	r19
    2e24:	2f 91       	pop	r18
    2e26:	0f 90       	pop	r0
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	0f 90       	pop	r0
    2e2c:	1f 90       	pop	r1
    2e2e:	18 95       	reti

00002e30 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    2e30:	1f 92       	push	r1
    2e32:	0f 92       	push	r0
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	0f 92       	push	r0
    2e38:	11 24       	eor	r1, r1
    2e3a:	2f 93       	push	r18
    2e3c:	3f 93       	push	r19
    2e3e:	4f 93       	push	r20
    2e40:	5f 93       	push	r21
    2e42:	6f 93       	push	r22
    2e44:	7f 93       	push	r23
    2e46:	8f 93       	push	r24
    2e48:	9f 93       	push	r25
    2e4a:	af 93       	push	r26
    2e4c:	bf 93       	push	r27
    2e4e:	ef 93       	push	r30
    2e50:	ff 93       	push	r31
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    2e5a:	80 91 45 01 	lds	r24, 0x0145
    2e5e:	90 91 46 01 	lds	r25, 0x0146
    2e62:	00 97       	sbiw	r24, 0x00	; 0
    2e64:	29 f0       	breq	.+10     	; 0x2e70 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    2e66:	e0 91 45 01 	lds	r30, 0x0145
    2e6a:	f0 91 46 01 	lds	r31, 0x0146
    2e6e:	09 95       	icall
	}
}
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	ff 91       	pop	r31
    2e76:	ef 91       	pop	r30
    2e78:	bf 91       	pop	r27
    2e7a:	af 91       	pop	r26
    2e7c:	9f 91       	pop	r25
    2e7e:	8f 91       	pop	r24
    2e80:	7f 91       	pop	r23
    2e82:	6f 91       	pop	r22
    2e84:	5f 91       	pop	r21
    2e86:	4f 91       	pop	r20
    2e88:	3f 91       	pop	r19
    2e8a:	2f 91       	pop	r18
    2e8c:	0f 90       	pop	r0
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	0f 90       	pop	r0
    2e92:	1f 90       	pop	r1
    2e94:	18 95       	reti

00002e96 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    2e96:	1f 92       	push	r1
    2e98:	0f 92       	push	r0
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	0f 92       	push	r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	2f 93       	push	r18
    2ea2:	3f 93       	push	r19
    2ea4:	4f 93       	push	r20
    2ea6:	5f 93       	push	r21
    2ea8:	6f 93       	push	r22
    2eaa:	7f 93       	push	r23
    2eac:	8f 93       	push	r24
    2eae:	9f 93       	push	r25
    2eb0:	af 93       	push	r26
    2eb2:	bf 93       	push	r27
    2eb4:	ef 93       	push	r30
    2eb6:	ff 93       	push	r31
    2eb8:	df 93       	push	r29
    2eba:	cf 93       	push	r28
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    2ec0:	80 91 45 01 	lds	r24, 0x0145
    2ec4:	90 91 46 01 	lds	r25, 0x0146
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	29 f0       	breq	.+10     	; 0x2ed6 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    2ecc:	e0 91 45 01 	lds	r30, 0x0145
    2ed0:	f0 91 46 01 	lds	r31, 0x0146
    2ed4:	09 95       	icall
	}
}
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	ff 91       	pop	r31
    2edc:	ef 91       	pop	r30
    2ede:	bf 91       	pop	r27
    2ee0:	af 91       	pop	r26
    2ee2:	9f 91       	pop	r25
    2ee4:	8f 91       	pop	r24
    2ee6:	7f 91       	pop	r23
    2ee8:	6f 91       	pop	r22
    2eea:	5f 91       	pop	r21
    2eec:	4f 91       	pop	r20
    2eee:	3f 91       	pop	r19
    2ef0:	2f 91       	pop	r18
    2ef2:	0f 90       	pop	r0
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	0f 90       	pop	r0
    2ef8:	1f 90       	pop	r1
    2efa:	18 95       	reti

00002efc <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    2efc:	1f 92       	push	r1
    2efe:	0f 92       	push	r0
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	0f 92       	push	r0
    2f04:	11 24       	eor	r1, r1
    2f06:	2f 93       	push	r18
    2f08:	3f 93       	push	r19
    2f0a:	4f 93       	push	r20
    2f0c:	5f 93       	push	r21
    2f0e:	6f 93       	push	r22
    2f10:	7f 93       	push	r23
    2f12:	8f 93       	push	r24
    2f14:	9f 93       	push	r25
    2f16:	af 93       	push	r26
    2f18:	bf 93       	push	r27
    2f1a:	ef 93       	push	r30
    2f1c:	ff 93       	push	r31
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    2f26:	80 91 45 01 	lds	r24, 0x0145
    2f2a:	90 91 46 01 	lds	r25, 0x0146
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	29 f0       	breq	.+10     	; 0x2f3c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    2f32:	e0 91 45 01 	lds	r30, 0x0145
    2f36:	f0 91 46 01 	lds	r31, 0x0146
    2f3a:	09 95       	icall
	}
}
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	ff 91       	pop	r31
    2f42:	ef 91       	pop	r30
    2f44:	bf 91       	pop	r27
    2f46:	af 91       	pop	r26
    2f48:	9f 91       	pop	r25
    2f4a:	8f 91       	pop	r24
    2f4c:	7f 91       	pop	r23
    2f4e:	6f 91       	pop	r22
    2f50:	5f 91       	pop	r21
    2f52:	4f 91       	pop	r20
    2f54:	3f 91       	pop	r19
    2f56:	2f 91       	pop	r18
    2f58:	0f 90       	pop	r0
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	0f 90       	pop	r0
    2f5e:	1f 90       	pop	r1
    2f60:	18 95       	reti

00002f62 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    2f62:	1f 92       	push	r1
    2f64:	0f 92       	push	r0
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	0f 92       	push	r0
    2f6a:	11 24       	eor	r1, r1
    2f6c:	2f 93       	push	r18
    2f6e:	3f 93       	push	r19
    2f70:	4f 93       	push	r20
    2f72:	5f 93       	push	r21
    2f74:	6f 93       	push	r22
    2f76:	7f 93       	push	r23
    2f78:	8f 93       	push	r24
    2f7a:	9f 93       	push	r25
    2f7c:	af 93       	push	r26
    2f7e:	bf 93       	push	r27
    2f80:	ef 93       	push	r30
    2f82:	ff 93       	push	r31
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    2f8c:	80 91 47 01 	lds	r24, 0x0147
    2f90:	90 91 48 01 	lds	r25, 0x0148
    2f94:	00 97       	sbiw	r24, 0x00	; 0
    2f96:	29 f0       	breq	.+10     	; 0x2fa2 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    2f98:	e0 91 47 01 	lds	r30, 0x0147
    2f9c:	f0 91 48 01 	lds	r31, 0x0148
    2fa0:	09 95       	icall
	}
}
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	ff 91       	pop	r31
    2fa8:	ef 91       	pop	r30
    2faa:	bf 91       	pop	r27
    2fac:	af 91       	pop	r26
    2fae:	9f 91       	pop	r25
    2fb0:	8f 91       	pop	r24
    2fb2:	7f 91       	pop	r23
    2fb4:	6f 91       	pop	r22
    2fb6:	5f 91       	pop	r21
    2fb8:	4f 91       	pop	r20
    2fba:	3f 91       	pop	r19
    2fbc:	2f 91       	pop	r18
    2fbe:	0f 90       	pop	r0
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	0f 90       	pop	r0
    2fc4:	1f 90       	pop	r1
    2fc6:	18 95       	reti

00002fc8 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    2fc8:	1f 92       	push	r1
    2fca:	0f 92       	push	r0
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	0f 92       	push	r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	2f 93       	push	r18
    2fd4:	3f 93       	push	r19
    2fd6:	4f 93       	push	r20
    2fd8:	5f 93       	push	r21
    2fda:	6f 93       	push	r22
    2fdc:	7f 93       	push	r23
    2fde:	8f 93       	push	r24
    2fe0:	9f 93       	push	r25
    2fe2:	af 93       	push	r26
    2fe4:	bf 93       	push	r27
    2fe6:	ef 93       	push	r30
    2fe8:	ff 93       	push	r31
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    2ff2:	80 91 47 01 	lds	r24, 0x0147
    2ff6:	90 91 48 01 	lds	r25, 0x0148
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	29 f0       	breq	.+10     	; 0x3008 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    2ffe:	e0 91 47 01 	lds	r30, 0x0147
    3002:	f0 91 48 01 	lds	r31, 0x0148
    3006:	09 95       	icall
	}
}
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	ff 91       	pop	r31
    300e:	ef 91       	pop	r30
    3010:	bf 91       	pop	r27
    3012:	af 91       	pop	r26
    3014:	9f 91       	pop	r25
    3016:	8f 91       	pop	r24
    3018:	7f 91       	pop	r23
    301a:	6f 91       	pop	r22
    301c:	5f 91       	pop	r21
    301e:	4f 91       	pop	r20
    3020:	3f 91       	pop	r19
    3022:	2f 91       	pop	r18
    3024:	0f 90       	pop	r0
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	0f 90       	pop	r0
    302a:	1f 90       	pop	r1
    302c:	18 95       	reti

0000302e <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	00 d0       	rcall	.+0      	; 0x3034 <TIMER0_init+0x6>
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	9a 83       	std	Y+2, r25	; 0x02
    303a:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    303c:	e3 e5       	ldi	r30, 0x53	; 83
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 e8       	ldi	r24, 0x80	; 128
    3042:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
    3044:	a2 e5       	ldi	r26, 0x52	; 82
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e9 81       	ldd	r30, Y+1	; 0x01
    304a:	fa 81       	ldd	r31, Y+2	; 0x02
    304c:	84 81       	ldd	r24, Z+4	; 0x04
    304e:	95 81       	ldd	r25, Z+5	; 0x05
    3050:	8c 93       	st	X, r24
	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
    3052:	ac e5       	ldi	r26, 0x5C	; 92
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e9 81       	ldd	r30, Y+1	; 0x01
    3058:	fa 81       	ldd	r31, Y+2	; 0x02
    305a:	86 81       	ldd	r24, Z+6	; 0x06
    305c:	97 81       	ldd	r25, Z+7	; 0x07
    305e:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
    3060:	e9 81       	ldd	r30, Y+1	; 0x01
    3062:	fa 81       	ldd	r31, Y+2	; 0x02
    3064:	83 81       	ldd	r24, Z+3	; 0x03
    3066:	83 30       	cpi	r24, 0x03	; 3
    3068:	39 f4       	brne	.+14     	; 0x3078 <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		DDRB |= (1 << OC0);
    306a:	a7 e3       	ldi	r26, 0x37	; 55
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	e7 e3       	ldi	r30, 0x37	; 55
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	88 60       	ori	r24, 0x08	; 8
    3076:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    3078:	e9 81       	ldd	r30, Y+1	; 0x01
    307a:	fa 81       	ldd	r31, Y+2	; 0x02
    307c:	81 81       	ldd	r24, Z+1	; 0x01
    307e:	88 23       	and	r24, r24
    3080:	41 f4       	brne	.+16     	; 0x3092 <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
    3082:	a9 e5       	ldi	r26, 0x59	; 89
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	e9 e5       	ldi	r30, 0x59	; 89
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	81 60       	ori	r24, 0x01	; 1
    308e:	8c 93       	st	X, r24
    3090:	0c c0       	rjmp	.+24     	; 0x30aa <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    3092:	e9 81       	ldd	r30, Y+1	; 0x01
    3094:	fa 81       	ldd	r31, Y+2	; 0x02
    3096:	81 81       	ldd	r24, Z+1	; 0x01
    3098:	81 30       	cpi	r24, 0x01	; 1
    309a:	39 f4       	brne	.+14     	; 0x30aa <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
    309c:	a9 e5       	ldi	r26, 0x59	; 89
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	e9 e5       	ldi	r30, 0x59	; 89
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	82 60       	ori	r24, 0x02	; 2
    30a8:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
    30aa:	a3 e5       	ldi	r26, 0x53	; 83
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	e3 e5       	ldi	r30, 0x53	; 83
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	28 2f       	mov	r18, r24
    30b6:	27 7b       	andi	r18, 0xB7	; 183
    30b8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ba:	fa 81       	ldd	r31, Y+2	; 0x02
    30bc:	81 81       	ldd	r24, Z+1	; 0x01
    30be:	88 2f       	mov	r24, r24
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	00 24       	eor	r0, r0
    30c4:	96 95       	lsr	r25
    30c6:	87 95       	ror	r24
    30c8:	07 94       	ror	r0
    30ca:	96 95       	lsr	r25
    30cc:	87 95       	ror	r24
    30ce:	07 94       	ror	r0
    30d0:	98 2f       	mov	r25, r24
    30d2:	80 2d       	mov	r24, r0
    30d4:	88 74       	andi	r24, 0x48	; 72
    30d6:	82 2b       	or	r24, r18
    30d8:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
    30da:	a3 e5       	ldi	r26, 0x53	; 83
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	e3 e5       	ldi	r30, 0x53	; 83
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	28 2f       	mov	r18, r24
    30e6:	2f 7c       	andi	r18, 0xCF	; 207
    30e8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ea:	fa 81       	ldd	r31, Y+2	; 0x02
    30ec:	82 81       	ldd	r24, Z+2	; 0x02
    30ee:	88 2f       	mov	r24, r24
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	83 70       	andi	r24, 0x03	; 3
    30f4:	90 70       	andi	r25, 0x00	; 0
    30f6:	82 95       	swap	r24
    30f8:	92 95       	swap	r25
    30fa:	90 7f       	andi	r25, 0xF0	; 240
    30fc:	98 27       	eor	r25, r24
    30fe:	80 7f       	andi	r24, 0xF0	; 240
    3100:	98 27       	eor	r25, r24
    3102:	82 2b       	or	r24, r18
    3104:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
    3106:	a3 e5       	ldi	r26, 0x53	; 83
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	e3 e5       	ldi	r30, 0x53	; 83
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	98 2f       	mov	r25, r24
    3112:	98 7f       	andi	r25, 0xF8	; 248
    3114:	e9 81       	ldd	r30, Y+1	; 0x01
    3116:	fa 81       	ldd	r31, Y+2	; 0x02
    3118:	80 81       	ld	r24, Z
    311a:	87 70       	andi	r24, 0x07	; 7
    311c:	89 2b       	or	r24, r25
    311e:	8c 93       	st	X, r24
}
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	00 d0       	rcall	.+0      	; 0x3130 <TIMER1_init+0x6>
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
    3138:	ac e4       	ldi	r26, 0x4C	; 76
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e9 81       	ldd	r30, Y+1	; 0x01
    313e:	fa 81       	ldd	r31, Y+2	; 0x02
    3140:	84 81       	ldd	r24, Z+4	; 0x04
    3142:	95 81       	ldd	r25, Z+5	; 0x05
    3144:	11 96       	adiw	r26, 0x01	; 1
    3146:	9c 93       	st	X, r25
    3148:	8e 93       	st	-X, r24
	/*  Non PWM Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    314a:	ef e4       	ldi	r30, 0x4F	; 79
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	8c e0       	ldi	r24, 0x0C	; 12
    3150:	80 83       	st	Z, r24
	if((Config_Ptr -> OutputPin) == OC1A){
    3152:	e9 81       	ldd	r30, Y+1	; 0x01
    3154:	fa 81       	ldd	r31, Y+2	; 0x02
    3156:	83 81       	ldd	r24, Z+3	; 0x03
    3158:	85 30       	cpi	r24, 0x05	; 5
    315a:	41 f4       	brne	.+16     	; 0x316c <TIMER1_init+0x42>
	// configure the output pin PD5 in compare mode
		DDRD |= (1 << OC1A);
    315c:	a1 e3       	ldi	r26, 0x31	; 49
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e1 e3       	ldi	r30, 0x31	; 49
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	80 62       	ori	r24, 0x20	; 32
    3168:	8c 93       	st	X, r24
    316a:	0c c0       	rjmp	.+24     	; 0x3184 <TIMER1_init+0x5a>
	}

	/* Check for OC1B */
	else if ((Config_Ptr -> OutputPin) == OC1B){
    316c:	e9 81       	ldd	r30, Y+1	; 0x01
    316e:	fa 81       	ldd	r31, Y+2	; 0x02
    3170:	83 81       	ldd	r24, Z+3	; 0x03
    3172:	84 30       	cpi	r24, 0x04	; 4
    3174:	39 f4       	brne	.+14     	; 0x3184 <TIMER1_init+0x5a>
		// configure the output pin PD4 in compare mode
		DDRD |= (1 << OC1B);
    3176:	a1 e3       	ldi	r26, 0x31	; 49
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	e1 e3       	ldi	r30, 0x31	; 49
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	80 61       	ori	r24, 0x10	; 16
    3182:	8c 93       	st	X, r24
	}
	if( (Config_Ptr->mode ) == NORMAL_MODE)
    3184:	e9 81       	ldd	r30, Y+1	; 0x01
    3186:	fa 81       	ldd	r31, Y+2	; 0x02
    3188:	81 81       	ldd	r24, Z+1	; 0x01
    318a:	88 23       	and	r24, r24
    318c:	41 f4       	brne	.+16     	; 0x319e <TIMER1_init+0x74>
	{
		/* Enable interrupt FOR normal mode */
		TIMSK |= (1 << TOIE1);
    318e:	a9 e5       	ldi	r26, 0x59	; 89
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	e9 e5       	ldi	r30, 0x59	; 89
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	84 60       	ori	r24, 0x04	; 4
    319a:	8c 93       	st	X, r24
    319c:	56 c0       	rjmp	.+172    	; 0x324a <TIMER1_init+0x120>
	}
	else if ((Config_Ptr->mode) == CTC_MODE_CHANNEL_A)
    319e:	e9 81       	ldd	r30, Y+1	; 0x01
    31a0:	fa 81       	ldd	r31, Y+2	; 0x02
    31a2:	81 81       	ldd	r24, Z+1	; 0x01
    31a4:	82 30       	cpi	r24, 0x02	; 2
    31a6:	41 f5       	brne	.+80     	; 0x31f8 <TIMER1_init+0xce>
	{
		/*set compare value for compare mode channel A*/
		OCR1A  = ((Config_Ptr->compare_value));
    31a8:	aa e4       	ldi	r26, 0x4A	; 74
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e9 81       	ldd	r30, Y+1	; 0x01
    31ae:	fa 81       	ldd	r31, Y+2	; 0x02
    31b0:	86 81       	ldd	r24, Z+6	; 0x06
    31b2:	97 81       	ldd	r25, Z+7	; 0x07
    31b4:	11 96       	adiw	r26, 0x01	; 1
    31b6:	9c 93       	st	X, r25
    31b8:	8e 93       	st	-X, r24
		/* Enable interrupt for compare mode channel A */
		TIMSK |= (1 << OCIE1A);
    31ba:	a9 e5       	ldi	r26, 0x59	; 89
    31bc:	b0 e0       	ldi	r27, 0x00	; 0
    31be:	e9 e5       	ldi	r30, 0x59	; 89
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	80 61       	ori	r24, 0x10	; 16
    31c6:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel A */
		TCCR1A = ( (TCCR1A & 0x3F) | ( (Config_Ptr -> compare_output) << COM1A0) );
    31c8:	af e4       	ldi	r26, 0x4F	; 79
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	ef e4       	ldi	r30, 0x4F	; 79
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	28 2f       	mov	r18, r24
    31d4:	2f 73       	andi	r18, 0x3F	; 63
    31d6:	e9 81       	ldd	r30, Y+1	; 0x01
    31d8:	fa 81       	ldd	r31, Y+2	; 0x02
    31da:	82 81       	ldd	r24, Z+2	; 0x02
    31dc:	88 2f       	mov	r24, r24
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	00 24       	eor	r0, r0
    31e2:	96 95       	lsr	r25
    31e4:	87 95       	ror	r24
    31e6:	07 94       	ror	r0
    31e8:	96 95       	lsr	r25
    31ea:	87 95       	ror	r24
    31ec:	07 94       	ror	r0
    31ee:	98 2f       	mov	r25, r24
    31f0:	80 2d       	mov	r24, r0
    31f2:	82 2b       	or	r24, r18
    31f4:	8c 93       	st	X, r24
    31f6:	29 c0       	rjmp	.+82     	; 0x324a <TIMER1_init+0x120>
	}

	else if ( (Config_Ptr->mode) == CTC_MODE_CHANNEL_B){
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	81 81       	ldd	r24, Z+1	; 0x01
    31fe:	83 30       	cpi	r24, 0x03	; 3
    3200:	21 f5       	brne	.+72     	; 0x324a <TIMER1_init+0x120>
		/*set compare value for compare mode channel B*/
		OCR1B  = ((Config_Ptr -> compare_value));
    3202:	a8 e4       	ldi	r26, 0x48	; 72
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e9 81       	ldd	r30, Y+1	; 0x01
    3208:	fa 81       	ldd	r31, Y+2	; 0x02
    320a:	86 81       	ldd	r24, Z+6	; 0x06
    320c:	97 81       	ldd	r25, Z+7	; 0x07
    320e:	11 96       	adiw	r26, 0x01	; 1
    3210:	9c 93       	st	X, r25
    3212:	8e 93       	st	-X, r24

		/* Enable interrupt for compare mode channel B */
		TIMSK |= (1 << OCIE1B);
    3214:	a9 e5       	ldi	r26, 0x59	; 89
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e9 e5       	ldi	r30, 0x59	; 89
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	80 81       	ld	r24, Z
    321e:	88 60       	ori	r24, 0x08	; 8
    3220:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel B */
		TCCR1A = ( (TCCR1A & 0xCF) | ( (Config_Ptr -> compare_output) << COM1B0) );
    3222:	af e4       	ldi	r26, 0x4F	; 79
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	ef e4       	ldi	r30, 0x4F	; 79
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	28 2f       	mov	r18, r24
    322e:	2f 7c       	andi	r18, 0xCF	; 207
    3230:	e9 81       	ldd	r30, Y+1	; 0x01
    3232:	fa 81       	ldd	r31, Y+2	; 0x02
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	88 2f       	mov	r24, r24
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	82 95       	swap	r24
    323c:	92 95       	swap	r25
    323e:	90 7f       	andi	r25, 0xF0	; 240
    3240:	98 27       	eor	r25, r24
    3242:	80 7f       	andi	r24, 0xF0	; 240
    3244:	98 27       	eor	r25, r24
    3246:	82 2b       	or	r24, r18
    3248:	8c 93       	st	X, r24

	}

	/*configure the mode of the timer*/
	TCCR1B = ( ( TCCR1B & 0xE7 ) |  ( ( (Config_Ptr -> mode) >> 1) << WGM12)  );
    324a:	ae e4       	ldi	r26, 0x4E	; 78
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	ee e4       	ldi	r30, 0x4E	; 78
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	28 2f       	mov	r18, r24
    3256:	27 7e       	andi	r18, 0xE7	; 231
    3258:	e9 81       	ldd	r30, Y+1	; 0x01
    325a:	fa 81       	ldd	r31, Y+2	; 0x02
    325c:	81 81       	ldd	r24, Z+1	; 0x01
    325e:	86 95       	lsr	r24
    3260:	88 2f       	mov	r24, r24
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	88 0f       	add	r24, r24
    326e:	99 1f       	adc	r25, r25
    3270:	82 2b       	or	r24, r18
    3272:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
    3274:	ae e4       	ldi	r26, 0x4E	; 78
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	ee e4       	ldi	r30, 0x4E	; 78
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	98 2f       	mov	r25, r24
    3280:	98 7f       	andi	r25, 0xF8	; 248
    3282:	e9 81       	ldd	r30, Y+1	; 0x01
    3284:	fa 81       	ldd	r31, Y+2	; 0x02
    3286:	80 81       	ld	r24, Z
    3288:	89 2b       	or	r24, r25
    328a:	8c 93       	st	X, r24
}
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	08 95       	ret

00003296 <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	00 d0       	rcall	.+0      	; 0x329c <TIMER2_init+0x6>
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	9a 83       	std	Y+2, r25	; 0x02
    32a2:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
    32a4:	a4 e4       	ldi	r26, 0x44	; 68
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e9 81       	ldd	r30, Y+1	; 0x01
    32aa:	fa 81       	ldd	r31, Y+2	; 0x02
    32ac:	84 81       	ldd	r24, Z+4	; 0x04
    32ae:	95 81       	ldd	r25, Z+5	; 0x05
    32b0:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
    32b2:	a3 e4       	ldi	r26, 0x43	; 67
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	e9 81       	ldd	r30, Y+1	; 0x01
    32b8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ba:	86 81       	ldd	r24, Z+6	; 0x06
    32bc:	97 81       	ldd	r25, Z+7	; 0x07
    32be:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    32c0:	e5 e4       	ldi	r30, 0x45	; 69
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 e8       	ldi	r24, 0x80	; 128
    32c6:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    32c8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ca:	fa 81       	ldd	r31, Y+2	; 0x02
    32cc:	81 81       	ldd	r24, Z+1	; 0x01
    32ce:	88 23       	and	r24, r24
    32d0:	41 f4       	brne	.+16     	; 0x32e2 <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    32d2:	a9 e5       	ldi	r26, 0x59	; 89
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e9 e5       	ldi	r30, 0x59	; 89
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	80 64       	ori	r24, 0x40	; 64
    32de:	8c 93       	st	X, r24
    32e0:	0c c0       	rjmp	.+24     	; 0x32fa <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    32e2:	e9 81       	ldd	r30, Y+1	; 0x01
    32e4:	fa 81       	ldd	r31, Y+2	; 0x02
    32e6:	81 81       	ldd	r24, Z+1	; 0x01
    32e8:	81 30       	cpi	r24, 0x01	; 1
    32ea:	39 f4       	brne	.+14     	; 0x32fa <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    32ec:	a9 e5       	ldi	r26, 0x59	; 89
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	e9 e5       	ldi	r30, 0x59	; 89
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	80 68       	ori	r24, 0x80	; 128
    32f8:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
    32fa:	a5 e4       	ldi	r26, 0x45	; 69
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	e5 e4       	ldi	r30, 0x45	; 69
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	28 2f       	mov	r18, r24
    3306:	27 7b       	andi	r18, 0xB7	; 183
    3308:	e9 81       	ldd	r30, Y+1	; 0x01
    330a:	fa 81       	ldd	r31, Y+2	; 0x02
    330c:	81 81       	ldd	r24, Z+1	; 0x01
    330e:	88 2f       	mov	r24, r24
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	88 74       	andi	r24, 0x48	; 72
    3314:	90 70       	andi	r25, 0x00	; 0
    3316:	00 24       	eor	r0, r0
    3318:	96 95       	lsr	r25
    331a:	87 95       	ror	r24
    331c:	07 94       	ror	r0
    331e:	96 95       	lsr	r25
    3320:	87 95       	ror	r24
    3322:	07 94       	ror	r0
    3324:	98 2f       	mov	r25, r24
    3326:	80 2d       	mov	r24, r0
    3328:	82 2b       	or	r24, r18
    332a:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
    332c:	a5 e4       	ldi	r26, 0x45	; 69
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	e5 e4       	ldi	r30, 0x45	; 69
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	80 81       	ld	r24, Z
    3336:	28 2f       	mov	r18, r24
    3338:	2f 7c       	andi	r18, 0xCF	; 207
    333a:	e9 81       	ldd	r30, Y+1	; 0x01
    333c:	fa 81       	ldd	r31, Y+2	; 0x02
    333e:	82 81       	ldd	r24, Z+2	; 0x02
    3340:	88 2f       	mov	r24, r24
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	83 70       	andi	r24, 0x03	; 3
    3346:	90 70       	andi	r25, 0x00	; 0
    3348:	82 95       	swap	r24
    334a:	92 95       	swap	r25
    334c:	90 7f       	andi	r25, 0xF0	; 240
    334e:	98 27       	eor	r25, r24
    3350:	80 7f       	andi	r24, 0xF0	; 240
    3352:	98 27       	eor	r25, r24
    3354:	82 2b       	or	r24, r18
    3356:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
    3358:	a5 e4       	ldi	r26, 0x45	; 69
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e5 e4       	ldi	r30, 0x45	; 69
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	98 2f       	mov	r25, r24
    3364:	98 7f       	andi	r25, 0xF8	; 248
    3366:	e9 81       	ldd	r30, Y+1	; 0x01
    3368:	fa 81       	ldd	r31, Y+2	; 0x02
    336a:	80 81       	ld	r24, Z
    336c:	87 70       	andi	r24, 0x07	; 7
    336e:	89 2b       	or	r24, r25
    3370:	8c 93       	st	X, r24
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <Timer0_Stop>:

void Timer0_Stop()
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
    3384:	a3 e5       	ldi	r26, 0x53	; 83
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	e3 e5       	ldi	r30, 0x53	; 83
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	88 7f       	andi	r24, 0xF8	; 248
    3390:	8c 93       	st	X, r24
}
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	08 95       	ret

00003398 <Timer1_Stop>:

void Timer1_Stop(){
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
    33a0:	ae e4       	ldi	r26, 0x4E	; 78
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	ee e4       	ldi	r30, 0x4E	; 78
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	88 7f       	andi	r24, 0xF8	; 248
    33ac:	8c 93       	st	X, r24
}
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <Timer2_Stop>:

void Timer2_Stop(){
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
    33bc:	a5 e4       	ldi	r26, 0x45	; 69
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	e5 e4       	ldi	r30, 0x45	; 69
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	88 7f       	andi	r24, 0xF8	; 248
    33c8:	8c 93       	st	X, r24
}
    33ca:	cf 91       	pop	r28
    33cc:	df 91       	pop	r29
    33ce:	08 95       	ret

000033d0 <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
    33d0:	df 93       	push	r29
    33d2:	cf 93       	push	r28
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <Timer0_setCallBack+0x6>
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
    33da:	9a 83       	std	Y+2, r25	; 0x02
    33dc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	9a 81       	ldd	r25, Y+2	; 0x02
    33e2:	90 93 44 01 	sts	0x0144, r25
    33e6:	80 93 43 01 	sts	0x0143, r24
}
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	cf 91       	pop	r28
    33f0:	df 91       	pop	r29
    33f2:	08 95       	ret

000033f4 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    33f4:	df 93       	push	r29
    33f6:	cf 93       	push	r28
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <Timer1_setCallBack+0x6>
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	9a 81       	ldd	r25, Y+2	; 0x02
    3406:	90 93 46 01 	sts	0x0146, r25
    340a:	80 93 45 01 	sts	0x0145, r24
}
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	08 95       	ret

00003418 <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    3418:	df 93       	push	r29
    341a:	cf 93       	push	r28
    341c:	00 d0       	rcall	.+0      	; 0x341e <Timer2_setCallBack+0x6>
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	9a 83       	std	Y+2, r25	; 0x02
    3424:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	9a 81       	ldd	r25, Y+2	; 0x02
    342a:	90 93 48 01 	sts	0x0148, r25
    342e:	80 93 47 01 	sts	0x0147, r24
}
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate,const UART_configType * Config_Ptr)
{
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
    3444:	28 97       	sbiw	r28, 0x08	; 8
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	f8 94       	cli
    344a:	de bf       	out	0x3e, r29	; 62
    344c:	0f be       	out	0x3f, r0	; 63
    344e:	cd bf       	out	0x3d, r28	; 61
    3450:	6b 83       	std	Y+3, r22	; 0x03
    3452:	7c 83       	std	Y+4, r23	; 0x04
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	9e 83       	std	Y+6, r25	; 0x06
    3458:	58 87       	std	Y+8, r21	; 0x08
    345a:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    345c:	1a 82       	std	Y+2, r1	; 0x02
    345e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3460:	eb e2       	ldi	r30, 0x2B	; 43
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	82 e0       	ldi	r24, 0x02	; 2
    3466:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 5,6,7 or 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3468:	ea e2       	ldi	r30, 0x2A	; 42
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	88 e1       	ldi	r24, 0x18	; 24
    346e:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3470:	e0 e4       	ldi	r30, 0x40	; 64
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 e8       	ldi	r24, 0x80	; 128
    3476:	80 83       	st	Z, r24

	/*insert the required data bits value in the second and third UCSZ1:0*/

	UCSRC = (UCSRC&0XF9) | ((Config_Ptr->data_bits)<<1);
    3478:	a0 e4       	ldi	r26, 0x40	; 64
    347a:	b0 e0       	ldi	r27, 0x00	; 0
    347c:	e0 e4       	ldi	r30, 0x40	; 64
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	80 81       	ld	r24, Z
    3482:	28 2f       	mov	r18, r24
    3484:	29 7f       	andi	r18, 0xF9	; 249
    3486:	ef 81       	ldd	r30, Y+7	; 0x07
    3488:	f8 85       	ldd	r31, Y+8	; 0x08
    348a:	80 81       	ld	r24, Z
    348c:	88 2f       	mov	r24, r24
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	82 2b       	or	r24, r18
    3496:	8c 93       	st	X, r24

	/*insert the required parity in the fourth and fifth bits UPM1:0*/

	UCSRC = (UCSRC&0XCF) | ((Config_Ptr->parity)<<4);
    3498:	a0 e4       	ldi	r26, 0x40	; 64
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	e0 e4       	ldi	r30, 0x40	; 64
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	28 2f       	mov	r18, r24
    34a4:	2f 7c       	andi	r18, 0xCF	; 207
    34a6:	ef 81       	ldd	r30, Y+7	; 0x07
    34a8:	f8 85       	ldd	r31, Y+8	; 0x08
    34aa:	81 81       	ldd	r24, Z+1	; 0x01
    34ac:	88 2f       	mov	r24, r24
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	82 95       	swap	r24
    34b2:	92 95       	swap	r25
    34b4:	90 7f       	andi	r25, 0xF0	; 240
    34b6:	98 27       	eor	r25, r24
    34b8:	80 7f       	andi	r24, 0xF0	; 240
    34ba:	98 27       	eor	r25, r24
    34bc:	82 2b       	or	r24, r18
    34be:	8c 93       	st	X, r24

	/*insert the required stop bits in the third bit USBS*/

	UCSRC = (UCSRC&0XF7) | ((Config_Ptr->stop_bit)<<3);
    34c0:	a0 e4       	ldi	r26, 0x40	; 64
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	e0 e4       	ldi	r30, 0x40	; 64
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	28 2f       	mov	r18, r24
    34cc:	27 7f       	andi	r18, 0xF7	; 247
    34ce:	ef 81       	ldd	r30, Y+7	; 0x07
    34d0:	f8 85       	ldd	r31, Y+8	; 0x08
    34d2:	82 81       	ldd	r24, Z+2	; 0x02
    34d4:	88 2f       	mov	r24, r24
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	88 0f       	add	r24, r24
    34da:	99 1f       	adc	r25, r25
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	88 0f       	add	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	82 2b       	or	r24, r18
    34e6:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	ad 81       	ldd	r26, Y+5	; 0x05
    34ee:	be 81       	ldd	r27, Y+6	; 0x06
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	aa 1f       	adc	r26, r26
    34f6:	bb 1f       	adc	r27, r27
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	aa 1f       	adc	r26, r26
    34fe:	bb 1f       	adc	r27, r27
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	aa 1f       	adc	r26, r26
    3506:	bb 1f       	adc	r27, r27
    3508:	9c 01       	movw	r18, r24
    350a:	ad 01       	movw	r20, r26
    350c:	80 e4       	ldi	r24, 0x40	; 64
    350e:	92 e4       	ldi	r25, 0x42	; 66
    3510:	af e0       	ldi	r26, 0x0F	; 15
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	bc 01       	movw	r22, r24
    3516:	cd 01       	movw	r24, r26
    3518:	0e 94 39 1b 	call	0x3672	; 0x3672 <__udivmodsi4>
    351c:	da 01       	movw	r26, r20
    351e:	c9 01       	movw	r24, r18
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3526:	e0 e4       	ldi	r30, 0x40	; 64
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	9a 81       	ldd	r25, Y+2	; 0x02
    352e:	89 2f       	mov	r24, r25
    3530:	99 27       	eor	r25, r25
    3532:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3534:	e9 e2       	ldi	r30, 0x29	; 41
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	80 83       	st	Z, r24
}
    353c:	28 96       	adiw	r28, 0x08	; 8
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	cf 91       	pop	r28
    354a:	df 91       	pop	r29
    354c:	08 95       	ret

0000354e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	0f 92       	push	r0
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    355a:	eb e2       	ldi	r30, 0x2B	; 43
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	88 2f       	mov	r24, r24
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	80 72       	andi	r24, 0x20	; 32
    3566:	90 70       	andi	r25, 0x00	; 0
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	b9 f3       	breq	.-18     	; 0x355a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    356c:	ec e2       	ldi	r30, 0x2C	; 44
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3574:	0f 90       	pop	r0
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	08 95       	ret

0000357c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3584:	eb e2       	ldi	r30, 0x2B	; 43
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	88 23       	and	r24, r24
    358c:	dc f7       	brge	.-10     	; 0x3584 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    358e:	ec e2       	ldi	r30, 0x2C	; 44
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
}
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	00 d0       	rcall	.+0      	; 0x35a0 <UART_sendString+0x6>
    35a0:	0f 92       	push	r0
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	9b 83       	std	Y+3, r25	; 0x03
    35a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35aa:	19 82       	std	Y+1, r1	; 0x01
    35ac:	0e c0       	rjmp	.+28     	; 0x35ca <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	28 2f       	mov	r18, r24
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	8a 81       	ldd	r24, Y+2	; 0x02
    35b6:	9b 81       	ldd	r25, Y+3	; 0x03
    35b8:	fc 01       	movw	r30, r24
    35ba:	e2 0f       	add	r30, r18
    35bc:	f3 1f       	adc	r31, r19
    35be:	80 81       	ld	r24, Z
    35c0:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
		i++;
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	8f 5f       	subi	r24, 0xFF	; 255
    35c8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	28 2f       	mov	r18, r24
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	8a 81       	ldd	r24, Y+2	; 0x02
    35d2:	9b 81       	ldd	r25, Y+3	; 0x03
    35d4:	fc 01       	movw	r30, r24
    35d6:	e2 0f       	add	r30, r18
    35d8:	f3 1f       	adc	r31, r19
    35da:	80 81       	ld	r24, Z
    35dc:	88 23       	and	r24, r24
    35de:	39 f7       	brne	.-50     	; 0x35ae <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	df 93       	push	r29
    35f2:	cf 93       	push	r28
    35f4:	00 d0       	rcall	.+0      	; 0x35f6 <UART_receiveString+0xa>
    35f6:	0f 92       	push	r0
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	9b 83       	std	Y+3, r25	; 0x03
    35fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3600:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	28 2f       	mov	r18, r24
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	9b 81       	ldd	r25, Y+3	; 0x03
    360c:	8c 01       	movw	r16, r24
    360e:	02 0f       	add	r16, r18
    3610:	13 1f       	adc	r17, r19
    3612:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    3616:	f8 01       	movw	r30, r16
    3618:	80 83       	st	Z, r24
    361a:	0f c0       	rjmp	.+30     	; 0x363a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	8f 5f       	subi	r24, 0xFF	; 255
    3620:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	28 2f       	mov	r18, r24
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	9b 81       	ldd	r25, Y+3	; 0x03
    362c:	8c 01       	movw	r16, r24
    362e:	02 0f       	add	r16, r18
    3630:	13 1f       	adc	r17, r19
    3632:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    3636:	f8 01       	movw	r30, r16
    3638:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	28 2f       	mov	r18, r24
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	9b 81       	ldd	r25, Y+3	; 0x03
    3644:	fc 01       	movw	r30, r24
    3646:	e2 0f       	add	r30, r18
    3648:	f3 1f       	adc	r31, r19
    364a:	80 81       	ld	r24, Z
    364c:	83 32       	cpi	r24, 0x23	; 35
    364e:	31 f7       	brne	.-52     	; 0x361c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	28 2f       	mov	r18, r24
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	8a 81       	ldd	r24, Y+2	; 0x02
    3658:	9b 81       	ldd	r25, Y+3	; 0x03
    365a:	fc 01       	movw	r30, r24
    365c:	e2 0f       	add	r30, r18
    365e:	f3 1f       	adc	r31, r19
    3660:	10 82       	st	Z, r1
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	08 95       	ret

00003672 <__udivmodsi4>:
    3672:	a1 e2       	ldi	r26, 0x21	; 33
    3674:	1a 2e       	mov	r1, r26
    3676:	aa 1b       	sub	r26, r26
    3678:	bb 1b       	sub	r27, r27
    367a:	fd 01       	movw	r30, r26
    367c:	0d c0       	rjmp	.+26     	; 0x3698 <__udivmodsi4_ep>

0000367e <__udivmodsi4_loop>:
    367e:	aa 1f       	adc	r26, r26
    3680:	bb 1f       	adc	r27, r27
    3682:	ee 1f       	adc	r30, r30
    3684:	ff 1f       	adc	r31, r31
    3686:	a2 17       	cp	r26, r18
    3688:	b3 07       	cpc	r27, r19
    368a:	e4 07       	cpc	r30, r20
    368c:	f5 07       	cpc	r31, r21
    368e:	20 f0       	brcs	.+8      	; 0x3698 <__udivmodsi4_ep>
    3690:	a2 1b       	sub	r26, r18
    3692:	b3 0b       	sbc	r27, r19
    3694:	e4 0b       	sbc	r30, r20
    3696:	f5 0b       	sbc	r31, r21

00003698 <__udivmodsi4_ep>:
    3698:	66 1f       	adc	r22, r22
    369a:	77 1f       	adc	r23, r23
    369c:	88 1f       	adc	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	1a 94       	dec	r1
    36a2:	69 f7       	brne	.-38     	; 0x367e <__udivmodsi4_loop>
    36a4:	60 95       	com	r22
    36a6:	70 95       	com	r23
    36a8:	80 95       	com	r24
    36aa:	90 95       	com	r25
    36ac:	9b 01       	movw	r18, r22
    36ae:	ac 01       	movw	r20, r24
    36b0:	bd 01       	movw	r22, r26
    36b2:	cf 01       	movw	r24, r30
    36b4:	08 95       	ret

000036b6 <__prologue_saves__>:
    36b6:	2f 92       	push	r2
    36b8:	3f 92       	push	r3
    36ba:	4f 92       	push	r4
    36bc:	5f 92       	push	r5
    36be:	6f 92       	push	r6
    36c0:	7f 92       	push	r7
    36c2:	8f 92       	push	r8
    36c4:	9f 92       	push	r9
    36c6:	af 92       	push	r10
    36c8:	bf 92       	push	r11
    36ca:	cf 92       	push	r12
    36cc:	df 92       	push	r13
    36ce:	ef 92       	push	r14
    36d0:	ff 92       	push	r15
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    36d6:	cf 93       	push	r28
    36d8:	df 93       	push	r29
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
    36de:	ca 1b       	sub	r28, r26
    36e0:	db 0b       	sbc	r29, r27
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	09 94       	ijmp

000036ee <__epilogue_restores__>:
    36ee:	2a 88       	ldd	r2, Y+18	; 0x12
    36f0:	39 88       	ldd	r3, Y+17	; 0x11
    36f2:	48 88       	ldd	r4, Y+16	; 0x10
    36f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    36f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    36f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    36fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    36fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    36fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3700:	b9 84       	ldd	r11, Y+9	; 0x09
    3702:	c8 84       	ldd	r12, Y+8	; 0x08
    3704:	df 80       	ldd	r13, Y+7	; 0x07
    3706:	ee 80       	ldd	r14, Y+6	; 0x06
    3708:	fd 80       	ldd	r15, Y+5	; 0x05
    370a:	0c 81       	ldd	r16, Y+4	; 0x04
    370c:	1b 81       	ldd	r17, Y+3	; 0x03
    370e:	aa 81       	ldd	r26, Y+2	; 0x02
    3710:	b9 81       	ldd	r27, Y+1	; 0x01
    3712:	ce 0f       	add	r28, r30
    3714:	d1 1d       	adc	r29, r1
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	ed 01       	movw	r28, r26
    3722:	08 95       	ret

00003724 <itoa>:
    3724:	fb 01       	movw	r30, r22
    3726:	9f 01       	movw	r18, r30
    3728:	e8 94       	clt
    372a:	42 30       	cpi	r20, 0x02	; 2
    372c:	c4 f0       	brlt	.+48     	; 0x375e <itoa+0x3a>
    372e:	45 32       	cpi	r20, 0x25	; 37
    3730:	b4 f4       	brge	.+44     	; 0x375e <itoa+0x3a>
    3732:	4a 30       	cpi	r20, 0x0A	; 10
    3734:	29 f4       	brne	.+10     	; 0x3740 <itoa+0x1c>
    3736:	97 fb       	bst	r25, 7
    3738:	1e f4       	brtc	.+6      	; 0x3740 <itoa+0x1c>
    373a:	90 95       	com	r25
    373c:	81 95       	neg	r24
    373e:	9f 4f       	sbci	r25, 0xFF	; 255
    3740:	64 2f       	mov	r22, r20
    3742:	77 27       	eor	r23, r23
    3744:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__udivmodhi4>
    3748:	80 5d       	subi	r24, 0xD0	; 208
    374a:	8a 33       	cpi	r24, 0x3A	; 58
    374c:	0c f0       	brlt	.+2      	; 0x3750 <itoa+0x2c>
    374e:	89 5d       	subi	r24, 0xD9	; 217
    3750:	81 93       	st	Z+, r24
    3752:	cb 01       	movw	r24, r22
    3754:	00 97       	sbiw	r24, 0x00	; 0
    3756:	a1 f7       	brne	.-24     	; 0x3740 <itoa+0x1c>
    3758:	16 f4       	brtc	.+4      	; 0x375e <itoa+0x3a>
    375a:	5d e2       	ldi	r21, 0x2D	; 45
    375c:	51 93       	st	Z+, r21
    375e:	10 82       	st	Z, r1
    3760:	c9 01       	movw	r24, r18
    3762:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <strrev>

00003766 <strrev>:
    3766:	dc 01       	movw	r26, r24
    3768:	fc 01       	movw	r30, r24
    376a:	67 2f       	mov	r22, r23
    376c:	71 91       	ld	r23, Z+
    376e:	77 23       	and	r23, r23
    3770:	e1 f7       	brne	.-8      	; 0x376a <strrev+0x4>
    3772:	32 97       	sbiw	r30, 0x02	; 2
    3774:	04 c0       	rjmp	.+8      	; 0x377e <strrev+0x18>
    3776:	7c 91       	ld	r23, X
    3778:	6d 93       	st	X+, r22
    377a:	70 83       	st	Z, r23
    377c:	62 91       	ld	r22, -Z
    377e:	ae 17       	cp	r26, r30
    3780:	bf 07       	cpc	r27, r31
    3782:	c8 f3       	brcs	.-14     	; 0x3776 <strrev+0x10>
    3784:	08 95       	ret

00003786 <__udivmodhi4>:
    3786:	aa 1b       	sub	r26, r26
    3788:	bb 1b       	sub	r27, r27
    378a:	51 e1       	ldi	r21, 0x11	; 17
    378c:	07 c0       	rjmp	.+14     	; 0x379c <__udivmodhi4_ep>

0000378e <__udivmodhi4_loop>:
    378e:	aa 1f       	adc	r26, r26
    3790:	bb 1f       	adc	r27, r27
    3792:	a6 17       	cp	r26, r22
    3794:	b7 07       	cpc	r27, r23
    3796:	10 f0       	brcs	.+4      	; 0x379c <__udivmodhi4_ep>
    3798:	a6 1b       	sub	r26, r22
    379a:	b7 0b       	sbc	r27, r23

0000379c <__udivmodhi4_ep>:
    379c:	88 1f       	adc	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	5a 95       	dec	r21
    37a2:	a9 f7       	brne	.-22     	; 0x378e <__udivmodhi4_loop>
    37a4:	80 95       	com	r24
    37a6:	90 95       	com	r25
    37a8:	bc 01       	movw	r22, r24
    37aa:	cd 01       	movw	r24, r26
    37ac:	08 95       	ret

000037ae <_exit>:
    37ae:	f8 94       	cli

000037b0 <__stop_program>:
    37b0:	ff cf       	rjmp	.-2      	; 0x37b0 <__stop_program>
