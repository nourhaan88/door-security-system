
microcontroller2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002886  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002886  0000291a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800074  00800074  0000292e  2**0
                  ALLOC
  3 .stab         00002ab4  00000000  00000000  00002930  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001520  00000000  00000000  000053e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000087fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000096e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a498  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a885  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b053  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__vector_3>
      10:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__vector_6>
      1c:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__vector_7>
      20:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__vector_8>
      24:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 05 	call	0xb9c	; 0xb9c <main>
      8a:	0c 94 41 14 	jmp	0x2882	; 0x2882 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzer_init>:
#include "std_types.h"
#include "avr\io.h"

/*initialize the buzzer by making the buzzer pin output*/

void buzzer_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 34 0b 	call	0x1668	; 0x1668 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 1f 0c 	call	0x183e	; 0x183e <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <buzzer_on>:
/*turn on the buzzer*/
void buzzer_on(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTC,BUZZER_PIN_ID);
     b70:	a5 e3       	ldi	r26, 0x35	; 53
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e5 e3       	ldi	r30, 0x35	; 53
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	84 60       	ori	r24, 0x04	; 4
     b7c:	8c 93       	st	X, r24
}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <buzzer_off>:
 /*turn off the buzzer*/

void buzzer_off(void){
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	62 e0       	ldi	r22, 0x02	; 2
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	0e 94 1f 0c 	call	0x183e	; 0x183e <GPIO_writePin>

}
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <main>:
 */

#include "control_main.h"


int main (void){
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <main+0x6>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <main+0x8>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62

	SREG |= (1<<7);       /* Enable I-Bit for Interrupts */
     ba8:	af e5       	ldi	r26, 0x5F	; 95
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ef e5       	ldi	r30, 0x5F	; 95
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	80 68       	ori	r24, 0x80	; 128
     bb4:	8c 93       	st	X, r24

	/*baud rate = 9600*/
UART_init(9600,&uart_config);
     bb6:	28 e6       	ldi	r18, 0x68	; 104
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	60 e8       	ldi	r22, 0x80	; 128
     bbc:	75 e2       	ldi	r23, 0x25	; 37
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a9 01       	movw	r20, r18
     bc4:	0e 94 cd 12 	call	0x259a	; 0x259a <UART_init>




  while(1){
	  switch(recieveCommand()){
     bc8:	0e 94 4c 08 	call	0x1098	; 0x1098 <recieveCommand>
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	3c 83       	std	Y+4, r19	; 0x04
     bd2:	2b 83       	std	Y+3, r18	; 0x03
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	80 37       	cpi	r24, 0x70	; 112
     bda:	91 05       	cpc	r25, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <main+0x44>
     bde:	6c c0       	rjmp	.+216    	; 0xcb8 <main+0x11c>
     be0:	2b 81       	ldd	r18, Y+3	; 0x03
     be2:	3c 81       	ldd	r19, Y+4	; 0x04
     be4:	21 37       	cpi	r18, 0x71	; 113
     be6:	31 05       	cpc	r19, r1
     be8:	64 f4       	brge	.+24     	; 0xc02 <main+0x66>
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	80 35       	cpi	r24, 0x50	; 80
     bf0:	91 05       	cpc	r25, r1
     bf2:	b9 f1       	breq	.+110    	; 0xc62 <main+0xc6>
     bf4:	2b 81       	ldd	r18, Y+3	; 0x03
     bf6:	3c 81       	ldd	r19, Y+4	; 0x04
     bf8:	20 36       	cpi	r18, 0x60	; 96
     bfa:	31 05       	cpc	r19, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <main+0x64>
     bfe:	4c c0       	rjmp	.+152    	; 0xc98 <main+0xfc>
     c00:	e3 cf       	rjmp	.-58     	; 0xbc8 <main+0x2c>
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	8b 3b       	cpi	r24, 0xBB	; 187
     c08:	91 05       	cpc	r25, r1
     c0a:	81 f0       	breq	.+32     	; 0xc2c <main+0x90>
     c0c:	2b 81       	ldd	r18, Y+3	; 0x03
     c0e:	3c 81       	ldd	r19, Y+4	; 0x04
     c10:	2d 3d       	cpi	r18, 0xDD	; 221
     c12:	31 05       	cpc	r19, r1
     c14:	09 f4       	brne	.+2      	; 0xc18 <main+0x7c>
     c16:	43 c0       	rjmp	.+134    	; 0xc9e <main+0x102>
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	8a 3a       	cpi	r24, 0xAA	; 170
     c1e:	91 05       	cpc	r25, r1
     c20:	99 f6       	brne	.-90     	; 0xbc8 <main+0x2c>
	   case SEND_PASSWORD :
		   recievePassword(password_1);
     c22:	8c e7       	ldi	r24, 0x7C	; 124
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 80 06 	call	0xd00	; 0xd00 <recievePassword>
     c2a:	ce cf       	rjmp	.-100    	; 0xbc8 <main+0x2c>
		   break;
	   case PASSWORD_CONFIRMATION:
		   recievePassword(password_2);
     c2c:	87 e8       	ldi	r24, 0x87	; 135
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 80 06 	call	0xd00	; 0xd00 <recievePassword>
		   if(CheckMatching(password_1,password_2)){
     c34:	8c e7       	ldi	r24, 0x7C	; 124
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	27 e8       	ldi	r18, 0x87	; 135
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	b9 01       	movw	r22, r18
     c3e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <CheckMatching>
     c42:	88 23       	and	r24, r24
     c44:	51 f0       	breq	.+20     	; 0xc5a <main+0xbe>
			   storePasswordInMemory();
     c46:	0e 94 f4 06 	call	0xde8	; 0xde8 <storePasswordInMemory>
			   getSavedPassword(savedpass);
     c4a:	82 e8       	ldi	r24, 0x82	; 130
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 93 07 	call	0xf26	; 0xf26 <getSavedPassword>
			   sendCommand(MATCH);
     c52:	80 e1       	ldi	r24, 0x10	; 16
     c54:	0e 94 34 08 	call	0x1068	; 0x1068 <sendCommand>
     c58:	b7 cf       	rjmp	.-146    	; 0xbc8 <main+0x2c>
		   }
		   else {
			   sendCommand(MISMATCH);
     c5a:	80 e2       	ldi	r24, 0x20	; 32
     c5c:	0e 94 34 08 	call	0x1068	; 0x1068 <sendCommand>
     c60:	b3 cf       	rjmp	.-154    	; 0xbc8 <main+0x2c>
		   }
		   break;
	   case CHECK_PASSWORD :
		   recievePassword(password_1);
     c62:	8c e7       	ldi	r24, 0x7C	; 124
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 80 06 	call	0xd00	; 0xd00 <recievePassword>
		   getSavedPassword(savedpass);
     c6a:	82 e8       	ldi	r24, 0x82	; 130
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 93 07 	call	0xf26	; 0xf26 <getSavedPassword>
		    if(CheckMatching(password_1,savedpass)){
     c72:	8c e7       	ldi	r24, 0x7C	; 124
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	22 e8       	ldi	r18, 0x82	; 130
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	b9 01       	movw	r22, r18
     c7c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <CheckMatching>
     c80:	88 23       	and	r24, r24
     c82:	31 f0       	breq	.+12     	; 0xc90 <main+0xf4>
		    	sendCommand(MATCH);
     c84:	80 e1       	ldi	r24, 0x10	; 16
     c86:	0e 94 34 08 	call	0x1068	; 0x1068 <sendCommand>
		    	g_wrong=0;
     c8a:	10 92 75 00 	sts	0x0075, r1
     c8e:	9c cf       	rjmp	.-200    	; 0xbc8 <main+0x2c>
		    }
		    else {
		    	sendCommand(MISMATCH);
     c90:	80 e2       	ldi	r24, 0x20	; 32
     c92:	0e 94 34 08 	call	0x1068	; 0x1068 <sendCommand>
     c96:	98 cf       	rjmp	.-208    	; 0xbc8 <main+0x2c>

		    }
		    break;
	   case OPEN_DOOR :
		   DCmotorStartStop();
     c98:	0e 94 16 09 	call	0x122c	; 0x122c <DCmotorStartStop>
     c9c:	95 cf       	rjmp	.-214    	; 0xbc8 <main+0x2c>

		   //DCmotor_deinit();
		   break;
	   case WRONG_PASSWORD :
		   g_wrong++;
     c9e:	80 91 75 00 	lds	r24, 0x0075
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	80 93 75 00 	sts	0x0075, r24
		   			if(g_wrong==MAX_WRONG_ATTEMPT)
     ca8:	80 91 75 00 	lds	r24, 0x0075
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	09 f0       	breq	.+2      	; 0xcb2 <main+0x116>
     cb0:	8b cf       	rjmp	.-234    	; 0xbc8 <main+0x2c>
		   			{
		   				alarmStartStop();
     cb2:	0e 94 89 08 	call	0x1112	; 0x1112 <alarmStartStop>
     cb6:	88 cf       	rjmp	.-240    	; 0xbc8 <main+0x2c>
		   			}
		   			break;
	   case CHECK_IF_SAVED :
		   getSavedPassword(savedpass);
     cb8:	82 e8       	ldi	r24, 0x82	; 130
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 93 07 	call	0xf26	; 0xf26 <getSavedPassword>
		   			uint8 counter=0;
     cc0:	1a 82       	std	Y+2, r1	; 0x02
		   			for(uint8 i = 0 ; i < PASSWORD_ARRAY_SIZE; i++)
     cc2:	19 82       	std	Y+1, r1	; 0x01
     cc4:	0f c0       	rjmp	.+30     	; 0xce4 <main+0x148>
		   			{
		   				if(savedpass[i] == DEFUALT_VALUE_OF_EEPROM)
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	fc 01       	movw	r30, r24
     cce:	ee 57       	subi	r30, 0x7E	; 126
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	80 81       	ld	r24, Z
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	19 f4       	brne	.+6      	; 0xcde <main+0x142>
		   				{
		   					counter++;
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	8a 83       	std	Y+2, r24	; 0x02
		   			}
		   			break;
	   case CHECK_IF_SAVED :
		   getSavedPassword(savedpass);
		   			uint8 counter=0;
		   			for(uint8 i = 0 ; i < PASSWORD_ARRAY_SIZE; i++)
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	85 30       	cpi	r24, 0x05	; 5
     ce8:	70 f3       	brcs	.-36     	; 0xcc6 <main+0x12a>
		   				{
		   					counter++;
		   				}

		   			}
		   			if (counter==PASSWORD_ARRAY_SIZE)
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	85 30       	cpi	r24, 0x05	; 5
     cee:	21 f4       	brne	.+8      	; 0xcf8 <main+0x15c>
		   			{
		   				sendCommand(NOT_SAVED);
     cf0:	80 e9       	ldi	r24, 0x90	; 144
     cf2:	0e 94 34 08 	call	0x1068	; 0x1068 <sendCommand>
     cf6:	68 cf       	rjmp	.-304    	; 0xbc8 <main+0x2c>
		   			}
		   			else
		   			{
		   				sendCommand(YES_SAVED);
     cf8:	80 e8       	ldi	r24, 0x80	; 128
     cfa:	0e 94 34 08 	call	0x1068	; 0x1068 <sendCommand>
     cfe:	64 cf       	rjmp	.-312    	; 0xbc8 <main+0x2c>

00000d00 <recievePassword>:
 *
 * Arguments   : Array to fill
 *
 * Returns     : Void*/
void recievePassword(uint8 a_arr[])
{
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <recievePassword+0xa>
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <recievePassword+0xc>
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	9c 83       	std	Y+4, r25	; 0x04
     d12:	8b 83       	std	Y+3, r24	; 0x03
	while(UART_recieveByte() != MICRO_IS_READY){};
     d14:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_recieveByte>
     d18:	8f 3f       	cpi	r24, 0xFF	; 255
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <recievePassword+0x14>
	UART_sendByte(MICRO_IS_READY);
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_sendByte>
	for(int i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
     d22:	1a 82       	std	Y+2, r1	; 0x02
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	10 c0       	rjmp	.+32     	; 0xd48 <recievePassword+0x48>
		a_arr[i]=UART_recieveByte();
     d28:	29 81       	ldd	r18, Y+1	; 0x01
     d2a:	3a 81       	ldd	r19, Y+2	; 0x02
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	8c 01       	movw	r16, r24
     d32:	02 0f       	add	r16, r18
     d34:	13 1f       	adc	r17, r19
     d36:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_recieveByte>
     d3a:	f8 01       	movw	r30, r16
     d3c:	80 83       	st	Z, r24
 * Returns     : Void*/
void recievePassword(uint8 a_arr[])
{
	while(UART_recieveByte() != MICRO_IS_READY){};
	UART_sendByte(MICRO_IS_READY);
	for(int i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	85 30       	cpi	r24, 0x05	; 5
     d4e:	91 05       	cpc	r25, r1
     d50:	5c f3       	brlt	.-42     	; 0xd28 <recievePassword+0x28>
		a_arr[i]=UART_recieveByte();
	}
	UART_sendByte(MICRO_IS_DONE);
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_sendByte>
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	08 95       	ret

00000d6a <CheckMatching>:

uint8 CheckMatching(uint8 a_arr1[],uint8 a_arr2[])
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	27 97       	sbiw	r28, 0x07	; 7
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	8b 83       	std	Y+3, r24	; 0x03
     d82:	7e 83       	std	Y+6, r23	; 0x06
     d84:	6d 83       	std	Y+5, r22	; 0x05
	uint8 counter=0;
     d86:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++)
     d88:	19 82       	std	Y+1, r1	; 0x01
     d8a:	1a c0       	rjmp	.+52     	; 0xdc0 <CheckMatching+0x56>
	{
		if(a_arr1[i]==a_arr2[i]){
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	fc 01       	movw	r30, r24
     d98:	e2 0f       	add	r30, r18
     d9a:	f3 1f       	adc	r31, r19
     d9c:	40 81       	ld	r20, Z
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	fc 01       	movw	r30, r24
     daa:	e2 0f       	add	r30, r18
     dac:	f3 1f       	adc	r31, r19
     dae:	80 81       	ld	r24, Z
     db0:	48 17       	cp	r20, r24
     db2:	19 f4       	brne	.+6      	; 0xdba <CheckMatching+0x50>
			counter++;
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	8a 83       	std	Y+2, r24	; 0x02
}

uint8 CheckMatching(uint8 a_arr1[],uint8 a_arr2[])
{
	uint8 counter=0;
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++)
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	85 30       	cpi	r24, 0x05	; 5
     dc4:	18 f3       	brcs	.-58     	; 0xd8c <CheckMatching+0x22>
	{
		if(a_arr1[i]==a_arr2[i]){
			counter++;
		}
	}
	if(counter==PASSWORD_ARRAY_SIZE){
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	85 30       	cpi	r24, 0x05	; 5
     dca:	19 f4       	brne	.+6      	; 0xdd2 <CheckMatching+0x68>
		return TRUE;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	8f 83       	std	Y+7, r24	; 0x07
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <CheckMatching+0x6a>
	}
	else{
		return FALSE;
     dd2:	1f 82       	std	Y+7, r1	; 0x07
     dd4:	8f 81       	ldd	r24, Y+7	; 0x07
	}
}
     dd6:	27 96       	adiw	r28, 0x07	; 7
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <storePasswordInMemory>:

void storePasswordInMemory(void)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	2f 97       	sbiw	r28, 0x0f	; 15
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61


	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++){
     dfc:	1f 86       	std	Y+15, r1	; 0x0f
     dfe:	86 c0       	rjmp	.+268    	; 0xf0c <storePasswordInMemory+0x124>
		EEPROM_writeByte(0x0311+i,password_1[i]);
     e00:	8f 85       	ldd	r24, Y+15	; 0x0f
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	8f 5e       	subi	r24, 0xEF	; 239
     e08:	9c 4f       	sbci	r25, 0xFC	; 252
     e0a:	ac 01       	movw	r20, r24
     e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	fc 01       	movw	r30, r24
     e14:	e4 58       	subi	r30, 0x84	; 132
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	20 81       	ld	r18, Z
     e1a:	ca 01       	movw	r24, r20
     e1c:	62 2f       	mov	r22, r18
     e1e:	0e 94 89 0a 	call	0x1512	; 0x1512 <EEPROM_writeByte>
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	aa e7       	ldi	r26, 0x7A	; 122
     e28:	b3 e4       	ldi	r27, 0x43	; 67
     e2a:	8b 87       	std	Y+11, r24	; 0x0b
     e2c:	9c 87       	std	Y+12, r25	; 0x0c
     e2e:	ad 87       	std	Y+13, r26	; 0x0d
     e30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e32:	6b 85       	ldd	r22, Y+11	; 0x0b
     e34:	7c 85       	ldd	r23, Y+12	; 0x0c
     e36:	8d 85       	ldd	r24, Y+13	; 0x0d
     e38:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	4a e7       	ldi	r20, 0x7A	; 122
     e40:	53 e4       	ldi	r21, 0x43	; 67
     e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	8f 83       	std	Y+7, r24	; 0x07
     e4c:	98 87       	std	Y+8, r25	; 0x08
     e4e:	a9 87       	std	Y+9, r26	; 0x09
     e50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e66:	88 23       	and	r24, r24
     e68:	2c f4       	brge	.+10     	; 0xe74 <storePasswordInMemory+0x8c>
		__ticks = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9e 83       	std	Y+6, r25	; 0x06
     e70:	8d 83       	std	Y+5, r24	; 0x05
     e72:	3f c0       	rjmp	.+126    	; 0xef2 <storePasswordInMemory+0x10a>
	else if (__tmp > 65535)
     e74:	6f 81       	ldd	r22, Y+7	; 0x07
     e76:	78 85       	ldd	r23, Y+8	; 0x08
     e78:	89 85       	ldd	r24, Y+9	; 0x09
     e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	4f e7       	ldi	r20, 0x7F	; 127
     e82:	57 e4       	ldi	r21, 0x47	; 71
     e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e88:	18 16       	cp	r1, r24
     e8a:	4c f5       	brge	.+82     	; 0xede <storePasswordInMemory+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e90:	8d 85       	ldd	r24, Y+13	; 0x0d
     e92:	9e 85       	ldd	r25, Y+14	; 0x0e
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e2       	ldi	r20, 0x20	; 32
     e9a:	51 e4       	ldi	r21, 0x41	; 65
     e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	bc 01       	movw	r22, r24
     ea6:	cd 01       	movw	r24, r26
     ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	9e 83       	std	Y+6, r25	; 0x06
     eb2:	8d 83       	std	Y+5, r24	; 0x05
     eb4:	0f c0       	rjmp	.+30     	; 0xed4 <storePasswordInMemory+0xec>
     eb6:	89 e1       	ldi	r24, 0x19	; 25
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	9c 83       	std	Y+4, r25	; 0x04
     ebc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	9c 81       	ldd	r25, Y+4	; 0x04
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <storePasswordInMemory+0xda>
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	9e 81       	ldd	r25, Y+6	; 0x06
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	69 f7       	brne	.-38     	; 0xeb6 <storePasswordInMemory+0xce>
     edc:	14 c0       	rjmp	.+40     	; 0xf06 <storePasswordInMemory+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ede:	6f 81       	ldd	r22, Y+7	; 0x07
     ee0:	78 85       	ldd	r23, Y+8	; 0x08
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <storePasswordInMemory+0x116>
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01

void storePasswordInMemory(void)
{


	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++){
     f06:	8f 85       	ldd	r24, Y+15	; 0x0f
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	8f 87       	std	Y+15, r24	; 0x0f
     f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0e:	85 30       	cpi	r24, 0x05	; 5
     f10:	08 f4       	brcc	.+2      	; 0xf14 <storePasswordInMemory+0x12c>
     f12:	76 cf       	rjmp	.-276    	; 0xe00 <storePasswordInMemory+0x18>
		EEPROM_writeByte(0x0311+i,password_1[i]);
		_delay_ms(250);
	}

}
     f14:	2f 96       	adiw	r28, 0x0f	; 15
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <getSavedPassword>:

void getSavedPassword(uint8 a_arr[])
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	61 97       	sbiw	r28, 0x11	; 17
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	99 8b       	std	Y+17, r25	; 0x11
     f3c:	88 8b       	std	Y+16, r24	; 0x10

	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
     f3e:	1f 86       	std	Y+15, r1	; 0x0f
     f40:	86 c0       	rjmp	.+268    	; 0x104e <getSavedPassword+0x128>
		EEPROM_readByte(0x0311+i, &a_arr[i]);
     f42:	8f 85       	ldd	r24, Y+15	; 0x0f
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8f 5e       	subi	r24, 0xEF	; 239
     f4a:	9c 4f       	sbci	r25, 0xFC	; 252
     f4c:	ac 01       	movw	r20, r24
     f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	88 89       	ldd	r24, Y+16	; 0x10
     f56:	99 89       	ldd	r25, Y+17	; 0x11
     f58:	28 0f       	add	r18, r24
     f5a:	39 1f       	adc	r19, r25
     f5c:	ca 01       	movw	r24, r20
     f5e:	b9 01       	movw	r22, r18
     f60:	0e 94 cf 0a 	call	0x159e	; 0x159e <EEPROM_readByte>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	aa e7       	ldi	r26, 0x7A	; 122
     f6a:	b4 e4       	ldi	r27, 0x44	; 68
     f6c:	8b 87       	std	Y+11, r24	; 0x0b
     f6e:	9c 87       	std	Y+12, r25	; 0x0c
     f70:	ad 87       	std	Y+13, r26	; 0x0d
     f72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f74:	6b 85       	ldd	r22, Y+11	; 0x0b
     f76:	7c 85       	ldd	r23, Y+12	; 0x0c
     f78:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	4a e7       	ldi	r20, 0x7A	; 122
     f82:	53 e4       	ldi	r21, 0x43	; 67
     f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	8f 83       	std	Y+7, r24	; 0x07
     f8e:	98 87       	std	Y+8, r25	; 0x08
     f90:	a9 87       	std	Y+9, r26	; 0x09
     f92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f94:	6f 81       	ldd	r22, Y+7	; 0x07
     f96:	78 85       	ldd	r23, Y+8	; 0x08
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	5f e3       	ldi	r21, 0x3F	; 63
     fa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa8:	88 23       	and	r24, r24
     faa:	2c f4       	brge	.+10     	; 0xfb6 <getSavedPassword+0x90>
		__ticks = 1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	3f c0       	rjmp	.+126    	; 0x1034 <getSavedPassword+0x10e>
	else if (__tmp > 65535)
     fb6:	6f 81       	ldd	r22, Y+7	; 0x07
     fb8:	78 85       	ldd	r23, Y+8	; 0x08
     fba:	89 85       	ldd	r24, Y+9	; 0x09
     fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	3f ef       	ldi	r19, 0xFF	; 255
     fc2:	4f e7       	ldi	r20, 0x7F	; 127
     fc4:	57 e4       	ldi	r21, 0x47	; 71
     fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fca:	18 16       	cp	r1, r24
     fcc:	4c f5       	brge	.+82     	; 0x1020 <getSavedPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fce:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e2       	ldi	r20, 0x20	; 32
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <getSavedPassword+0xf0>
     ff8:	89 e1       	ldi	r24, 0x19	; 25
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <getSavedPassword+0xde>
    1008:	9c 83       	std	Y+4, r25	; 0x04
    100a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	9e 83       	std	Y+6, r25	; 0x06
    1014:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	69 f7       	brne	.-38     	; 0xff8 <getSavedPassword+0xd2>
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <getSavedPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1020:	6f 81       	ldd	r22, Y+7	; 0x07
    1022:	78 85       	ldd	r23, Y+8	; 0x08
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	9e 83       	std	Y+6, r25	; 0x06
    1032:	8d 83       	std	Y+5, r24	; 0x05
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <getSavedPassword+0x11a>
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
}

void getSavedPassword(uint8 a_arr[])
{

	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
    1048:	8f 85       	ldd	r24, Y+15	; 0x0f
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	8f 87       	std	Y+15, r24	; 0x0f
    104e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1050:	85 30       	cpi	r24, 0x05	; 5
    1052:	08 f4       	brcc	.+2      	; 0x1056 <getSavedPassword+0x130>
    1054:	76 cf       	rjmp	.-276    	; 0xf42 <getSavedPassword+0x1c>
		EEPROM_readByte(0x0311+i, &a_arr[i]);
		_delay_ms(1000);
	}
}
    1056:	61 96       	adiw	r28, 0x11	; 17
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <sendCommand>:
 * Arguments  : the command to be sent
 *
 * Returns    : Void*/

void sendCommand(uint8 command)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01


	UART_sendByte(MICRO_IS_READY);
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_sendByte>
	while(UART_recieveByte() != MICRO_IS_READY){};
    107a:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_recieveByte>
    107e:	8f 3f       	cpi	r24, 0xFF	; 255
    1080:	e1 f7       	brne	.-8      	; 0x107a <sendCommand+0x12>
	UART_sendByte(command);
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_sendByte>
	while(UART_recieveByte() != MICRO_IS_DONE){};
    1088:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_recieveByte>
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	e1 f7       	brne	.-8      	; 0x1088 <sendCommand+0x20>

}
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <recieveCommand>:
 * Arguments  : the command to be sent
 *
 * Returns    : Void*/

uint8 recieveCommand(void)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != MICRO_IS_READY){};
    10a0:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_recieveByte>
    10a4:	8f 3f       	cpi	r24, 0xFF	; 255
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <recieveCommand+0x8>
	UART_sendByte(MICRO_IS_READY);
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_sendByte>
	command=UART_recieveByte();
    10ae:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_recieveByte>
    10b2:	80 93 81 00 	sts	0x0081, r24
	UART_sendByte(MICRO_IS_DONE);
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_sendByte>
	return command;
    10bc:	80 91 81 00 	lds	r24, 0x0081
}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <g_tickCounterMotor>:
 * Arguments  : None
 *
 * Returns    : Void */

void g_tickCounterMotor(void)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    10ce:	80 91 74 00 	lds	r24, 0x0074
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	80 93 74 00 	sts	0x0074, r24

	if(g_tick==TIMER_TICKS_30SEC)
    10d8:	80 91 74 00 	lds	r24, 0x0074
    10dc:	88 37       	cpi	r24, 0x78	; 120
    10de:	21 f4       	brne	.+8      	; 0x10e8 <g_tickCounterMotor+0x22>
	{

		DCmotor_deinit();
    10e0:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DCmotor_deinit>
		g_tick=0;
    10e4:	10 92 74 00 	sts	0x0074, r1
	}
}
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <g_tickCounterAlarm>:
 * Arguments  : None
 *
 * Returns    : Void */

void g_tickCounterAlarm(void)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    10f6:	80 91 74 00 	lds	r24, 0x0074
    10fa:	8f 5f       	subi	r24, 0xFF	; 255
    10fc:	80 93 74 00 	sts	0x0074, r24
	if(g_tick == TIMER_TICKS_1MINUTE_STOP)
    1100:	80 91 74 00 	lds	r24, 0x0074
    1104:	80 3f       	cpi	r24, 0xF0	; 240
    1106:	11 f4       	brne	.+4      	; 0x110c <g_tickCounterAlarm+0x1e>
	{

		g_tick=0;
    1108:	10 92 74 00 	sts	0x0074, r1

	}
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <alarmStartStop>:

void alarmStartStop(void){
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	2e 97       	sbiw	r28, 0x0e	; 14
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
	buzzer_init();
    1126:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzer_init>

	buzzer_on();
    112a:	0e 94 b4 05 	call	0xb68	; 0xb68 <buzzer_on>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e6       	ldi	r25, 0x60	; 96
    1132:	aa e6       	ldi	r26, 0x6A	; 106
    1134:	b7 e4       	ldi	r27, 0x47	; 71
    1136:	8b 87       	std	Y+11, r24	; 0x0b
    1138:	9c 87       	std	Y+12, r25	; 0x0c
    113a:	ad 87       	std	Y+13, r26	; 0x0d
    113c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1140:	7c 85       	ldd	r23, Y+12	; 0x0c
    1142:	8d 85       	ldd	r24, Y+13	; 0x0d
    1144:	9e 85       	ldd	r25, Y+14	; 0x0e
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	4a e7       	ldi	r20, 0x7A	; 122
    114c:	53 e4       	ldi	r21, 0x43	; 67
    114e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	8f 83       	std	Y+7, r24	; 0x07
    1158:	98 87       	std	Y+8, r25	; 0x08
    115a:	a9 87       	std	Y+9, r26	; 0x09
    115c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    115e:	6f 81       	ldd	r22, Y+7	; 0x07
    1160:	78 85       	ldd	r23, Y+8	; 0x08
    1162:	89 85       	ldd	r24, Y+9	; 0x09
    1164:	9a 85       	ldd	r25, Y+10	; 0x0a
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e8       	ldi	r20, 0x80	; 128
    116c:	5f e3       	ldi	r21, 0x3F	; 63
    116e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1172:	88 23       	and	r24, r24
    1174:	2c f4       	brge	.+10     	; 0x1180 <alarmStartStop+0x6e>
		__ticks = 1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	3f c0       	rjmp	.+126    	; 0x11fe <alarmStartStop+0xec>
	else if (__tmp > 65535)
    1180:	6f 81       	ldd	r22, Y+7	; 0x07
    1182:	78 85       	ldd	r23, Y+8	; 0x08
    1184:	89 85       	ldd	r24, Y+9	; 0x09
    1186:	9a 85       	ldd	r25, Y+10	; 0x0a
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	3f ef       	ldi	r19, 0xFF	; 255
    118c:	4f e7       	ldi	r20, 0x7F	; 127
    118e:	57 e4       	ldi	r21, 0x47	; 71
    1190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1194:	18 16       	cp	r1, r24
    1196:	4c f5       	brge	.+82     	; 0x11ea <alarmStartStop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1198:	6b 85       	ldd	r22, Y+11	; 0x0b
    119a:	7c 85       	ldd	r23, Y+12	; 0x0c
    119c:	8d 85       	ldd	r24, Y+13	; 0x0d
    119e:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e2       	ldi	r20, 0x20	; 32
    11a6:	51 e4       	ldi	r21, 0x41	; 65
    11a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	9e 83       	std	Y+6, r25	; 0x06
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	0f c0       	rjmp	.+30     	; 0x11e0 <alarmStartStop+0xce>
    11c2:	89 e1       	ldi	r24, 0x19	; 25
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	9c 83       	std	Y+4, r25	; 0x04
    11c8:	8b 83       	std	Y+3, r24	; 0x03
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <alarmStartStop+0xbc>
    11d2:	9c 83       	std	Y+4, r25	; 0x04
    11d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	9e 83       	std	Y+6, r25	; 0x06
    11de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	69 f7       	brne	.-38     	; 0x11c2 <alarmStartStop+0xb0>
    11e8:	14 c0       	rjmp	.+40     	; 0x1212 <alarmStartStop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ea:	6f 81       	ldd	r22, Y+7	; 0x07
    11ec:	78 85       	ldd	r23, Y+8	; 0x08
    11ee:	89 85       	ldd	r24, Y+9	; 0x09
    11f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <alarmStartStop+0xf8>
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(60000);

	g_wrong=0;
    1212:	10 92 75 00 	sts	0x0075, r1
	buzzer_off();
    1216:	0e 94 c2 05 	call	0xb84	; 0xb84 <buzzer_off>

}
    121a:	2e 96       	adiw	r28, 0x0e	; 14
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <DCmotorStartStop>:

void DCmotorStartStop(void){
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	aa 97       	sbiw	r28, 0x2a	; 42
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
	 DCmotor_init();
    1240:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DCmotor_init>

	 DCmotor_Rotate_CW();
    1244:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DCmotor_Rotate_CW>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e6       	ldi	r25, 0x60	; 96
    124c:	aa e6       	ldi	r26, 0x6A	; 106
    124e:	b6 e4       	ldi	r27, 0x46	; 70
    1250:	8f a3       	std	Y+39, r24	; 0x27
    1252:	98 a7       	std	Y+40, r25	; 0x28
    1254:	a9 a7       	std	Y+41, r26	; 0x29
    1256:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1258:	6f a1       	ldd	r22, Y+39	; 0x27
    125a:	78 a5       	ldd	r23, Y+40	; 0x28
    125c:	89 a5       	ldd	r24, Y+41	; 0x29
    125e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	4a e7       	ldi	r20, 0x7A	; 122
    1266:	53 e4       	ldi	r21, 0x43	; 67
    1268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	8b a3       	std	Y+35, r24	; 0x23
    1272:	9c a3       	std	Y+36, r25	; 0x24
    1274:	ad a3       	std	Y+37, r26	; 0x25
    1276:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1278:	6b a1       	ldd	r22, Y+35	; 0x23
    127a:	7c a1       	ldd	r23, Y+36	; 0x24
    127c:	8d a1       	ldd	r24, Y+37	; 0x25
    127e:	9e a1       	ldd	r25, Y+38	; 0x26
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e8       	ldi	r20, 0x80	; 128
    1286:	5f e3       	ldi	r21, 0x3F	; 63
    1288:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    128c:	88 23       	and	r24, r24
    128e:	2c f4       	brge	.+10     	; 0x129a <DCmotorStartStop+0x6e>
		__ticks = 1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9a a3       	std	Y+34, r25	; 0x22
    1296:	89 a3       	std	Y+33, r24	; 0x21
    1298:	3f c0       	rjmp	.+126    	; 0x1318 <DCmotorStartStop+0xec>
	else if (__tmp > 65535)
    129a:	6b a1       	ldd	r22, Y+35	; 0x23
    129c:	7c a1       	ldd	r23, Y+36	; 0x24
    129e:	8d a1       	ldd	r24, Y+37	; 0x25
    12a0:	9e a1       	ldd	r25, Y+38	; 0x26
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	4f e7       	ldi	r20, 0x7F	; 127
    12a8:	57 e4       	ldi	r21, 0x47	; 71
    12aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ae:	18 16       	cp	r1, r24
    12b0:	4c f5       	brge	.+82     	; 0x1304 <DCmotorStartStop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b2:	6f a1       	ldd	r22, Y+39	; 0x27
    12b4:	78 a5       	ldd	r23, Y+40	; 0x28
    12b6:	89 a5       	ldd	r24, Y+41	; 0x29
    12b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e2       	ldi	r20, 0x20	; 32
    12c0:	51 e4       	ldi	r21, 0x41	; 65
    12c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	bc 01       	movw	r22, r24
    12cc:	cd 01       	movw	r24, r26
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9a a3       	std	Y+34, r25	; 0x22
    12d8:	89 a3       	std	Y+33, r24	; 0x21
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <DCmotorStartStop+0xce>
    12dc:	89 e1       	ldi	r24, 0x19	; 25
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	98 a3       	std	Y+32, r25	; 0x20
    12e2:	8f 8f       	std	Y+31, r24	; 0x1f
    12e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12e6:	98 a1       	ldd	r25, Y+32	; 0x20
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <DCmotorStartStop+0xbc>
    12ec:	98 a3       	std	Y+32, r25	; 0x20
    12ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f0:	89 a1       	ldd	r24, Y+33	; 0x21
    12f2:	9a a1       	ldd	r25, Y+34	; 0x22
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	9a a3       	std	Y+34, r25	; 0x22
    12f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fa:	89 a1       	ldd	r24, Y+33	; 0x21
    12fc:	9a a1       	ldd	r25, Y+34	; 0x22
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	69 f7       	brne	.-38     	; 0x12dc <DCmotorStartStop+0xb0>
    1302:	14 c0       	rjmp	.+40     	; 0x132c <DCmotorStartStop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1304:	6b a1       	ldd	r22, Y+35	; 0x23
    1306:	7c a1       	ldd	r23, Y+36	; 0x24
    1308:	8d a1       	ldd	r24, Y+37	; 0x25
    130a:	9e a1       	ldd	r25, Y+38	; 0x26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9a a3       	std	Y+34, r25	; 0x22
    1316:	89 a3       	std	Y+33, r24	; 0x21
    1318:	89 a1       	ldd	r24, Y+33	; 0x21
    131a:	9a a1       	ldd	r25, Y+34	; 0x22
    131c:	9e 8f       	std	Y+30, r25	; 0x1e
    131e:	8d 8f       	std	Y+29, r24	; 0x1d
    1320:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1322:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <DCmotorStartStop+0xf8>
    1328:	9e 8f       	std	Y+30, r25	; 0x1e
    132a:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(15000);

	  DCmotor_deinit();
    132c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DCmotor_deinit>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	aa ef       	ldi	r26, 0xFA	; 250
    1336:	b4 e4       	ldi	r27, 0x44	; 68
    1338:	89 8f       	std	Y+25, r24	; 0x19
    133a:	9a 8f       	std	Y+26, r25	; 0x1a
    133c:	ab 8f       	std	Y+27, r26	; 0x1b
    133e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1340:	69 8d       	ldd	r22, Y+25	; 0x19
    1342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4a e7       	ldi	r20, 0x7A	; 122
    134e:	53 e4       	ldi	r21, 0x43	; 67
    1350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	8d 8b       	std	Y+21, r24	; 0x15
    135a:	9e 8b       	std	Y+22, r25	; 0x16
    135c:	af 8b       	std	Y+23, r26	; 0x17
    135e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1360:	6d 89       	ldd	r22, Y+21	; 0x15
    1362:	7e 89       	ldd	r23, Y+22	; 0x16
    1364:	8f 89       	ldd	r24, Y+23	; 0x17
    1366:	98 8d       	ldd	r25, Y+24	; 0x18
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1374:	88 23       	and	r24, r24
    1376:	2c f4       	brge	.+10     	; 0x1382 <DCmotorStartStop+0x156>
		__ticks = 1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	9c 8b       	std	Y+20, r25	; 0x14
    137e:	8b 8b       	std	Y+19, r24	; 0x13
    1380:	3f c0       	rjmp	.+126    	; 0x1400 <DCmotorStartStop+0x1d4>
	else if (__tmp > 65535)
    1382:	6d 89       	ldd	r22, Y+21	; 0x15
    1384:	7e 89       	ldd	r23, Y+22	; 0x16
    1386:	8f 89       	ldd	r24, Y+23	; 0x17
    1388:	98 8d       	ldd	r25, Y+24	; 0x18
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	3f ef       	ldi	r19, 0xFF	; 255
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	57 e4       	ldi	r21, 0x47	; 71
    1392:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1396:	18 16       	cp	r1, r24
    1398:	4c f5       	brge	.+82     	; 0x13ec <DCmotorStartStop+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139a:	69 8d       	ldd	r22, Y+25	; 0x19
    139c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    139e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9c 8b       	std	Y+20, r25	; 0x14
    13c0:	8b 8b       	std	Y+19, r24	; 0x13
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <DCmotorStartStop+0x1b6>
    13c4:	89 e1       	ldi	r24, 0x19	; 25
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9a 8b       	std	Y+18, r25	; 0x12
    13ca:	89 8b       	std	Y+17, r24	; 0x11
    13cc:	89 89       	ldd	r24, Y+17	; 0x11
    13ce:	9a 89       	ldd	r25, Y+18	; 0x12
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <DCmotorStartStop+0x1a4>
    13d4:	9a 8b       	std	Y+18, r25	; 0x12
    13d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d8:	8b 89       	ldd	r24, Y+19	; 0x13
    13da:	9c 89       	ldd	r25, Y+20	; 0x14
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	9c 8b       	std	Y+20, r25	; 0x14
    13e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e2:	8b 89       	ldd	r24, Y+19	; 0x13
    13e4:	9c 89       	ldd	r25, Y+20	; 0x14
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	69 f7       	brne	.-38     	; 0x13c4 <DCmotorStartStop+0x198>
    13ea:	14 c0       	rjmp	.+40     	; 0x1414 <DCmotorStartStop+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ec:	6d 89       	ldd	r22, Y+21	; 0x15
    13ee:	7e 89       	ldd	r23, Y+22	; 0x16
    13f0:	8f 89       	ldd	r24, Y+23	; 0x17
    13f2:	98 8d       	ldd	r25, Y+24	; 0x18
    13f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	9c 8b       	std	Y+20, r25	; 0x14
    13fe:	8b 8b       	std	Y+19, r24	; 0x13
    1400:	8b 89       	ldd	r24, Y+19	; 0x13
    1402:	9c 89       	ldd	r25, Y+20	; 0x14
    1404:	98 8b       	std	Y+16, r25	; 0x10
    1406:	8f 87       	std	Y+15, r24	; 0x0f
    1408:	8f 85       	ldd	r24, Y+15	; 0x0f
    140a:	98 89       	ldd	r25, Y+16	; 0x10
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <DCmotorStartStop+0x1e0>
    1410:	98 8b       	std	Y+16, r25	; 0x10
    1412:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(2000);

	DCmotor_Rotate_A_CW();
    1414:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <DCmotor_Rotate_A_CW>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e6       	ldi	r25, 0x60	; 96
    141c:	aa e6       	ldi	r26, 0x6A	; 106
    141e:	b6 e4       	ldi	r27, 0x46	; 70
    1420:	8b 87       	std	Y+11, r24	; 0x0b
    1422:	9c 87       	std	Y+12, r25	; 0x0c
    1424:	ad 87       	std	Y+13, r26	; 0x0d
    1426:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1428:	6b 85       	ldd	r22, Y+11	; 0x0b
    142a:	7c 85       	ldd	r23, Y+12	; 0x0c
    142c:	8d 85       	ldd	r24, Y+13	; 0x0d
    142e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	4a e7       	ldi	r20, 0x7A	; 122
    1436:	53 e4       	ldi	r21, 0x43	; 67
    1438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	8f 83       	std	Y+7, r24	; 0x07
    1442:	98 87       	std	Y+8, r25	; 0x08
    1444:	a9 87       	std	Y+9, r26	; 0x09
    1446:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1448:	6f 81       	ldd	r22, Y+7	; 0x07
    144a:	78 85       	ldd	r23, Y+8	; 0x08
    144c:	89 85       	ldd	r24, Y+9	; 0x09
    144e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f e3       	ldi	r21, 0x3F	; 63
    1458:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    145c:	88 23       	and	r24, r24
    145e:	2c f4       	brge	.+10     	; 0x146a <DCmotorStartStop+0x23e>
		__ticks = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	3f c0       	rjmp	.+126    	; 0x14e8 <DCmotorStartStop+0x2bc>
	else if (__tmp > 65535)
    146a:	6f 81       	ldd	r22, Y+7	; 0x07
    146c:	78 85       	ldd	r23, Y+8	; 0x08
    146e:	89 85       	ldd	r24, Y+9	; 0x09
    1470:	9a 85       	ldd	r25, Y+10	; 0x0a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    1476:	4f e7       	ldi	r20, 0x7F	; 127
    1478:	57 e4       	ldi	r21, 0x47	; 71
    147a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    147e:	18 16       	cp	r1, r24
    1480:	4c f5       	brge	.+82     	; 0x14d4 <DCmotorStartStop+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1482:	6b 85       	ldd	r22, Y+11	; 0x0b
    1484:	7c 85       	ldd	r23, Y+12	; 0x0c
    1486:	8d 85       	ldd	r24, Y+13	; 0x0d
    1488:	9e 85       	ldd	r25, Y+14	; 0x0e
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <DCmotorStartStop+0x29e>
    14ac:	89 e1       	ldi	r24, 0x19	; 25
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <DCmotorStartStop+0x28c>
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	69 f7       	brne	.-38     	; 0x14ac <DCmotorStartStop+0x280>
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <DCmotorStartStop+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	9e 83       	std	Y+6, r25	; 0x06
    14e6:	8d 83       	std	Y+5, r24	; 0x05
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	9a 83       	std	Y+2, r25	; 0x02
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <DCmotorStartStop+0x2c8>
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15000);

	DCmotor_deinit();
    14fc:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DCmotor_deinit>

}
    1500:	aa 96       	adiw	r28, 0x2a	; 42
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <EEPROM_writeByte+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <EEPROM_writeByte+0x8>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	6b 83       	std	Y+3, r22	; 0x03
	TWI_init(0b00000010,0);
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	0e 94 31 12 	call	0x2462	; 0x2462 <TWI_init>
	/* Send the Start Bit */
    TWI_start();
    152e:	0e 94 66 12 	call	0x24cc	; 0x24cc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1532:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    1536:	88 30       	cpi	r24, 0x08	; 8
    1538:	11 f0       	breq	.+4      	; 0x153e <EEPROM_writeByte+0x2c>
        return ERROR;
    153a:	1c 82       	std	Y+4, r1	; 0x04
    153c:	28 c0       	rjmp	.+80     	; 0x158e <EEPROM_writeByte+0x7c>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	80 70       	andi	r24, 0x00	; 0
    1544:	97 70       	andi	r25, 0x07	; 7
    1546:	88 0f       	add	r24, r24
    1548:	89 2f       	mov	r24, r25
    154a:	88 1f       	adc	r24, r24
    154c:	99 0b       	sbc	r25, r25
    154e:	91 95       	neg	r25
    1550:	80 6a       	ori	r24, 0xA0	; 160
    1552:	0e 94 81 12 	call	0x2502	; 0x2502 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1556:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    155a:	88 31       	cpi	r24, 0x18	; 24
    155c:	11 f0       	breq	.+4      	; 0x1562 <EEPROM_writeByte+0x50>
        return ERROR; 
    155e:	1c 82       	std	Y+4, r1	; 0x04
    1560:	16 c0       	rjmp	.+44     	; 0x158e <EEPROM_writeByte+0x7c>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	0e 94 81 12 	call	0x2502	; 0x2502 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1568:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    156c:	88 32       	cpi	r24, 0x28	; 40
    156e:	11 f0       	breq	.+4      	; 0x1574 <EEPROM_writeByte+0x62>
        return ERROR;
    1570:	1c 82       	std	Y+4, r1	; 0x04
    1572:	0d c0       	rjmp	.+26     	; 0x158e <EEPROM_writeByte+0x7c>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	0e 94 81 12 	call	0x2502	; 0x2502 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    157a:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    157e:	88 32       	cpi	r24, 0x28	; 40
    1580:	11 f0       	breq	.+4      	; 0x1586 <EEPROM_writeByte+0x74>
        return ERROR;
    1582:	1c 82       	std	Y+4, r1	; 0x04
    1584:	04 c0       	rjmp	.+8      	; 0x158e <EEPROM_writeByte+0x7c>

    /* Send the Stop Bit */
    TWI_stop();
    1586:	0e 94 76 12 	call	0x24ec	; 0x24ec <TWI_stop>
	
    return SUCCESS;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	8c 83       	std	Y+4, r24	; 0x04
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <EEPROM_readByte+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <EEPROM_readByte+0x8>
    15a6:	0f 92       	push	r0
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	7c 83       	std	Y+4, r23	; 0x04
    15b2:	6b 83       	std	Y+3, r22	; 0x03
	TWI_init(0b00000010,0);
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	0e 94 31 12 	call	0x2462	; 0x2462 <TWI_init>
	/* Send the Start Bit */
    TWI_start();
    15be:	0e 94 66 12 	call	0x24cc	; 0x24cc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15c2:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    15c6:	88 30       	cpi	r24, 0x08	; 8
    15c8:	11 f0       	breq	.+4      	; 0x15ce <EEPROM_readByte+0x30>
        return ERROR;
    15ca:	1d 82       	std	Y+5, r1	; 0x05
    15cc:	44 c0       	rjmp	.+136    	; 0x1656 <EEPROM_readByte+0xb8>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	80 70       	andi	r24, 0x00	; 0
    15d4:	97 70       	andi	r25, 0x07	; 7
    15d6:	88 0f       	add	r24, r24
    15d8:	89 2f       	mov	r24, r25
    15da:	88 1f       	adc	r24, r24
    15dc:	99 0b       	sbc	r25, r25
    15de:	91 95       	neg	r25
    15e0:	80 6a       	ori	r24, 0xA0	; 160
    15e2:	0e 94 81 12 	call	0x2502	; 0x2502 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15e6:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    15ea:	88 31       	cpi	r24, 0x18	; 24
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <EEPROM_readByte+0x54>
        return ERROR;
    15ee:	1d 82       	std	Y+5, r1	; 0x05
    15f0:	32 c0       	rjmp	.+100    	; 0x1656 <EEPROM_readByte+0xb8>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	0e 94 81 12 	call	0x2502	; 0x2502 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15f8:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    15fc:	88 32       	cpi	r24, 0x28	; 40
    15fe:	11 f0       	breq	.+4      	; 0x1604 <EEPROM_readByte+0x66>
        return ERROR;
    1600:	1d 82       	std	Y+5, r1	; 0x05
    1602:	29 c0       	rjmp	.+82     	; 0x1656 <EEPROM_readByte+0xb8>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1604:	0e 94 66 12 	call	0x24cc	; 0x24cc <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1608:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    160c:	80 31       	cpi	r24, 0x10	; 16
    160e:	11 f0       	breq	.+4      	; 0x1614 <EEPROM_readByte+0x76>
        return ERROR;
    1610:	1d 82       	std	Y+5, r1	; 0x05
    1612:	21 c0       	rjmp	.+66     	; 0x1656 <EEPROM_readByte+0xb8>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	80 70       	andi	r24, 0x00	; 0
    161a:	97 70       	andi	r25, 0x07	; 7
    161c:	88 0f       	add	r24, r24
    161e:	89 2f       	mov	r24, r25
    1620:	88 1f       	adc	r24, r24
    1622:	99 0b       	sbc	r25, r25
    1624:	91 95       	neg	r25
    1626:	81 6a       	ori	r24, 0xA1	; 161
    1628:	0e 94 81 12 	call	0x2502	; 0x2502 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    162c:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    1630:	80 34       	cpi	r24, 0x40	; 64
    1632:	11 f0       	breq	.+4      	; 0x1638 <EEPROM_readByte+0x9a>
        return ERROR;
    1634:	1d 82       	std	Y+5, r1	; 0x05
    1636:	0f c0       	rjmp	.+30     	; 0x1656 <EEPROM_readByte+0xb8>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1638:	0e 94 ab 12 	call	0x2556	; 0x2556 <TWI_readByteWithNACK>
    163c:	eb 81       	ldd	r30, Y+3	; 0x03
    163e:	fc 81       	ldd	r31, Y+4	; 0x04
    1640:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1642:	0e 94 be 12 	call	0x257c	; 0x257c <TWI_getStatus>
    1646:	88 35       	cpi	r24, 0x58	; 88
    1648:	11 f0       	breq	.+4      	; 0x164e <EEPROM_readByte+0xb0>
        return ERROR;
    164a:	1d 82       	std	Y+5, r1	; 0x05
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <EEPROM_readByte+0xb8>

    /* Send the Stop Bit */
    TWI_stop();
    164e:	0e 94 76 12 	call	0x24ec	; 0x24ec <TWI_stop>

    return SUCCESS;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <GPIO_setupPinDirection+0x6>
    166e:	00 d0       	rcall	.+0      	; 0x1670 <GPIO_setupPinDirection+0x8>
    1670:	0f 92       	push	r0
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	6a 83       	std	Y+2, r22	; 0x02
    167a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	88 30       	cpi	r24, 0x08	; 8
    1680:	08 f0       	brcs	.+2      	; 0x1684 <GPIO_setupPinDirection+0x1c>
    1682:	d5 c0       	rjmp	.+426    	; 0x182e <GPIO_setupPinDirection+0x1c6>
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	84 30       	cpi	r24, 0x04	; 4
    1688:	08 f0       	brcs	.+2      	; 0x168c <GPIO_setupPinDirection+0x24>
    168a:	d1 c0       	rjmp	.+418    	; 0x182e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	3d 83       	std	Y+5, r19	; 0x05
    1694:	2c 83       	std	Y+4, r18	; 0x04
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	91 05       	cpc	r25, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <GPIO_setupPinDirection+0x3a>
    16a0:	43 c0       	rjmp	.+134    	; 0x1728 <GPIO_setupPinDirection+0xc0>
    16a2:	2c 81       	ldd	r18, Y+4	; 0x04
    16a4:	3d 81       	ldd	r19, Y+5	; 0x05
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	2c f4       	brge	.+10     	; 0x16b6 <GPIO_setupPinDirection+0x4e>
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	71 f0       	breq	.+28     	; 0x16d0 <GPIO_setupPinDirection+0x68>
    16b4:	bc c0       	rjmp	.+376    	; 0x182e <GPIO_setupPinDirection+0x1c6>
    16b6:	2c 81       	ldd	r18, Y+4	; 0x04
    16b8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ba:	22 30       	cpi	r18, 0x02	; 2
    16bc:	31 05       	cpc	r19, r1
    16be:	09 f4       	brne	.+2      	; 0x16c2 <GPIO_setupPinDirection+0x5a>
    16c0:	5f c0       	rjmp	.+190    	; 0x1780 <GPIO_setupPinDirection+0x118>
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	91 05       	cpc	r25, r1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <GPIO_setupPinDirection+0x66>
    16cc:	85 c0       	rjmp	.+266    	; 0x17d8 <GPIO_setupPinDirection+0x170>
    16ce:	af c0       	rjmp	.+350    	; 0x182e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	a1 f4       	brne	.+40     	; 0x16fe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16d6:	aa e3       	ldi	r26, 0x3A	; 58
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ea e3       	ldi	r30, 0x3A	; 58
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <GPIO_setupPinDirection+0x8c>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <GPIO_setupPinDirection+0x88>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	98 c0       	rjmp	.+304    	; 0x182e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16fe:	aa e3       	ldi	r26, 0x3A	; 58
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ea e3       	ldi	r30, 0x3A	; 58
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_setupPinDirection+0xb4>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_setupPinDirection+0xb0>
    1720:	80 95       	com	r24
    1722:	84 23       	and	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	83 c0       	rjmp	.+262    	; 0x182e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	a1 f4       	brne	.+40     	; 0x1756 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    172e:	a7 e3       	ldi	r26, 0x37	; 55
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e7 e3       	ldi	r30, 0x37	; 55
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <GPIO_setupPinDirection+0xe4>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <GPIO_setupPinDirection+0xe0>
    1750:	84 2b       	or	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	6c c0       	rjmp	.+216    	; 0x182e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1756:	a7 e3       	ldi	r26, 0x37	; 55
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e7 e3       	ldi	r30, 0x37	; 55
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_setupPinDirection+0x10c>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_setupPinDirection+0x108>
    1778:	80 95       	com	r24
    177a:	84 23       	and	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	57 c0       	rjmp	.+174    	; 0x182e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	a1 f4       	brne	.+40     	; 0x17ae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1786:	a4 e3       	ldi	r26, 0x34	; 52
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e4 e3       	ldi	r30, 0x34	; 52
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 2e       	mov	r0, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <GPIO_setupPinDirection+0x13c>
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	0a 94       	dec	r0
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <GPIO_setupPinDirection+0x138>
    17a8:	84 2b       	or	r24, r20
    17aa:	8c 93       	st	X, r24
    17ac:	40 c0       	rjmp	.+128    	; 0x182e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17ae:	a4 e3       	ldi	r26, 0x34	; 52
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e4 e3       	ldi	r30, 0x34	; 52
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_setupPinDirection+0x164>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_setupPinDirection+0x160>
    17d0:	80 95       	com	r24
    17d2:	84 23       	and	r24, r20
    17d4:	8c 93       	st	X, r24
    17d6:	2b c0       	rjmp	.+86     	; 0x182e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	a1 f4       	brne	.+40     	; 0x1806 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17de:	a1 e3       	ldi	r26, 0x31	; 49
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e1 e3       	ldi	r30, 0x31	; 49
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <GPIO_setupPinDirection+0x194>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <GPIO_setupPinDirection+0x190>
    1800:	84 2b       	or	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	14 c0       	rjmp	.+40     	; 0x182e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1806:	a1 e3       	ldi	r26, 0x31	; 49
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e1 e3       	ldi	r30, 0x31	; 49
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <GPIO_setupPinDirection+0x1bc>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <GPIO_setupPinDirection+0x1b8>
    1828:	80 95       	com	r24
    182a:	84 23       	and	r24, r20
    182c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <GPIO_writePin+0x6>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <GPIO_writePin+0x8>
    1846:	0f 92       	push	r0
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	6a 83       	std	Y+2, r22	; 0x02
    1850:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	88 30       	cpi	r24, 0x08	; 8
    1856:	08 f0       	brcs	.+2      	; 0x185a <GPIO_writePin+0x1c>
    1858:	d5 c0       	rjmp	.+426    	; 0x1a04 <GPIO_writePin+0x1c6>
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	08 f0       	brcs	.+2      	; 0x1862 <GPIO_writePin+0x24>
    1860:	d1 c0       	rjmp	.+418    	; 0x1a04 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	3d 83       	std	Y+5, r19	; 0x05
    186a:	2c 83       	std	Y+4, r18	; 0x04
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	91 05       	cpc	r25, r1
    1874:	09 f4       	brne	.+2      	; 0x1878 <GPIO_writePin+0x3a>
    1876:	43 c0       	rjmp	.+134    	; 0x18fe <GPIO_writePin+0xc0>
    1878:	2c 81       	ldd	r18, Y+4	; 0x04
    187a:	3d 81       	ldd	r19, Y+5	; 0x05
    187c:	22 30       	cpi	r18, 0x02	; 2
    187e:	31 05       	cpc	r19, r1
    1880:	2c f4       	brge	.+10     	; 0x188c <GPIO_writePin+0x4e>
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	71 f0       	breq	.+28     	; 0x18a6 <GPIO_writePin+0x68>
    188a:	bc c0       	rjmp	.+376    	; 0x1a04 <GPIO_writePin+0x1c6>
    188c:	2c 81       	ldd	r18, Y+4	; 0x04
    188e:	3d 81       	ldd	r19, Y+5	; 0x05
    1890:	22 30       	cpi	r18, 0x02	; 2
    1892:	31 05       	cpc	r19, r1
    1894:	09 f4       	brne	.+2      	; 0x1898 <GPIO_writePin+0x5a>
    1896:	5f c0       	rjmp	.+190    	; 0x1956 <GPIO_writePin+0x118>
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	83 30       	cpi	r24, 0x03	; 3
    189e:	91 05       	cpc	r25, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <GPIO_writePin+0x66>
    18a2:	85 c0       	rjmp	.+266    	; 0x19ae <GPIO_writePin+0x170>
    18a4:	af c0       	rjmp	.+350    	; 0x1a04 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	a1 f4       	brne	.+40     	; 0x18d4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18ac:	ab e3       	ldi	r26, 0x3B	; 59
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	eb e3       	ldi	r30, 0x3B	; 59
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <GPIO_writePin+0x8c>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <GPIO_writePin+0x88>
    18ce:	84 2b       	or	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	98 c0       	rjmp	.+304    	; 0x1a04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18d4:	ab e3       	ldi	r26, 0x3B	; 59
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	eb e3       	ldi	r30, 0x3B	; 59
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	48 2f       	mov	r20, r24
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <GPIO_writePin+0xb4>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <GPIO_writePin+0xb0>
    18f6:	80 95       	com	r24
    18f8:	84 23       	and	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	83 c0       	rjmp	.+262    	; 0x1a04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	a1 f4       	brne	.+40     	; 0x192c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1904:	a8 e3       	ldi	r26, 0x38	; 56
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e8 e3       	ldi	r30, 0x38	; 56
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <GPIO_writePin+0xe4>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <GPIO_writePin+0xe0>
    1926:	84 2b       	or	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	6c c0       	rjmp	.+216    	; 0x1a04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    192c:	a8 e3       	ldi	r26, 0x38	; 56
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e8 e3       	ldi	r30, 0x38	; 56
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <GPIO_writePin+0x10c>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <GPIO_writePin+0x108>
    194e:	80 95       	com	r24
    1950:	84 23       	and	r24, r20
    1952:	8c 93       	st	X, r24
    1954:	57 c0       	rjmp	.+174    	; 0x1a04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	a1 f4       	brne	.+40     	; 0x1984 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    195c:	a5 e3       	ldi	r26, 0x35	; 53
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e3       	ldi	r30, 0x35	; 53
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 2e       	mov	r0, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <GPIO_writePin+0x13c>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <GPIO_writePin+0x138>
    197e:	84 2b       	or	r24, r20
    1980:	8c 93       	st	X, r24
    1982:	40 c0       	rjmp	.+128    	; 0x1a04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1984:	a5 e3       	ldi	r26, 0x35	; 53
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e5 e3       	ldi	r30, 0x35	; 53
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	48 2f       	mov	r20, r24
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 2e       	mov	r0, r18
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <GPIO_writePin+0x164>
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	0a 94       	dec	r0
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <GPIO_writePin+0x160>
    19a6:	80 95       	com	r24
    19a8:	84 23       	and	r24, r20
    19aa:	8c 93       	st	X, r24
    19ac:	2b c0       	rjmp	.+86     	; 0x1a04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	a1 f4       	brne	.+40     	; 0x19dc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19b4:	a2 e3       	ldi	r26, 0x32	; 50
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e2 e3       	ldi	r30, 0x32	; 50
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 2e       	mov	r0, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <GPIO_writePin+0x194>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	0a 94       	dec	r0
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <GPIO_writePin+0x190>
    19d6:	84 2b       	or	r24, r20
    19d8:	8c 93       	st	X, r24
    19da:	14 c0       	rjmp	.+40     	; 0x1a04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19dc:	a2 e3       	ldi	r26, 0x32	; 50
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e2 e3       	ldi	r30, 0x32	; 50
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	48 2f       	mov	r20, r24
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	02 2e       	mov	r0, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <GPIO_writePin+0x1bc>
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	0a 94       	dec	r0
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <GPIO_writePin+0x1b8>
    19fe:	80 95       	com	r24
    1a00:	84 23       	and	r24, r20
    1a02:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <GPIO_readPin+0x6>
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <GPIO_readPin+0x8>
    1a1c:	0f 92       	push	r0
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a26:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	88 30       	cpi	r24, 0x08	; 8
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <GPIO_readPin+0x1c>
    1a2e:	84 c0       	rjmp	.+264    	; 0x1b38 <GPIO_readPin+0x124>
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	84 30       	cpi	r24, 0x04	; 4
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <GPIO_readPin+0x24>
    1a36:	80 c0       	rjmp	.+256    	; 0x1b38 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	3d 83       	std	Y+5, r19	; 0x05
    1a40:	2c 83       	std	Y+4, r18	; 0x04
    1a42:	4c 81       	ldd	r20, Y+4	; 0x04
    1a44:	5d 81       	ldd	r21, Y+5	; 0x05
    1a46:	41 30       	cpi	r20, 0x01	; 1
    1a48:	51 05       	cpc	r21, r1
    1a4a:	79 f1       	breq	.+94     	; 0x1aaa <GPIO_readPin+0x96>
    1a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a50:	82 30       	cpi	r24, 0x02	; 2
    1a52:	91 05       	cpc	r25, r1
    1a54:	34 f4       	brge	.+12     	; 0x1a62 <GPIO_readPin+0x4e>
    1a56:	2c 81       	ldd	r18, Y+4	; 0x04
    1a58:	3d 81       	ldd	r19, Y+5	; 0x05
    1a5a:	21 15       	cp	r18, r1
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	69 f0       	breq	.+26     	; 0x1a7a <GPIO_readPin+0x66>
    1a60:	6b c0       	rjmp	.+214    	; 0x1b38 <GPIO_readPin+0x124>
    1a62:	4c 81       	ldd	r20, Y+4	; 0x04
    1a64:	5d 81       	ldd	r21, Y+5	; 0x05
    1a66:	42 30       	cpi	r20, 0x02	; 2
    1a68:	51 05       	cpc	r21, r1
    1a6a:	b9 f1       	breq	.+110    	; 0x1ada <GPIO_readPin+0xc6>
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <GPIO_readPin+0x64>
    1a76:	49 c0       	rjmp	.+146    	; 0x1b0a <GPIO_readPin+0xf6>
    1a78:	5f c0       	rjmp	.+190    	; 0x1b38 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a7a:	e9 e3       	ldi	r30, 0x39	; 57
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a9 01       	movw	r20, r18
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <GPIO_readPin+0x7e>
    1a8e:	55 95       	asr	r21
    1a90:	47 95       	ror	r20
    1a92:	8a 95       	dec	r24
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <GPIO_readPin+0x7a>
    1a96:	ca 01       	movw	r24, r20
    1a98:	81 70       	andi	r24, 0x01	; 1
    1a9a:	90 70       	andi	r25, 0x00	; 0
    1a9c:	88 23       	and	r24, r24
    1a9e:	19 f0       	breq	.+6      	; 0x1aa6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	49 c0       	rjmp	.+146    	; 0x1b38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aa6:	19 82       	std	Y+1, r1	; 0x01
    1aa8:	47 c0       	rjmp	.+142    	; 0x1b38 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1aaa:	e6 e3       	ldi	r30, 0x36	; 54
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a9 01       	movw	r20, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <GPIO_readPin+0xae>
    1abe:	55 95       	asr	r21
    1ac0:	47 95       	ror	r20
    1ac2:	8a 95       	dec	r24
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <GPIO_readPin+0xaa>
    1ac6:	ca 01       	movw	r24, r20
    1ac8:	81 70       	andi	r24, 0x01	; 1
    1aca:	90 70       	andi	r25, 0x00	; 0
    1acc:	88 23       	and	r24, r24
    1ace:	19 f0       	breq	.+6      	; 0x1ad6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	31 c0       	rjmp	.+98     	; 0x1b38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ad6:	19 82       	std	Y+1, r1	; 0x01
    1ad8:	2f c0       	rjmp	.+94     	; 0x1b38 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ada:	e3 e3       	ldi	r30, 0x33	; 51
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <GPIO_readPin+0xde>
    1aee:	55 95       	asr	r21
    1af0:	47 95       	ror	r20
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <GPIO_readPin+0xda>
    1af6:	ca 01       	movw	r24, r20
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	88 23       	and	r24, r24
    1afe:	19 f0       	breq	.+6      	; 0x1b06 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	19 c0       	rjmp	.+50     	; 0x1b38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b06:	19 82       	std	Y+1, r1	; 0x01
    1b08:	17 c0       	rjmp	.+46     	; 0x1b38 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b0a:	e0 e3       	ldi	r30, 0x30	; 48
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a9 01       	movw	r20, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <GPIO_readPin+0x10e>
    1b1e:	55 95       	asr	r21
    1b20:	47 95       	ror	r20
    1b22:	8a 95       	dec	r24
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <GPIO_readPin+0x10a>
    1b26:	ca 01       	movw	r24, r20
    1b28:	81 70       	andi	r24, 0x01	; 1
    1b2a:	90 70       	andi	r25, 0x00	; 0
    1b2c:	88 23       	and	r24, r24
    1b2e:	19 f0       	breq	.+6      	; 0x1b36 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b36:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <GPIO_setupPortDirection+0x6>
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <GPIO_setupPortDirection+0x8>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	84 30       	cpi	r24, 0x04	; 4
    1b5e:	90 f5       	brcc	.+100    	; 0x1bc4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	3c 83       	std	Y+4, r19	; 0x04
    1b68:	2b 83       	std	Y+3, r18	; 0x03
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	91 05       	cpc	r25, r1
    1b72:	d1 f0       	breq	.+52     	; 0x1ba8 <GPIO_setupPortDirection+0x5e>
    1b74:	2b 81       	ldd	r18, Y+3	; 0x03
    1b76:	3c 81       	ldd	r19, Y+4	; 0x04
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	2c f4       	brge	.+10     	; 0x1b88 <GPIO_setupPortDirection+0x3e>
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	61 f0       	breq	.+24     	; 0x1b9e <GPIO_setupPortDirection+0x54>
    1b86:	1e c0       	rjmp	.+60     	; 0x1bc4 <GPIO_setupPortDirection+0x7a>
    1b88:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	81 f0       	breq	.+32     	; 0x1bb2 <GPIO_setupPortDirection+0x68>
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	91 05       	cpc	r25, r1
    1b9a:	81 f0       	breq	.+32     	; 0x1bbc <GPIO_setupPortDirection+0x72>
    1b9c:	13 c0       	rjmp	.+38     	; 0x1bc4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b9e:	ea e3       	ldi	r30, 0x3A	; 58
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	80 83       	st	Z, r24
    1ba6:	0e c0       	rjmp	.+28     	; 0x1bc4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ba8:	e7 e3       	ldi	r30, 0x37	; 55
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	80 83       	st	Z, r24
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bb2:	e4 e3       	ldi	r30, 0x34	; 52
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	80 83       	st	Z, r24
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bbc:	e1 e3       	ldi	r30, 0x31	; 49
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <GPIO_writePort+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <GPIO_writePort+0x8>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	90 f5       	brcc	.+100    	; 0x1c4c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	3c 83       	std	Y+4, r19	; 0x04
    1bf0:	2b 83       	std	Y+3, r18	; 0x03
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	d1 f0       	breq	.+52     	; 0x1c30 <GPIO_writePort+0x5e>
    1bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <GPIO_writePort+0x3e>
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	61 f0       	breq	.+24     	; 0x1c26 <GPIO_writePort+0x54>
    1c0e:	1e c0       	rjmp	.+60     	; 0x1c4c <GPIO_writePort+0x7a>
    1c10:	2b 81       	ldd	r18, Y+3	; 0x03
    1c12:	3c 81       	ldd	r19, Y+4	; 0x04
    1c14:	22 30       	cpi	r18, 0x02	; 2
    1c16:	31 05       	cpc	r19, r1
    1c18:	81 f0       	breq	.+32     	; 0x1c3a <GPIO_writePort+0x68>
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	83 30       	cpi	r24, 0x03	; 3
    1c20:	91 05       	cpc	r25, r1
    1c22:	81 f0       	breq	.+32     	; 0x1c44 <GPIO_writePort+0x72>
    1c24:	13 c0       	rjmp	.+38     	; 0x1c4c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c26:	eb e3       	ldi	r30, 0x3B	; 59
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	80 83       	st	Z, r24
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c30:	e8 e3       	ldi	r30, 0x38	; 56
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	80 83       	st	Z, r24
    1c38:	09 c0       	rjmp	.+18     	; 0x1c4c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c3a:	e5 e3       	ldi	r30, 0x35	; 53
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	80 83       	st	Z, r24
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c44:	e2 e3       	ldi	r30, 0x32	; 50
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <GPIO_readPort+0x6>
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <GPIO_readPort+0x8>
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c68:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	84 30       	cpi	r24, 0x04	; 4
    1c6e:	90 f5       	brcc	.+100    	; 0x1cd4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3c 83       	std	Y+4, r19	; 0x04
    1c78:	2b 83       	std	Y+3, r18	; 0x03
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	d1 f0       	breq	.+52     	; 0x1cb8 <GPIO_readPort+0x5e>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <GPIO_readPort+0x3e>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	61 f0       	breq	.+24     	; 0x1cae <GPIO_readPort+0x54>
    1c96:	1e c0       	rjmp	.+60     	; 0x1cd4 <GPIO_readPort+0x7a>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	81 f0       	breq	.+32     	; 0x1cc2 <GPIO_readPort+0x68>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	81 f0       	breq	.+32     	; 0x1ccc <GPIO_readPort+0x72>
    1cac:	13 c0       	rjmp	.+38     	; 0x1cd4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cae:	e9 e3       	ldi	r30, 0x39	; 57
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	0e c0       	rjmp	.+28     	; 0x1cd4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cb8:	e6 e3       	ldi	r30, 0x36	; 54
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	09 c0       	rjmp	.+18     	; 0x1cd4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cc2:	e3 e3       	ldi	r30, 0x33	; 51
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ccc:	e0 e3       	ldi	r30, 0x30	; 48
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <DCmotor_init>:
#include "motor.h"
#include "std_types.h"
#include "gpio.h"
#include "common_macros.h"

void DCmotor_init(void){
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	/*Setup the motor pins as output pins*/
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 34 0b 	call	0x1668	; 0x1668 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	41 e0       	ldi	r20, 0x01	; 1
    1cfc:	0e 94 34 0b 	call	0x1668	; 0x1668 <GPIO_setupPinDirection>
	/*stop the DC motor at the beginning*/
	PORTB = PORTB & 0XFC;
    1d00:	a8 e3       	ldi	r26, 0x38	; 56
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e8 e3       	ldi	r30, 0x38	; 56
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8c 7f       	andi	r24, 0xFC	; 252
    1d0c:	8c 93       	st	X, r24

}
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <DCmotor_Rotate_CW>:

void DCmotor_Rotate_CW(void){
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
	/*rotating the motor CW*/
	SET_BIT(PORTB,0);
    1d1c:	a8 e3       	ldi	r26, 0x38	; 56
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e8 e3       	ldi	r30, 0x38	; 56
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	81 60       	ori	r24, 0x01	; 1
    1d28:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,1);
    1d2a:	a8 e3       	ldi	r26, 0x38	; 56
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e8 e3       	ldi	r30, 0x38	; 56
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8d 7f       	andi	r24, 0xFD	; 253
    1d36:	8c 93       	st	X, r24

}
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <DCmotor_Rotate_A_CW>:

void DCmotor_Rotate_A_CW(void){
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
	/*rotating the motor A_CW*/
	SET_BIT(PORTB,1);
    1d46:	a8 e3       	ldi	r26, 0x38	; 56
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e8 e3       	ldi	r30, 0x38	; 56
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	82 60       	ori	r24, 0x02	; 2
    1d52:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,0);
    1d54:	a8 e3       	ldi	r26, 0x38	; 56
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8e 7f       	andi	r24, 0xFE	; 254
    1d60:	8c 93       	st	X, r24
}
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <DCmotor_deinit>:

void DCmotor_deinit(void){
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTB_ID,PIN0_ID,LOGIC_LOW);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	0e 94 1f 0c 	call	0x183e	; 0x183e <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN1_ID,LOGIC_LOW);
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	0e 94 1f 0c 	call	0x183e	; 0x183e <GPIO_writePin>


}
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	2f 93       	push	r18
    1d96:	3f 93       	push	r19
    1d98:	4f 93       	push	r20
    1d9a:	5f 93       	push	r21
    1d9c:	6f 93       	push	r22
    1d9e:	7f 93       	push	r23
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	ef 93       	push	r30
    1daa:	ff 93       	push	r31
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    1db4:	80 91 76 00 	lds	r24, 0x0076
    1db8:	90 91 77 00 	lds	r25, 0x0077
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    1dc0:	e0 91 76 00 	lds	r30, 0x0076
    1dc4:	f0 91 77 00 	lds	r31, 0x0077
    1dc8:	09 95       	icall
	}
}
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	ff 91       	pop	r31
    1dd0:	ef 91       	pop	r30
    1dd2:	bf 91       	pop	r27
    1dd4:	af 91       	pop	r26
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	7f 91       	pop	r23
    1ddc:	6f 91       	pop	r22
    1dde:	5f 91       	pop	r21
    1de0:	4f 91       	pop	r20
    1de2:	3f 91       	pop	r19
    1de4:	2f 91       	pop	r18
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1df0:	1f 92       	push	r1
    1df2:	0f 92       	push	r0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	0f 92       	push	r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	2f 93       	push	r18
    1dfc:	3f 93       	push	r19
    1dfe:	4f 93       	push	r20
    1e00:	5f 93       	push	r21
    1e02:	6f 93       	push	r22
    1e04:	7f 93       	push	r23
    1e06:	8f 93       	push	r24
    1e08:	9f 93       	push	r25
    1e0a:	af 93       	push	r26
    1e0c:	bf 93       	push	r27
    1e0e:	ef 93       	push	r30
    1e10:	ff 93       	push	r31
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    1e1a:	80 91 76 00 	lds	r24, 0x0076
    1e1e:	90 91 77 00 	lds	r25, 0x0077
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	29 f0       	breq	.+10     	; 0x1e30 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    1e26:	e0 91 76 00 	lds	r30, 0x0076
    1e2a:	f0 91 77 00 	lds	r31, 0x0077
    1e2e:	09 95       	icall
	}
}
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	bf 91       	pop	r27
    1e3a:	af 91       	pop	r26
    1e3c:	9f 91       	pop	r25
    1e3e:	8f 91       	pop	r24
    1e40:	7f 91       	pop	r23
    1e42:	6f 91       	pop	r22
    1e44:	5f 91       	pop	r21
    1e46:	4f 91       	pop	r20
    1e48:	3f 91       	pop	r19
    1e4a:	2f 91       	pop	r18
    1e4c:	0f 90       	pop	r0
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	0f 90       	pop	r0
    1e52:	1f 90       	pop	r1
    1e54:	18 95       	reti

00001e56 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1e56:	1f 92       	push	r1
    1e58:	0f 92       	push	r0
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	0f 92       	push	r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	2f 93       	push	r18
    1e62:	3f 93       	push	r19
    1e64:	4f 93       	push	r20
    1e66:	5f 93       	push	r21
    1e68:	6f 93       	push	r22
    1e6a:	7f 93       	push	r23
    1e6c:	8f 93       	push	r24
    1e6e:	9f 93       	push	r25
    1e70:	af 93       	push	r26
    1e72:	bf 93       	push	r27
    1e74:	ef 93       	push	r30
    1e76:	ff 93       	push	r31
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1e80:	80 91 78 00 	lds	r24, 0x0078
    1e84:	90 91 79 00 	lds	r25, 0x0079
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	29 f0       	breq	.+10     	; 0x1e96 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1e8c:	e0 91 78 00 	lds	r30, 0x0078
    1e90:	f0 91 79 00 	lds	r31, 0x0079
    1e94:	09 95       	icall
	}
}
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	ff 91       	pop	r31
    1e9c:	ef 91       	pop	r30
    1e9e:	bf 91       	pop	r27
    1ea0:	af 91       	pop	r26
    1ea2:	9f 91       	pop	r25
    1ea4:	8f 91       	pop	r24
    1ea6:	7f 91       	pop	r23
    1ea8:	6f 91       	pop	r22
    1eaa:	5f 91       	pop	r21
    1eac:	4f 91       	pop	r20
    1eae:	3f 91       	pop	r19
    1eb0:	2f 91       	pop	r18
    1eb2:	0f 90       	pop	r0
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	0f 90       	pop	r0
    1eb8:	1f 90       	pop	r1
    1eba:	18 95       	reti

00001ebc <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1ebc:	1f 92       	push	r1
    1ebe:	0f 92       	push	r0
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	0f 92       	push	r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	2f 93       	push	r18
    1ec8:	3f 93       	push	r19
    1eca:	4f 93       	push	r20
    1ecc:	5f 93       	push	r21
    1ece:	6f 93       	push	r22
    1ed0:	7f 93       	push	r23
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25
    1ed6:	af 93       	push	r26
    1ed8:	bf 93       	push	r27
    1eda:	ef 93       	push	r30
    1edc:	ff 93       	push	r31
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1ee6:	80 91 78 00 	lds	r24, 0x0078
    1eea:	90 91 79 00 	lds	r25, 0x0079
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	29 f0       	breq	.+10     	; 0x1efc <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1ef2:	e0 91 78 00 	lds	r30, 0x0078
    1ef6:	f0 91 79 00 	lds	r31, 0x0079
    1efa:	09 95       	icall
	}
}
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	ff 91       	pop	r31
    1f02:	ef 91       	pop	r30
    1f04:	bf 91       	pop	r27
    1f06:	af 91       	pop	r26
    1f08:	9f 91       	pop	r25
    1f0a:	8f 91       	pop	r24
    1f0c:	7f 91       	pop	r23
    1f0e:	6f 91       	pop	r22
    1f10:	5f 91       	pop	r21
    1f12:	4f 91       	pop	r20
    1f14:	3f 91       	pop	r19
    1f16:	2f 91       	pop	r18
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    1f22:	1f 92       	push	r1
    1f24:	0f 92       	push	r0
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	0f 92       	push	r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	2f 93       	push	r18
    1f2e:	3f 93       	push	r19
    1f30:	4f 93       	push	r20
    1f32:	5f 93       	push	r21
    1f34:	6f 93       	push	r22
    1f36:	7f 93       	push	r23
    1f38:	8f 93       	push	r24
    1f3a:	9f 93       	push	r25
    1f3c:	af 93       	push	r26
    1f3e:	bf 93       	push	r27
    1f40:	ef 93       	push	r30
    1f42:	ff 93       	push	r31
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1f4c:	80 91 78 00 	lds	r24, 0x0078
    1f50:	90 91 79 00 	lds	r25, 0x0079
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	29 f0       	breq	.+10     	; 0x1f62 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1f58:	e0 91 78 00 	lds	r30, 0x0078
    1f5c:	f0 91 79 00 	lds	r31, 0x0079
    1f60:	09 95       	icall
	}
}
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	ff 91       	pop	r31
    1f68:	ef 91       	pop	r30
    1f6a:	bf 91       	pop	r27
    1f6c:	af 91       	pop	r26
    1f6e:	9f 91       	pop	r25
    1f70:	8f 91       	pop	r24
    1f72:	7f 91       	pop	r23
    1f74:	6f 91       	pop	r22
    1f76:	5f 91       	pop	r21
    1f78:	4f 91       	pop	r20
    1f7a:	3f 91       	pop	r19
    1f7c:	2f 91       	pop	r18
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	0f 90       	pop	r0
    1f84:	1f 90       	pop	r1
    1f86:	18 95       	reti

00001f88 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    1f88:	1f 92       	push	r1
    1f8a:	0f 92       	push	r0
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	0f 92       	push	r0
    1f90:	11 24       	eor	r1, r1
    1f92:	2f 93       	push	r18
    1f94:	3f 93       	push	r19
    1f96:	4f 93       	push	r20
    1f98:	5f 93       	push	r21
    1f9a:	6f 93       	push	r22
    1f9c:	7f 93       	push	r23
    1f9e:	8f 93       	push	r24
    1fa0:	9f 93       	push	r25
    1fa2:	af 93       	push	r26
    1fa4:	bf 93       	push	r27
    1fa6:	ef 93       	push	r30
    1fa8:	ff 93       	push	r31
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    1fb2:	80 91 7a 00 	lds	r24, 0x007A
    1fb6:	90 91 7b 00 	lds	r25, 0x007B
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	29 f0       	breq	.+10     	; 0x1fc8 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    1fbe:	e0 91 7a 00 	lds	r30, 0x007A
    1fc2:	f0 91 7b 00 	lds	r31, 0x007B
    1fc6:	09 95       	icall
	}
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	ff 91       	pop	r31
    1fce:	ef 91       	pop	r30
    1fd0:	bf 91       	pop	r27
    1fd2:	af 91       	pop	r26
    1fd4:	9f 91       	pop	r25
    1fd6:	8f 91       	pop	r24
    1fd8:	7f 91       	pop	r23
    1fda:	6f 91       	pop	r22
    1fdc:	5f 91       	pop	r21
    1fde:	4f 91       	pop	r20
    1fe0:	3f 91       	pop	r19
    1fe2:	2f 91       	pop	r18
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	0f 90       	pop	r0
    1fea:	1f 90       	pop	r1
    1fec:	18 95       	reti

00001fee <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1fee:	1f 92       	push	r1
    1ff0:	0f 92       	push	r0
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	0f 92       	push	r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	2f 93       	push	r18
    1ffa:	3f 93       	push	r19
    1ffc:	4f 93       	push	r20
    1ffe:	5f 93       	push	r21
    2000:	6f 93       	push	r22
    2002:	7f 93       	push	r23
    2004:	8f 93       	push	r24
    2006:	9f 93       	push	r25
    2008:	af 93       	push	r26
    200a:	bf 93       	push	r27
    200c:	ef 93       	push	r30
    200e:	ff 93       	push	r31
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    2018:	80 91 7a 00 	lds	r24, 0x007A
    201c:	90 91 7b 00 	lds	r25, 0x007B
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	29 f0       	breq	.+10     	; 0x202e <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    2024:	e0 91 7a 00 	lds	r30, 0x007A
    2028:	f0 91 7b 00 	lds	r31, 0x007B
    202c:	09 95       	icall
	}
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	ff 91       	pop	r31
    2034:	ef 91       	pop	r30
    2036:	bf 91       	pop	r27
    2038:	af 91       	pop	r26
    203a:	9f 91       	pop	r25
    203c:	8f 91       	pop	r24
    203e:	7f 91       	pop	r23
    2040:	6f 91       	pop	r22
    2042:	5f 91       	pop	r21
    2044:	4f 91       	pop	r20
    2046:	3f 91       	pop	r19
    2048:	2f 91       	pop	r18
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	0f 90       	pop	r0
    2050:	1f 90       	pop	r1
    2052:	18 95       	reti

00002054 <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	00 d0       	rcall	.+0      	; 0x205a <TIMER0_init+0x6>
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	9a 83       	std	Y+2, r25	; 0x02
    2060:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    2062:	e3 e5       	ldi	r30, 0x53	; 83
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 e8       	ldi	r24, 0x80	; 128
    2068:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
    206a:	a2 e5       	ldi	r26, 0x52	; 82
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e9 81       	ldd	r30, Y+1	; 0x01
    2070:	fa 81       	ldd	r31, Y+2	; 0x02
    2072:	84 81       	ldd	r24, Z+4	; 0x04
    2074:	95 81       	ldd	r25, Z+5	; 0x05
    2076:	8c 93       	st	X, r24
	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
    2078:	ac e5       	ldi	r26, 0x5C	; 92
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	86 81       	ldd	r24, Z+6	; 0x06
    2082:	97 81       	ldd	r25, Z+7	; 0x07
    2084:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
    2086:	e9 81       	ldd	r30, Y+1	; 0x01
    2088:	fa 81       	ldd	r31, Y+2	; 0x02
    208a:	83 81       	ldd	r24, Z+3	; 0x03
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	39 f4       	brne	.+14     	; 0x209e <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		DDRB |= (1 << OC0);
    2090:	a7 e3       	ldi	r26, 0x37	; 55
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e7 e3       	ldi	r30, 0x37	; 55
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	88 60       	ori	r24, 0x08	; 8
    209c:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    209e:	e9 81       	ldd	r30, Y+1	; 0x01
    20a0:	fa 81       	ldd	r31, Y+2	; 0x02
    20a2:	81 81       	ldd	r24, Z+1	; 0x01
    20a4:	88 23       	and	r24, r24
    20a6:	41 f4       	brne	.+16     	; 0x20b8 <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
    20a8:	a9 e5       	ldi	r26, 0x59	; 89
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e9 e5       	ldi	r30, 0x59	; 89
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	81 60       	ori	r24, 0x01	; 1
    20b4:	8c 93       	st	X, r24
    20b6:	0c c0       	rjmp	.+24     	; 0x20d0 <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    20b8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ba:	fa 81       	ldd	r31, Y+2	; 0x02
    20bc:	81 81       	ldd	r24, Z+1	; 0x01
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	39 f4       	brne	.+14     	; 0x20d0 <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
    20c2:	a9 e5       	ldi	r26, 0x59	; 89
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e9 e5       	ldi	r30, 0x59	; 89
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	82 60       	ori	r24, 0x02	; 2
    20ce:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
    20d0:	a3 e5       	ldi	r26, 0x53	; 83
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e3 e5       	ldi	r30, 0x53	; 83
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	28 2f       	mov	r18, r24
    20dc:	27 7b       	andi	r18, 0xB7	; 183
    20de:	e9 81       	ldd	r30, Y+1	; 0x01
    20e0:	fa 81       	ldd	r31, Y+2	; 0x02
    20e2:	81 81       	ldd	r24, Z+1	; 0x01
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	00 24       	eor	r0, r0
    20ea:	96 95       	lsr	r25
    20ec:	87 95       	ror	r24
    20ee:	07 94       	ror	r0
    20f0:	96 95       	lsr	r25
    20f2:	87 95       	ror	r24
    20f4:	07 94       	ror	r0
    20f6:	98 2f       	mov	r25, r24
    20f8:	80 2d       	mov	r24, r0
    20fa:	88 74       	andi	r24, 0x48	; 72
    20fc:	82 2b       	or	r24, r18
    20fe:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
    2100:	a3 e5       	ldi	r26, 0x53	; 83
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e3 e5       	ldi	r30, 0x53	; 83
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	28 2f       	mov	r18, r24
    210c:	2f 7c       	andi	r18, 0xCF	; 207
    210e:	e9 81       	ldd	r30, Y+1	; 0x01
    2110:	fa 81       	ldd	r31, Y+2	; 0x02
    2112:	82 81       	ldd	r24, Z+2	; 0x02
    2114:	88 2f       	mov	r24, r24
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	83 70       	andi	r24, 0x03	; 3
    211a:	90 70       	andi	r25, 0x00	; 0
    211c:	82 95       	swap	r24
    211e:	92 95       	swap	r25
    2120:	90 7f       	andi	r25, 0xF0	; 240
    2122:	98 27       	eor	r25, r24
    2124:	80 7f       	andi	r24, 0xF0	; 240
    2126:	98 27       	eor	r25, r24
    2128:	82 2b       	or	r24, r18
    212a:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
    212c:	a3 e5       	ldi	r26, 0x53	; 83
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e3 e5       	ldi	r30, 0x53	; 83
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	98 2f       	mov	r25, r24
    2138:	98 7f       	andi	r25, 0xF8	; 248
    213a:	e9 81       	ldd	r30, Y+1	; 0x01
    213c:	fa 81       	ldd	r31, Y+2	; 0x02
    213e:	80 81       	ld	r24, Z
    2140:	87 70       	andi	r24, 0x07	; 7
    2142:	89 2b       	or	r24, r25
    2144:	8c 93       	st	X, r24
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <TIMER1_init+0x6>
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
    215e:	ac e4       	ldi	r26, 0x4C	; 76
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e9 81       	ldd	r30, Y+1	; 0x01
    2164:	fa 81       	ldd	r31, Y+2	; 0x02
    2166:	84 81       	ldd	r24, Z+4	; 0x04
    2168:	95 81       	ldd	r25, Z+5	; 0x05
    216a:	11 96       	adiw	r26, 0x01	; 1
    216c:	9c 93       	st	X, r25
    216e:	8e 93       	st	-X, r24
	/*  Non PWM Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    2170:	ef e4       	ldi	r30, 0x4F	; 79
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	8c e0       	ldi	r24, 0x0C	; 12
    2176:	80 83       	st	Z, r24
	if((Config_Ptr -> OutputPin) == OC1A){
    2178:	e9 81       	ldd	r30, Y+1	; 0x01
    217a:	fa 81       	ldd	r31, Y+2	; 0x02
    217c:	83 81       	ldd	r24, Z+3	; 0x03
    217e:	85 30       	cpi	r24, 0x05	; 5
    2180:	41 f4       	brne	.+16     	; 0x2192 <TIMER1_init+0x42>
	// configure the output pin PD5 in compare mode
		DDRD |= (1 << OC1A);
    2182:	a1 e3       	ldi	r26, 0x31	; 49
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e1 e3       	ldi	r30, 0x31	; 49
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	80 62       	ori	r24, 0x20	; 32
    218e:	8c 93       	st	X, r24
    2190:	0c c0       	rjmp	.+24     	; 0x21aa <TIMER1_init+0x5a>
	}

	/* Check for OC1B */
	else if ((Config_Ptr -> OutputPin) == OC1B){
    2192:	e9 81       	ldd	r30, Y+1	; 0x01
    2194:	fa 81       	ldd	r31, Y+2	; 0x02
    2196:	83 81       	ldd	r24, Z+3	; 0x03
    2198:	84 30       	cpi	r24, 0x04	; 4
    219a:	39 f4       	brne	.+14     	; 0x21aa <TIMER1_init+0x5a>
		// configure the output pin PD4 in compare mode
		DDRD |= (1 << OC1B);
    219c:	a1 e3       	ldi	r26, 0x31	; 49
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e1 e3       	ldi	r30, 0x31	; 49
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	80 61       	ori	r24, 0x10	; 16
    21a8:	8c 93       	st	X, r24
	}
	if( (Config_Ptr->mode ) == NORMAL_MODE)
    21aa:	e9 81       	ldd	r30, Y+1	; 0x01
    21ac:	fa 81       	ldd	r31, Y+2	; 0x02
    21ae:	81 81       	ldd	r24, Z+1	; 0x01
    21b0:	88 23       	and	r24, r24
    21b2:	41 f4       	brne	.+16     	; 0x21c4 <TIMER1_init+0x74>
	{
		/* Enable interrupt FOR normal mode */
		TIMSK |= (1 << TOIE1);
    21b4:	a9 e5       	ldi	r26, 0x59	; 89
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e9 e5       	ldi	r30, 0x59	; 89
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	84 60       	ori	r24, 0x04	; 4
    21c0:	8c 93       	st	X, r24
    21c2:	56 c0       	rjmp	.+172    	; 0x2270 <TIMER1_init+0x120>
	}
	else if ((Config_Ptr->mode) == CTC_MODE_CHANNEL_A)
    21c4:	e9 81       	ldd	r30, Y+1	; 0x01
    21c6:	fa 81       	ldd	r31, Y+2	; 0x02
    21c8:	81 81       	ldd	r24, Z+1	; 0x01
    21ca:	82 30       	cpi	r24, 0x02	; 2
    21cc:	41 f5       	brne	.+80     	; 0x221e <TIMER1_init+0xce>
	{
		/*set compare value for compare mode channel A*/
		OCR1A  = ((Config_Ptr->compare_value));
    21ce:	aa e4       	ldi	r26, 0x4A	; 74
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e9 81       	ldd	r30, Y+1	; 0x01
    21d4:	fa 81       	ldd	r31, Y+2	; 0x02
    21d6:	86 81       	ldd	r24, Z+6	; 0x06
    21d8:	97 81       	ldd	r25, Z+7	; 0x07
    21da:	11 96       	adiw	r26, 0x01	; 1
    21dc:	9c 93       	st	X, r25
    21de:	8e 93       	st	-X, r24
		/* Enable interrupt for compare mode channel A */
		TIMSK |= (1 << OCIE1A);
    21e0:	a9 e5       	ldi	r26, 0x59	; 89
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e9 e5       	ldi	r30, 0x59	; 89
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	80 61       	ori	r24, 0x10	; 16
    21ec:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel A */
		TCCR1A = ( (TCCR1A & 0x3F) | ( (Config_Ptr -> compare_output) << COM1A0) );
    21ee:	af e4       	ldi	r26, 0x4F	; 79
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	ef e4       	ldi	r30, 0x4F	; 79
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	28 2f       	mov	r18, r24
    21fa:	2f 73       	andi	r18, 0x3F	; 63
    21fc:	e9 81       	ldd	r30, Y+1	; 0x01
    21fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	00 24       	eor	r0, r0
    2208:	96 95       	lsr	r25
    220a:	87 95       	ror	r24
    220c:	07 94       	ror	r0
    220e:	96 95       	lsr	r25
    2210:	87 95       	ror	r24
    2212:	07 94       	ror	r0
    2214:	98 2f       	mov	r25, r24
    2216:	80 2d       	mov	r24, r0
    2218:	82 2b       	or	r24, r18
    221a:	8c 93       	st	X, r24
    221c:	29 c0       	rjmp	.+82     	; 0x2270 <TIMER1_init+0x120>
	}

	else if ( (Config_Ptr->mode) == CTC_MODE_CHANNEL_B){
    221e:	e9 81       	ldd	r30, Y+1	; 0x01
    2220:	fa 81       	ldd	r31, Y+2	; 0x02
    2222:	81 81       	ldd	r24, Z+1	; 0x01
    2224:	83 30       	cpi	r24, 0x03	; 3
    2226:	21 f5       	brne	.+72     	; 0x2270 <TIMER1_init+0x120>
		/*set compare value for compare mode channel B*/
		OCR1B  = ((Config_Ptr -> compare_value));
    2228:	a8 e4       	ldi	r26, 0x48	; 72
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e9 81       	ldd	r30, Y+1	; 0x01
    222e:	fa 81       	ldd	r31, Y+2	; 0x02
    2230:	86 81       	ldd	r24, Z+6	; 0x06
    2232:	97 81       	ldd	r25, Z+7	; 0x07
    2234:	11 96       	adiw	r26, 0x01	; 1
    2236:	9c 93       	st	X, r25
    2238:	8e 93       	st	-X, r24

		/* Enable interrupt for compare mode channel B */
		TIMSK |= (1 << OCIE1B);
    223a:	a9 e5       	ldi	r26, 0x59	; 89
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e9 e5       	ldi	r30, 0x59	; 89
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	88 60       	ori	r24, 0x08	; 8
    2246:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel B */
		TCCR1A = ( (TCCR1A & 0xCF) | ( (Config_Ptr -> compare_output) << COM1B0) );
    2248:	af e4       	ldi	r26, 0x4F	; 79
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	ef e4       	ldi	r30, 0x4F	; 79
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	28 2f       	mov	r18, r24
    2254:	2f 7c       	andi	r18, 0xCF	; 207
    2256:	e9 81       	ldd	r30, Y+1	; 0x01
    2258:	fa 81       	ldd	r31, Y+2	; 0x02
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	88 2f       	mov	r24, r24
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	82 95       	swap	r24
    2262:	92 95       	swap	r25
    2264:	90 7f       	andi	r25, 0xF0	; 240
    2266:	98 27       	eor	r25, r24
    2268:	80 7f       	andi	r24, 0xF0	; 240
    226a:	98 27       	eor	r25, r24
    226c:	82 2b       	or	r24, r18
    226e:	8c 93       	st	X, r24

	}

	/*configure the mode of the timer*/
	TCCR1B = ( ( TCCR1B & 0xE7 ) |  ( ( (Config_Ptr -> mode) >> 1) << WGM12)  );
    2270:	ae e4       	ldi	r26, 0x4E	; 78
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ee e4       	ldi	r30, 0x4E	; 78
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	28 2f       	mov	r18, r24
    227c:	27 7e       	andi	r18, 0xE7	; 231
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	81 81       	ldd	r24, Z+1	; 0x01
    2284:	86 95       	lsr	r24
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	82 2b       	or	r24, r18
    2298:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
    229a:	ae e4       	ldi	r26, 0x4E	; 78
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	ee e4       	ldi	r30, 0x4E	; 78
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	98 2f       	mov	r25, r24
    22a6:	98 7f       	andi	r25, 0xF8	; 248
    22a8:	e9 81       	ldd	r30, Y+1	; 0x01
    22aa:	fa 81       	ldd	r31, Y+2	; 0x02
    22ac:	80 81       	ld	r24, Z
    22ae:	89 2b       	or	r24, r25
    22b0:	8c 93       	st	X, r24
}
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <TIMER2_init+0x6>
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
    22ca:	a4 e4       	ldi	r26, 0x44	; 68
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e9 81       	ldd	r30, Y+1	; 0x01
    22d0:	fa 81       	ldd	r31, Y+2	; 0x02
    22d2:	84 81       	ldd	r24, Z+4	; 0x04
    22d4:	95 81       	ldd	r25, Z+5	; 0x05
    22d6:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
    22d8:	a3 e4       	ldi	r26, 0x43	; 67
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e9 81       	ldd	r30, Y+1	; 0x01
    22de:	fa 81       	ldd	r31, Y+2	; 0x02
    22e0:	86 81       	ldd	r24, Z+6	; 0x06
    22e2:	97 81       	ldd	r25, Z+7	; 0x07
    22e4:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    22e6:	e5 e4       	ldi	r30, 0x45	; 69
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 e8       	ldi	r24, 0x80	; 128
    22ec:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    22ee:	e9 81       	ldd	r30, Y+1	; 0x01
    22f0:	fa 81       	ldd	r31, Y+2	; 0x02
    22f2:	81 81       	ldd	r24, Z+1	; 0x01
    22f4:	88 23       	and	r24, r24
    22f6:	41 f4       	brne	.+16     	; 0x2308 <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    22f8:	a9 e5       	ldi	r26, 0x59	; 89
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e9 e5       	ldi	r30, 0x59	; 89
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	80 64       	ori	r24, 0x40	; 64
    2304:	8c 93       	st	X, r24
    2306:	0c c0       	rjmp	.+24     	; 0x2320 <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    2308:	e9 81       	ldd	r30, Y+1	; 0x01
    230a:	fa 81       	ldd	r31, Y+2	; 0x02
    230c:	81 81       	ldd	r24, Z+1	; 0x01
    230e:	81 30       	cpi	r24, 0x01	; 1
    2310:	39 f4       	brne	.+14     	; 0x2320 <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    2312:	a9 e5       	ldi	r26, 0x59	; 89
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e9 e5       	ldi	r30, 0x59	; 89
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	80 68       	ori	r24, 0x80	; 128
    231e:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
    2320:	a5 e4       	ldi	r26, 0x45	; 69
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e5 e4       	ldi	r30, 0x45	; 69
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	28 2f       	mov	r18, r24
    232c:	27 7b       	andi	r18, 0xB7	; 183
    232e:	e9 81       	ldd	r30, Y+1	; 0x01
    2330:	fa 81       	ldd	r31, Y+2	; 0x02
    2332:	81 81       	ldd	r24, Z+1	; 0x01
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	88 74       	andi	r24, 0x48	; 72
    233a:	90 70       	andi	r25, 0x00	; 0
    233c:	00 24       	eor	r0, r0
    233e:	96 95       	lsr	r25
    2340:	87 95       	ror	r24
    2342:	07 94       	ror	r0
    2344:	96 95       	lsr	r25
    2346:	87 95       	ror	r24
    2348:	07 94       	ror	r0
    234a:	98 2f       	mov	r25, r24
    234c:	80 2d       	mov	r24, r0
    234e:	82 2b       	or	r24, r18
    2350:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
    2352:	a5 e4       	ldi	r26, 0x45	; 69
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e5 e4       	ldi	r30, 0x45	; 69
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	28 2f       	mov	r18, r24
    235e:	2f 7c       	andi	r18, 0xCF	; 207
    2360:	e9 81       	ldd	r30, Y+1	; 0x01
    2362:	fa 81       	ldd	r31, Y+2	; 0x02
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	83 70       	andi	r24, 0x03	; 3
    236c:	90 70       	andi	r25, 0x00	; 0
    236e:	82 95       	swap	r24
    2370:	92 95       	swap	r25
    2372:	90 7f       	andi	r25, 0xF0	; 240
    2374:	98 27       	eor	r25, r24
    2376:	80 7f       	andi	r24, 0xF0	; 240
    2378:	98 27       	eor	r25, r24
    237a:	82 2b       	or	r24, r18
    237c:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
    237e:	a5 e4       	ldi	r26, 0x45	; 69
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e5 e4       	ldi	r30, 0x45	; 69
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	98 2f       	mov	r25, r24
    238a:	98 7f       	andi	r25, 0xF8	; 248
    238c:	e9 81       	ldd	r30, Y+1	; 0x01
    238e:	fa 81       	ldd	r31, Y+2	; 0x02
    2390:	80 81       	ld	r24, Z
    2392:	87 70       	andi	r24, 0x07	; 7
    2394:	89 2b       	or	r24, r25
    2396:	8c 93       	st	X, r24
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <Timer0_Stop>:

void Timer0_Stop()
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
    23aa:	a3 e5       	ldi	r26, 0x53	; 83
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e3 e5       	ldi	r30, 0x53	; 83
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	88 7f       	andi	r24, 0xF8	; 248
    23b6:	8c 93       	st	X, r24
}
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <Timer1_Stop>:

void Timer1_Stop(){
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
    23c6:	ae e4       	ldi	r26, 0x4E	; 78
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	ee e4       	ldi	r30, 0x4E	; 78
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	88 7f       	andi	r24, 0xF8	; 248
    23d2:	8c 93       	st	X, r24
}
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <Timer2_Stop>:

void Timer2_Stop(){
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
    23e2:	a5 e4       	ldi	r26, 0x45	; 69
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e5 e4       	ldi	r30, 0x45	; 69
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	88 7f       	andi	r24, 0xF8	; 248
    23ee:	8c 93       	st	X, r24
}
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <Timer0_setCallBack+0x6>
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	90 93 77 00 	sts	0x0077, r25
    240c:	80 93 76 00 	sts	0x0076, r24
}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <Timer1_setCallBack+0x6>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	9a 81       	ldd	r25, Y+2	; 0x02
    242c:	90 93 79 00 	sts	0x0079, r25
    2430:	80 93 78 00 	sts	0x0078, r24
}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <Timer2_setCallBack+0x6>
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	90 93 7b 00 	sts	0x007B, r25
    2454:	80 93 7a 00 	sts	0x007A, r24
}
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	08 95       	ret

00002462 <TWI_init>:
#include <avr/io.h>

uint16 g_address;

void TWI_init(uint16 address,uint8 prescaler)
{
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	00 d0       	rcall	.+0      	; 0x2468 <TWI_init+0x6>
    2468:	0f 92       	push	r0
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	6b 83       	std	Y+3, r22	; 0x03
	g_address = address;
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	90 93 8d 00 	sts	0x008D, r25
    247c:	80 93 8c 00 	sts	0x008C, r24
    /* Bit Rate: in kbps using  pre-scaler TWPS and TWBR */
    TWBR = 0X02;
    2480:	e0 e2       	ldi	r30, 0x20	; 32
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	82 e0       	ldi	r24, 0x02	; 2
    2486:	80 83       	st	Z, r24
	TWSR = (TWSR & 0XFC) | prescaler;
    2488:	a1 e2       	ldi	r26, 0x21	; 33
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e1 e2       	ldi	r30, 0x21	; 33
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	98 2f       	mov	r25, r24
    2494:	9c 7f       	andi	r25, 0xFC	; 252
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	89 2b       	or	r24, r25
    249a:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = g_address;
    249c:	e2 e2       	ldi	r30, 0x22	; 34
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 91 8c 00 	lds	r24, 0x008C
    24a4:	90 91 8d 00 	lds	r25, 0x008D
    24a8:	80 83       	st	Z, r24
	
    TWCR = ( TWCR & 0x40) | (NO_ACK);
    24aa:	a6 e5       	ldi	r26, 0x56	; 86
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e6 e5       	ldi	r30, 0x56	; 86
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	80 74       	andi	r24, 0x40	; 64
    24b6:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    24b8:	e6 e5       	ldi	r30, 0x56	; 86
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	84 e0       	ldi	r24, 0x04	; 4
    24be:	80 83       	st	Z, r24
}
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <TWI_start>:

void TWI_start(void)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    24d4:	e6 e5       	ldi	r30, 0x56	; 86
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	84 ea       	ldi	r24, 0xA4	; 164
    24da:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    24dc:	e6 e5       	ldi	r30, 0x56	; 86
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	88 23       	and	r24, r24
    24e4:	dc f7       	brge	.-10     	; 0x24dc <TWI_start+0x10>
}
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <TWI_stop>:

void TWI_stop(void)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    24f4:	e6 e5       	ldi	r30, 0x56	; 86
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	84 e9       	ldi	r24, 0x94	; 148
    24fa:	80 83       	st	Z, r24
}
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	0f 92       	push	r0
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    250e:	e3 e2       	ldi	r30, 0x23	; 35
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2516:	e6 e5       	ldi	r30, 0x56	; 86
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	84 e8       	ldi	r24, 0x84	; 132
    251c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    251e:	e6 e5       	ldi	r30, 0x56	; 86
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	88 23       	and	r24, r24
    2526:	dc f7       	brge	.-10     	; 0x251e <TWI_writeByte+0x1c>
}
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2538:	e6 e5       	ldi	r30, 0x56	; 86
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	84 ec       	ldi	r24, 0xC4	; 196
    253e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2540:	e6 e5       	ldi	r30, 0x56	; 86
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	88 23       	and	r24, r24
    2548:	dc f7       	brge	.-10     	; 0x2540 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    254a:	e3 e2       	ldi	r30, 0x23	; 35
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
}
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    255e:	e6 e5       	ldi	r30, 0x56	; 86
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	84 e8       	ldi	r24, 0x84	; 132
    2564:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2566:	e6 e5       	ldi	r30, 0x56	; 86
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	88 23       	and	r24, r24
    256e:	dc f7       	brge	.-10     	; 0x2566 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2570:	e3 e2       	ldi	r30, 0x23	; 35
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2586:	e1 e2       	ldi	r30, 0x21	; 33
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	88 7f       	andi	r24, 0xF8	; 248
    258e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2590:	89 81       	ldd	r24, Y+1	; 0x01
}
    2592:	0f 90       	pop	r0
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate,const UART_configType * Config_Ptr)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	28 97       	sbiw	r28, 0x08	; 8
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	6b 83       	std	Y+3, r22	; 0x03
    25b0:	7c 83       	std	Y+4, r23	; 0x04
    25b2:	8d 83       	std	Y+5, r24	; 0x05
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	58 87       	std	Y+8, r21	; 0x08
    25b8:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    25ba:	1a 82       	std	Y+2, r1	; 0x02
    25bc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    25be:	eb e2       	ldi	r30, 0x2B	; 43
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 5,6,7 or 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    25c6:	ea e2       	ldi	r30, 0x2A	; 42
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	88 e1       	ldi	r24, 0x18	; 24
    25cc:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    25ce:	e0 e4       	ldi	r30, 0x40	; 64
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 e8       	ldi	r24, 0x80	; 128
    25d4:	80 83       	st	Z, r24

	/*insert the required data bits value in the tsecond and third UCSZ1:0*/

	UCSRC = (UCSRC&0XF9) | ((Config_Ptr->data_bits)<<1);
    25d6:	a0 e4       	ldi	r26, 0x40	; 64
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e0 e4       	ldi	r30, 0x40	; 64
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	28 2f       	mov	r18, r24
    25e2:	29 7f       	andi	r18, 0xF9	; 249
    25e4:	ef 81       	ldd	r30, Y+7	; 0x07
    25e6:	f8 85       	ldd	r31, Y+8	; 0x08
    25e8:	80 81       	ld	r24, Z
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	82 2b       	or	r24, r18
    25f4:	8c 93       	st	X, r24

	/*insert the required parity in the fourth and fifth bits UPM1:0*/

	UCSRC = (UCSRC&0XCF) | ((Config_Ptr->parity)<<4);
    25f6:	a0 e4       	ldi	r26, 0x40	; 64
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e0 e4       	ldi	r30, 0x40	; 64
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	28 2f       	mov	r18, r24
    2602:	2f 7c       	andi	r18, 0xCF	; 207
    2604:	ef 81       	ldd	r30, Y+7	; 0x07
    2606:	f8 85       	ldd	r31, Y+8	; 0x08
    2608:	81 81       	ldd	r24, Z+1	; 0x01
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	82 95       	swap	r24
    2610:	92 95       	swap	r25
    2612:	90 7f       	andi	r25, 0xF0	; 240
    2614:	98 27       	eor	r25, r24
    2616:	80 7f       	andi	r24, 0xF0	; 240
    2618:	98 27       	eor	r25, r24
    261a:	82 2b       	or	r24, r18
    261c:	8c 93       	st	X, r24

	/*insert the required stop bits in the third bit USBS*/

	UCSRC = (UCSRC&0XF7) | ((Config_Ptr->stop_bit)<<3);
    261e:	a0 e4       	ldi	r26, 0x40	; 64
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e0 e4       	ldi	r30, 0x40	; 64
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	28 2f       	mov	r18, r24
    262a:	27 7f       	andi	r18, 0xF7	; 247
    262c:	ef 81       	ldd	r30, Y+7	; 0x07
    262e:	f8 85       	ldd	r31, Y+8	; 0x08
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	82 2b       	or	r24, r18
    2644:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	ad 81       	ldd	r26, Y+5	; 0x05
    264c:	be 81       	ldd	r27, Y+6	; 0x06
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	aa 1f       	adc	r26, r26
    2654:	bb 1f       	adc	r27, r27
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	aa 1f       	adc	r26, r26
    265c:	bb 1f       	adc	r27, r27
    265e:	88 0f       	add	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	aa 1f       	adc	r26, r26
    2664:	bb 1f       	adc	r27, r27
    2666:	9c 01       	movw	r18, r24
    2668:	ad 01       	movw	r20, r26
    266a:	80 e4       	ldi	r24, 0x40	; 64
    266c:	92 e4       	ldi	r25, 0x42	; 66
    266e:	af e0       	ldi	r26, 0x0F	; 15
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__udivmodsi4>
    267a:	da 01       	movw	r26, r20
    267c:	c9 01       	movw	r24, r18
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2684:	e0 e4       	ldi	r30, 0x40	; 64
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	9a 81       	ldd	r25, Y+2	; 0x02
    268c:	89 2f       	mov	r24, r25
    268e:	99 27       	eor	r25, r25
    2690:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2692:	e9 e2       	ldi	r30, 0x29	; 41
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	80 83       	st	Z, r24
}
    269a:	28 96       	adiw	r28, 0x08	; 8
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	0f 92       	push	r0
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    26b8:	eb e2       	ldi	r30, 0x2B	; 43
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	88 2f       	mov	r24, r24
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	80 72       	andi	r24, 0x20	; 32
    26c4:	90 70       	andi	r25, 0x00	; 0
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	b9 f3       	breq	.-18     	; 0x26b8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    26ca:	ec e2       	ldi	r30, 0x2C	; 44
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    26e2:	eb e2       	ldi	r30, 0x2B	; 43
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	88 23       	and	r24, r24
    26ea:	dc f7       	brge	.-10     	; 0x26e2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    26ec:	ec e2       	ldi	r30, 0x2C	; 44
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
}
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <UART_sendString+0x6>
    26fe:	0f 92       	push	r0
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	9b 83       	std	Y+3, r25	; 0x03
    2706:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2708:	19 82       	std	Y+1, r1	; 0x01
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	80 81       	ld	r24, Z
    271e:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_sendByte>
		i++;
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	9b 81       	ldd	r25, Y+3	; 0x03
    2732:	fc 01       	movw	r30, r24
    2734:	e2 0f       	add	r30, r18
    2736:	f3 1f       	adc	r31, r19
    2738:	80 81       	ld	r24, Z
    273a:	88 23       	and	r24, r24
    273c:	39 f7       	brne	.-50     	; 0x270c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    274a:	0f 93       	push	r16
    274c:	1f 93       	push	r17
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	00 d0       	rcall	.+0      	; 0x2754 <UART_receiveString+0xa>
    2754:	0f 92       	push	r0
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	9b 83       	std	Y+3, r25	; 0x03
    275c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    275e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	8c 01       	movw	r16, r24
    276c:	02 0f       	add	r16, r18
    276e:	13 1f       	adc	r17, r19
    2770:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_recieveByte>
    2774:	f8 01       	movw	r30, r16
    2776:	80 83       	st	Z, r24
    2778:	0f c0       	rjmp	.+30     	; 0x2798 <UART_receiveString+0x4e>

	/* Receive the whole string until the '+' */
	while(Str[i] != '+')
	{
		i++;
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	9b 81       	ldd	r25, Y+3	; 0x03
    278a:	8c 01       	movw	r16, r24
    278c:	02 0f       	add	r16, r18
    278e:	13 1f       	adc	r17, r19
    2790:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_recieveByte>
    2794:	f8 01       	movw	r30, r16
    2796:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '+' */
	while(Str[i] != '+')
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	9b 81       	ldd	r25, Y+3	; 0x03
    27a2:	fc 01       	movw	r30, r24
    27a4:	e2 0f       	add	r30, r18
    27a6:	f3 1f       	adc	r31, r19
    27a8:	80 81       	ld	r24, Z
    27aa:	8b 32       	cpi	r24, 0x2B	; 43
    27ac:	31 f7       	brne	.-52     	; 0x277a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	9b 81       	ldd	r25, Y+3	; 0x03
    27b8:	fc 01       	movw	r30, r24
    27ba:	e2 0f       	add	r30, r18
    27bc:	f3 1f       	adc	r31, r19
    27be:	10 82       	st	Z, r1
}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	08 95       	ret

000027d0 <__udivmodsi4>:
    27d0:	a1 e2       	ldi	r26, 0x21	; 33
    27d2:	1a 2e       	mov	r1, r26
    27d4:	aa 1b       	sub	r26, r26
    27d6:	bb 1b       	sub	r27, r27
    27d8:	fd 01       	movw	r30, r26
    27da:	0d c0       	rjmp	.+26     	; 0x27f6 <__udivmodsi4_ep>

000027dc <__udivmodsi4_loop>:
    27dc:	aa 1f       	adc	r26, r26
    27de:	bb 1f       	adc	r27, r27
    27e0:	ee 1f       	adc	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	a2 17       	cp	r26, r18
    27e6:	b3 07       	cpc	r27, r19
    27e8:	e4 07       	cpc	r30, r20
    27ea:	f5 07       	cpc	r31, r21
    27ec:	20 f0       	brcs	.+8      	; 0x27f6 <__udivmodsi4_ep>
    27ee:	a2 1b       	sub	r26, r18
    27f0:	b3 0b       	sbc	r27, r19
    27f2:	e4 0b       	sbc	r30, r20
    27f4:	f5 0b       	sbc	r31, r21

000027f6 <__udivmodsi4_ep>:
    27f6:	66 1f       	adc	r22, r22
    27f8:	77 1f       	adc	r23, r23
    27fa:	88 1f       	adc	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	1a 94       	dec	r1
    2800:	69 f7       	brne	.-38     	; 0x27dc <__udivmodsi4_loop>
    2802:	60 95       	com	r22
    2804:	70 95       	com	r23
    2806:	80 95       	com	r24
    2808:	90 95       	com	r25
    280a:	9b 01       	movw	r18, r22
    280c:	ac 01       	movw	r20, r24
    280e:	bd 01       	movw	r22, r26
    2810:	cf 01       	movw	r24, r30
    2812:	08 95       	ret

00002814 <__prologue_saves__>:
    2814:	2f 92       	push	r2
    2816:	3f 92       	push	r3
    2818:	4f 92       	push	r4
    281a:	5f 92       	push	r5
    281c:	6f 92       	push	r6
    281e:	7f 92       	push	r7
    2820:	8f 92       	push	r8
    2822:	9f 92       	push	r9
    2824:	af 92       	push	r10
    2826:	bf 92       	push	r11
    2828:	cf 92       	push	r12
    282a:	df 92       	push	r13
    282c:	ef 92       	push	r14
    282e:	ff 92       	push	r15
    2830:	0f 93       	push	r16
    2832:	1f 93       	push	r17
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	ca 1b       	sub	r28, r26
    283e:	db 0b       	sbc	r29, r27
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	09 94       	ijmp

0000284c <__epilogue_restores__>:
    284c:	2a 88       	ldd	r2, Y+18	; 0x12
    284e:	39 88       	ldd	r3, Y+17	; 0x11
    2850:	48 88       	ldd	r4, Y+16	; 0x10
    2852:	5f 84       	ldd	r5, Y+15	; 0x0f
    2854:	6e 84       	ldd	r6, Y+14	; 0x0e
    2856:	7d 84       	ldd	r7, Y+13	; 0x0d
    2858:	8c 84       	ldd	r8, Y+12	; 0x0c
    285a:	9b 84       	ldd	r9, Y+11	; 0x0b
    285c:	aa 84       	ldd	r10, Y+10	; 0x0a
    285e:	b9 84       	ldd	r11, Y+9	; 0x09
    2860:	c8 84       	ldd	r12, Y+8	; 0x08
    2862:	df 80       	ldd	r13, Y+7	; 0x07
    2864:	ee 80       	ldd	r14, Y+6	; 0x06
    2866:	fd 80       	ldd	r15, Y+5	; 0x05
    2868:	0c 81       	ldd	r16, Y+4	; 0x04
    286a:	1b 81       	ldd	r17, Y+3	; 0x03
    286c:	aa 81       	ldd	r26, Y+2	; 0x02
    286e:	b9 81       	ldd	r27, Y+1	; 0x01
    2870:	ce 0f       	add	r28, r30
    2872:	d1 1d       	adc	r29, r1
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	ed 01       	movw	r28, r26
    2880:	08 95       	ret

00002882 <_exit>:
    2882:	f8 94       	cli

00002884 <__stop_program>:
    2884:	ff cf       	rjmp	.-2      	; 0x2884 <__stop_program>
